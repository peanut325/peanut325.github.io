<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2022/02/03/redis6/"/>
    <url>/2022/02/03/redis6/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis概述和安装"><a href="#Redis概述和安装" class="headerlink" title="Redis概述和安装"></a>Redis概述和安装</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Redis是一个开源的<strong>key-value</strong>存储系统。</li><li>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。</li><li>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li><li>在此基础上，Redis支持各种不同方式的排序。</li><li>与memcached一样，为了保证效率，数据都是缓存在内存中。</li><li>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li><li>并且在此基础上实现了master-slave(主从)同步。</li></ul><p>相关知识：</p><ul><li>Redis是<strong>单线程+多路IO复用技术</strong>，与Memcache三点不同: <strong>支持多数据类型，支持持久化，单线程+多路IO复用</strong></li><li>Redis默认端口为<strong>6379</strong></li><li>默认<strong>16个数据库</strong>，类似数组下标从0开始，初始默认使用0号库（使用select可以换库）</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处Redis是在Linux上安装， 不用考虑在windows环境下对Redis的支持</p><ol><li><p>先下载Redis安装包</p></li><li><p>使用Xftp文件传输工具将压缩包传输到Linux的opt目录</p><p><img src="/img/redis6.assets/image-20220123112438172.png" alt="image-20220123112438172"></p><p>在Xshell上使用命令查看是否传输成功</p><p><img src="/img/redis6.assets/image-20220123112555011.png" alt="image-20220123112555011"></p></li><li><p>Redis需要gcc编译环境的支持</p><ul><li>使用<strong>gcc –version</strong> 命令查看是否安装gcc （此时我的gcc版本为4.8.5）</li><li>使用<strong>yum install gcc</strong> 命令安装（需要联网，安装过程注意输入y）</li></ul></li><li><p>解压Redis压缩文件</p><ul><li>使用<strong>tar -zxvf</strong> redis-6.2.6.tar.gz 解压</li></ul></li><li><p>编译Redis</p><ul><li><p>cd进入解压后的redis目录，使用<strong>make</strong>编译</p><p><img src="/img/redis6.assets/image-20220123113745704.png" alt="image-20220123113745704"></p></li></ul></li><li><p>安装Redis</p><ul><li><p>cd进入目录使用<strong>make install</strong> 安装</p><p><img src="/img/redis6.assets/image-20220123113913711.png" alt="image-20220123113913711"></p></li></ul></li><li><p>检查是否安装成功</p><ul><li><p>使用<strong>cd /usr/local/bin</strong>进入到目录查看即可</p><p><img src="/img/redis6.assets/image-20220123114339633.png" alt="image-20220123114339633"></p></li></ul></li></ol><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul><li><p>前台启动</p><p>进入cd /usr/local/bin 目录使用<strong>redis-server</strong>命令可以直接启动，弊端是Xshell关闭连接后，redis也会关闭</p></li><li><p>后台启动（推荐）</p><ol><li><p>进入cd /usr/local/bin 目录找到redis.conf配置文件，使用命令<strong>cp redis.conf /etc/redis.conf</strong>将他复制到etc目录</p></li><li><p>进入etc目录修改**/etc目录下的redis.conf<strong>文件，注意将</strong>daemonize no改成daemonize yes**</p><p>使用<strong>vi redis.conf</strong>命令进行修改，/daemonize命令找到位置，按 <strong>i</strong> 进行修改后，<strong>Esc</strong> 按键退出修改，**:wq!**保存即可</p></li><li><p>进入cd /usr/local/bin </p><ul><li>使用 <strong>redis-server /etc/redis.conf</strong> 命令开启redis，此时查询进程状态即可<strong>ps -ef | grep redis</strong></li><li>或者使用客户端访问 即<strong>redis-cli</strong> [-p 端口号] 命令也可以</li></ul></li></ol></li></ul><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><ul><li><strong>redis-cli shutdown</strong> 单实例关闭</li><li><strong>shutdown</strong> 在终端中关闭 </li><li>ps ef | grep redis 查询进程后，直接 <strong>kill [-9] 进程号</strong> 来关闭</li></ul><h1 id="常用五大数据类型"><a href="#常用五大数据类型" class="headerlink" title="常用五大数据类型"></a>常用五大数据类型</h1><p>redis命令：<a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><h2 id="Redis键（key）"><a href="#Redis键（key）" class="headerlink" title="Redis键（key）"></a>Redis键（key）</h2><ul><li>keys *查看当前库所有key   (匹配：keys *1)</li><li>set key value 创建key</li><li>exists key判断某个key是否存在</li><li>type key 查看你的key是什么类型</li><li>del key    删除指定的key数据</li><li>unlink key  根据value选择非阻塞删除</li><li>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</li><li>expire key 10  10秒钟：为给定的key设置过期时间</li><li>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</li><li>select命令切换数据库</li><li>dbsize查看当前数据库的key的数量</li><li>flushdb清空当前库（谨慎使用）</li><li>flushall通杀全部库（谨慎使用）</li></ul><h2 id="Redis字符串（string）"><a href="#Redis字符串（string）" class="headerlink" title="Redis字符串（string）"></a>Redis字符串（string）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，<strong>一个key对应一个value。</strong></li><li>String类型<strong>是二进制安全的</strong>。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</li><li>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是<strong>512M</strong></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以<strong>修改的字符串</strong>，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p><img src="/img/redis6.assets/wpsE542.tmp.jpg" alt="img"> </p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>set  <key><value>添加键值对</p></li><li><p>get  <key>查询对应键值</p></li><li><p>append  <key><value>将给定的<value> 追加到原值的末尾</p></li><li><p>strlen  <key>获得值的长度</p></li><li><p>setnx  <key><value>只有在 <strong>key 不存在时</strong>   设置 key 的值</p></li><li><p>incr  <key> 将 key 中储存的数字值增1，只能对数字值操作，如果为空，新增值为1</p></li><li><p>decr  <key>将 key 中储存的数字值减1，只能对数字值操作，如果为空，新增值为-1</p></li><li><p>incrby / decrby  <key>&lt;步长&gt;将 key 中储存的数字值增减。自定义步长。</p></li></ul><p>incr命令满足原子性</p><p>所谓原子操作是指<strong>不会被线程调度机制打断的操作</strong>；</p><p>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</p><p>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</p><p>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</p><p>Redis单命令的原子性主要得益于Redis的单线程。</p><ul><li>mset  <key1><value1><key2><value2>  …..  同时设置一个或多个 key-value对  </li><li>mget  <key1><key2><key3> ….. 同时获取一个或多个 value  </li><li>msetnx <key1><value1><key2><value2>  ….. 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在（原子性，有一个失败则都失败）</li><li>getrange  <key>&lt;起始位置&gt;&lt;结束位置&gt;  获得值的范围，类似java中的substring</li><li>setrange  <key>&lt;起始位置&gt;<value>  用 <value>  覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</li><li>setex  <key>&lt;过期时间&gt;<value>  设置键值的同时，设置过期时间，单位秒。</li><li>getset <key><value>  以新换旧，设置了新值同时获得旧值。</li></ul><h2 id="Redis列表（List）"><a href="#Redis列表（List）" class="headerlink" title="Redis列表（List）"></a>Redis列表（List）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>单键多值</p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。插入和删除效率高，但查找效率较低。</p><p><img src="/img/redis6.assets/wpsA3A1.tmp.png" alt="img"></p><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>List的数据结构为快速链表<strong>quickList</strong>。</p><p>首先在列表元素较少的情况下会使用<strong>一块连续的内存存储</strong>，这个结构是<strong>ziplist</strong>，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="/img/redis6.assets/wpsB06F.tmp.jpg" alt="img"> </p><p>Redis将<strong>链表和ziplist结合起来组成了quicklist</strong>。也就是将<strong>多个ziplist使用双向指针串起来使用</strong>。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>lpush/rpush  <key><value1><value2><value3> ….  从左边/右边插入一个或多个值。</li><li>lpop/rpop  <key> 从左边/右边吐出一个值。值在键在，值光键亡。 </li><li>rpoplpush  <key1><key2> 从<key1>列表右边吐出一个值，插到<key2>列表左边。</li><li>lrange <key><start><stop> 按照索引下标获得元素(从左到右)</li><li>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</li><li>lindex <key><index>按照索引下标获得元素(从左到右)</li><li>llen <key>获得列表长度 </li><li>linsert <key>  before <value><newvalue>在<value>的后面插入<newvalue>插入值</li><li>lrem <key><n><value>从左边删除n个lse(从左到右)</li><li>lset<key><index><value>将列表key下标为index的值替换成value</li></ul><h2 id="Redis集合（Set）"><a href="#Redis集合（Set）" class="headerlink" title="Redis集合（Set）"></a>Redis集合（Set）</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是<strong>string类型的无序集合</strong>。它底层其实是一个value为null的hash表，所以添加，删除，查找的复杂度都是**O(1)**。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p><h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><p>Set数据结构是dict字典，字典是用<strong>哈希表</strong>实现的。</p><p>Java中HashSet的内部实现使用的是<strong>HashMap</strong>，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部<strong>也使用hash结构</strong>，所有的value都指向同一个内部值。</p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>sadd <key><value1><value2> …..  将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</li><li>smembers <key> 取出该集合的所有值。</li><li>sismember <key><value> 判断集合<key>是否为含有该<value>值，有1，没有0</li><li>scard<key> 返回该集合的元素个数。</li><li>srem <key><value1><value2> ….  删除集合中的某个元素。</li><li>spop <key> <strong>随机</strong>从该集合中吐出一个值。</li><li>srandmember <key><n> 随机从该集合中取出n个值。不会从集合中删除 。</li><li>smove <source><destination> value把集合中一个值从一个集合移动到另一个集合</li><li>sinter <key1><key2> 返回两个集合的交集元素。</li><li>sunion <key1><key2> 返回两个集合的并集元素。</li><li>sdiff <key1><key2> 返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</li></ul><h2 id="Redis哈希（Hash）"><a href="#Redis哈希（Hash）" class="headerlink" title="Redis哈希（Hash）"></a>Redis哈希（Hash）</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>Redis hash 是一个<strong>键值对集合</strong>。</p><p>Redis hash是一个string类型的<strong>field和value的映射表</strong>，hash特别适合用于存储对象。类似Java里面的**Map&lt;String,Object&gt;**。</p><h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>hset <key><field><value> 给<key>集合中的  <field>键赋值<value></li><li>hget <key1><field>从<key1> 集合<field>取出 value </li><li>hmset <key1><field1><value1><field2><value2>…  批量设置hash的值</li><li>hexists<key1><field> 查看哈希表 key 中，给定域 field 是否存在。 </li><li>hkeys <key> 列出该hash集合的所有field</li><li>hvals <key> 列出该hash集合的所有value</li><li>hincrby <key><field><increment> 为哈希表 key 中的域 field 的值加上增量 1  -1</li><li>hsetnx <key><field><value> 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 </li></ul><h2 id="Redis有序集合（Zset）"><a href="#Redis有序集合（Zset）" class="headerlink" title="Redis有序集合（Zset）"></a>Redis有序集合（Zset）</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>Redis有序集合zset与普通集合set非常相似，是一个<strong>没有重复元素的字符串</strong>集合。</p><p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，<strong>但是评分可以是重复了</strong> 。</p><p>因为元素是<strong>有序</strong>的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h3 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h3><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）<strong>hash</strong>，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）<strong>跳跃表</strong>，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。加快查找效率。</p><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>zadd  <key><score1><value1><score2><value2>…  将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</li><li>zrange <key><start><stop>  [WITHSCORES]  返回有序集 key 中，下标在<start><stop>之间的元素，带WITHSCORES，可以让分数一起和值返回到结果集。</li><li>zrangebyscore key min max [withscores] [limit offset count]    返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </li><li>zrevrangebyscore key max min [withscores] [limit offset count] 同上，改为从大到小排列。 </li><li>zincrby <key><increment><value> 为元素的score加上增量</li><li>zrem  <key><value> 删除该集合下，指定值的元素 </li><li>zcount <key><min><max> 统计该集合，分数区间内的元素个数 </li><li>zrank <key><value> 返回该值在集合中的排名，从0开始。</li></ul><h1 id="Redis的配置文件"><a href="#Redis的配置文件" class="headerlink" title="Redis的配置文件"></a>Redis的配置文件</h1><h2 id="Units单位"><a href="#Units单位" class="headerlink" title="Units单位"></a>Units单位</h2><p>配置大小单位,开头定义了一些基本的度量单位，只支持<strong>bytes</strong>，不支持bit，大小写不敏感</p><h2 id="INCLUDES包含"><a href="#INCLUDES包含" class="headerlink" title="INCLUDES包含"></a>INCLUDES包含</h2><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p><h2 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h2><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>默认情况bind=127.0.0.1<strong>只能接受本机的访问请求</strong>，不写的情况下，无限制接受任何ip地址的访问</p><p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要<strong>将其注释掉</strong></p><p>如果开启了<strong>protected-mode</strong>，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</p><p><img src="/img/redis6.assets/image-20220123165829199.png" alt="image-20220123165829199"></p><p>重启redis后，查看进程，此时不是本机访问</p><p><img src="/img/redis6.assets/image-20220123171701177.png" alt="image-20220123171701177"></p><h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p>将本机访问保护模式设置<strong>no</strong></p><p><img src="/img/redis6.assets/image-20220123170109109.png" alt="image-20220123170109109"></p><h3 id="port端口号"><a href="#port端口号" class="headerlink" title="port端口号"></a>port端口号</h3><p>默认为6379</p><h3 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h3><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p><p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p><p>注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p><h3 id="time-out"><a href="#time-out" class="headerlink" title="time-out"></a>time-out</h3><p>一个空闲的客户端维持多少秒会关闭，<strong>0表示关闭该功能。即永不关闭</strong>。</p><h3 id="tcp-keepalive"><a href="#tcp-keepalive" class="headerlink" title="tcp-keepalive"></a>tcp-keepalive</h3><p>对访问客户端的一种心跳检测，每个n秒检测一次。</p><p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 </p><h2 id="GENERAL通用"><a href="#GENERAL通用" class="headerlink" title="GENERAL通用"></a>GENERAL通用</h2><h3 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h3><p>是否为后台进程，设置为yes</p><p>守护进程，后台启动</p><p><img src="/img/redis6.assets/wpsCF.tmp.png" alt="img"> </p><h3 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a>pidfile</h3><p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p><p><img src="/img/redis6.assets/wpsD0.tmp.png" alt="img"> </p><p><em><strong>*loglevel*</strong></em> </p><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<em><strong>*notice*</strong></em></p><p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning</p><p><img src="/img/redis6.assets/wpsD1.tmp.png" alt="img"> </p><p><em><strong>*logfile*</strong></em> </p><p>日志文件名称</p><p><img src="/img/redis6.assets/wpsE2.tmp.png" alt="img"> </p><p><em><strong>*d*</strong></em><em><strong>*atabases 16*</strong></em> </p><p>设定库的数量 默认16，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</p><h1 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h1><p>Redis 发布订阅 (pub/sub) 是一种<strong>消息通信模式</strong>：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端<strong>可以订阅任意数量的频道</strong>。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现:"></a>简单实现:</h2><ol><li> 打开一个客户端订阅channel1</li></ol><p>   SUBSCRIBE channel1</p><ol start="2"><li><p>打开另一个客户端，给channel1发布消息hello</p><p>publish channel1 hello</p><p><img src="/img/redis6.assets/wps1CB9.tmp.jpg" alt="img"> </p><p>返回的1是订阅者数量</p></li><li><p>打开第一个客户端可以看到发送的消息</p></li></ol><h1 id="Redis新数据类型"><a href="#Redis新数据类型" class="headerlink" title="Redis新数据类型"></a>Redis新数据类型</h1><h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p><p><img src="/img/redis6.assets/wpsB45B.tmp.jpg" alt="img"> </p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>​    Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>（1） Bitmaps<strong>本身不是一种数据类型</strong>， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p><p>（2） Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><p><img src="/img/redis6.assets/wpsB45C.tmp.jpg" alt="img"> </p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h4><p>（1）格式</p><p>setbit<key><offset><value> 设置Bitmaps中某个偏移量的值（0或1）</p><p>*offset:偏移量从0开始</p><p>（2）实例</p><p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p><img src="/img/redis6.assets/wpsB45E.tmp.jpg" alt="img"> </p><p>unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps</p><p><img src="/img/redis6.assets/wpsB45F.tmp.jpg" alt="img"> </p><p>注：</p><p>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h4><p>（1）格式</p><p>getbit<key><offset>获取Bitmaps中某个偏移量的值</p><p><img src="/img/redis6.assets/wpsB460.tmp.jpg" alt="img"> </p><p>获取键的第offset位的值（从0开始算）</p><p>（2）实例</p><p>获取id=8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过：</p><p><img src="/img/redis6.assets/wpsB461.tmp.jpg" alt="img"> </p><p>注：因为100根本不存在，所以也是返回0</p><h4 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h4><p>统计****字符串****被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p><p>（1）格式</p><p>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</p><p><img src="/img/redis6.assets/wpsB462.tmp.jpg" alt="img"> </p><p>（2）实例</p><p>计算2022-11-06这天的独立访问用户数量</p><p><img src="/img/redis6.assets/wpsB463.tmp.jpg" alt="img"> </p><p>个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。</p><p>start和end代表    起始和结束字节数， 下面操作计算用户id在第1个字节到第3<img src="/img/redis6.assets/wpsB473.tmp.jpg" alt="img"></p><p>举例： K1 【01000001 01000000  00000000 00100001】，对应【0，1，2，3】</p><p>bitcount K1 1 2  ： 统计下标1、2字节组中bit=1的个数，即01000000  00000000</p><p>–》bitcount K1 1 2 　　–》1</p><p>bitcount K1 1 3  ： 统计下标1、2字节组中bit=1的个数，即01000000  00000000 00100001</p><p>–》bitcount K1 1 3　　–》3</p><p>bitcount K1 0 -2  ： 统计下标0到下标倒数第2，字节组中bit=1的个数，即01000001  01000000  00000000</p><p>–》bitcount K1 0 -2　　–》3</p><p> 注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p><h4 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h4><p>(1)格式</p><p>bitop and(or/not/xor) <destkey> [key…]</p><p><img src="/img/redis6.assets/wpsB474.tmp.jpg" alt="img"> </p><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>(2)实例</p><p>2020-11-04 日访问网站的userid=1,2,5,9。</p><p>setbit unique:users:20201104 1 1</p><p>setbit unique:users:20201104 2 1</p><p>setbit unique:users:20201104 5 1</p><p>setbit unique:users:20201104 9 1</p><p>2020-11-03 日访问网站的userid=0,1,4,9。</p><p>setbit unique:users:20201103 0 1</p><p>setbit unique:users:20201103 1 1</p><p>setbit unique:users:20201103 4 1</p><p>setbit unique:users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量</p><p>bitop and unique:users:and:20201104_03</p><p> unique:users:20201103unique:users:20201104</p><p><img src="/img/redis6.assets/wpsB475.tmp.jpg" alt="img"> </p><p><img src="/img/redis6.assets/wpsB476.tmp.jpg" alt="img"> </p><p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集</p><p><img src="/img/redis6.assets/wpsB477.tmp.jpg" alt="img"> </p><h3 id="Bitmaps与set对比"><a href="#Bitmaps与set对比" class="headerlink" title="Bitmaps与set对比"></a>Bitmaps与set对比</h3><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个用户id占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>50000000</td><td>64位*50000000 = 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 = 12.5MB</td></tr></tbody></table><p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><table><thead><tr><th>set和Bitmaps存储独立用户空间对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>一天</td><td>一个月</td><td>一年</td></tr><tr><td>集合类型</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个userid占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>100000</td><td>64位*100000 = 800KB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 = 12.5MB</td></tr></tbody></table><h2 id="HaperLogLog"><a href="#HaperLogLog" class="headerlink" title="HaperLogLog"></a>HaperLogLog</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p><p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><h4 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h4><p>（1）格式</p><p>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</p><p>（2）实例</p><p><img src="/img/redis6.assets/wpsF4A0.tmp.jpg" alt="img"> </p><p>​    将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><h4 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h4><p>（1）格式</p><p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p><p>（2）实例</p><p><img src="/img/redis6.assets/wpsF4B2.tmp.jpg" alt="img"> </p><h4 id="pfmerg"><a href="#pfmerg" class="headerlink" title="pfmerg"></a>pfmerg</h4><p>（1）格式</p><p>pfmerge<destkey><sourcekey> [sourcekey …]  将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p><p>（2）实例</p><p><img src="/img/redis6.assets/wpsF4B4.tmp.jpg" alt="img"> </p><h2 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><h4 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h4><p>（1）格式</p><p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]   添加地理位置（经度，纬度，名称）</p><p>（2）实例</p><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p><img src="/img/redis6.assets/wpsCCB5.tmp.jpg" alt="img"> </p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 <strong>-180 度到 180 度</strong>。有效的纬度从 -85.05112878 度到 85.05112878 度。当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p><strong>已经添加的数据，是无法再次往里面添加的</strong>。</p><h4 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h4><p>（1）格式</p><p>geopos  <key><member> [member…]  获得指定地区的坐标值 </p><p>（2）实例</p><p><img src="/img/redis6.assets/wps3E14.tmp.jpg" alt="img"> </p><h4 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h4><p>（1）格式</p><p>geodist<key><member1><member2>  [m|km|ft|mi ]  获取两个位置之间的直线距离 </p><p>（2）实例</p><p>获取两个位置之间的直线距离</p><p><img src="/img/redis6.assets/wps3E16.tmp.jpg" alt="img"> </p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><h4 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h4><p>（1）格式</p><p>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素 </p><p>经度 纬度 距离 单位</p><p>（2）实例</p><p><img src="/img/redis6.assets/image-20220123195937358.png" alt="image-20220123195937358"></p><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h2 id="Jedis需要的依赖"><a href="#Jedis需要的依赖" class="headerlink" title="Jedis需要的依赖"></a>Jedis需要的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>连接时注意：</p><ul><li><p>禁用Linux的防火墙：Linux(CentOS7)里执行命令  <strong>systemctl stop/disable firewalld.service</strong>，此时可以查看防火墙状态 <strong>systemctl status firewalld.service</strong>  或者开启6379端口 <strong>firewall-cmd –zone=public –add-port=6379/tcp –permanent</strong> ，修改完成后重启防火墙<strong>firewall-cmd –reload</strong>  </p></li><li><p>redis.conf中注释掉bind 127.0.0.1 ,然后 protected-mode no</p></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;192.168.137.3&quot;</span>,<span class="hljs-number">6379</span>);<br>String pong = jedis.ping();<br>System.out.println(<span class="hljs-string">&quot;连接成功：&quot;</span>+pong);<br>jedis.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>具体可以查找Jedis的API</p><h1 id="Redis事务和锁机制"><a href="#Redis事务和锁机制" class="headerlink" title="Redis事务和锁机制"></a>Redis事务和锁机制</h1><h2 id="事务定义"><a href="#事务定义" class="headerlink" title="事务定义"></a>事务定义</h2><p>Redis事务是一个<strong>单独的隔离操作</strong>：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是<strong>串联多个命令防止别的命令插队</strong>。</p><h2 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h2><p>从输入Multi命令开始，输入的命令都会<strong>依次进入命令队列中</strong>，但不会<strong>执行</strong>，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过<strong>discard</strong>来放弃组队。  </p><p><img src="/img/redis6.assets/image-20220124091541482.png" alt="image-20220124091541482"></p><h2 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h2><ul><li>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</li></ul><p><img src="/img/redis6.assets/image-20220124092218705.png" alt="image-20220124092218705"></p><p><img src="/img/redis6.assets/image-20220124092158560.png" alt="image-20220124092158560"></p><ul><li>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</li></ul><p><img src="/img/redis6.assets/image-20220124092310947.png" alt="image-20220124092310947"></p><h2 id="事务冲突和解决"><a href="#事务冲突和解决" class="headerlink" title="事务冲突和解决"></a>事务冲突和解决</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>一个请求想给金额减8000</p><p>一个请求想给金额减5000</p><p>一个请求想给金额减1000</p><p><img src="/img/redis6.assets/image-20220124092539065.png" alt="image-20220124092539065"></p><p>可能会造成账户为负值</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候<strong>都会上锁</strong>，这样别人想拿这个数据就会block直到它拿到锁。传统的<strong>关系型数据库里边就用到了很多这种锁机制</strong>，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><p><img src="/img/redis6.assets/image-20220124092817647.png" alt="image-20220124092817647"></p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以<strong>使用版本号</strong>等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种<strong>check-and-set机制实现事务的</strong>。</p><h3 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h3><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) <strong>key 被其他命令所改动，那么事务将被打断</strong></p><ul><li><p>2个终端同时操作实例</p><p><img src="/img/redis6.assets/image-20220124094440842.png" alt="image-20220124094440842"></p><p><img src="/img/redis6.assets/image-20220124094412731.png" alt="image-20220124094412731"></p><p>因为修改了版本，会造成提交无法执行 </p></li></ul><h3 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h3><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后 ，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><h2 id="Redis事务三大特性"><a href="#Redis事务三大特性" class="headerlink" title="Redis事务三大特性"></a>Redis事务三大特性</h2><ul><li><p>单独的隔离操作 ：事务中的所有命令都<strong>会序列化、按顺序地执行</strong>。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p></li><li><p>没有隔离级别的概念 ：队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p></li><li><p>不保证原子性 ：事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有<strong>回滚</strong> </p></li></ul><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h2 id="RDB（Redis-Database）"><a href="#RDB（Redis-Database）" class="headerlink" title="RDB（Redis Database）"></a>RDB（Redis Database）</h2><p>在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><h3 id="备份是怎么执行的"><a href="#备份是怎么执行的" class="headerlink" title="备份是怎么执行的"></a>备份是怎么执行的</h3><p>Redis会单独创建（<strong>fork</strong>）一个子进程来进行持久化，会先将数据写入到 <strong>一个临时文件</strong>中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件</strong>。 整个过程中，<strong>主进程是不进行任何IO操作的</strong>，这就确保了极高的<strong>性能</strong> 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是<strong>最后一次持久化后的数据可能丢失</strong>。</p><h3 id="FORK"><a href="#FORK" class="headerlink" title="FORK"></a>FORK</h3><ul><li> Fork的作用是<strong>复制一个与当前进程一样的进程</strong>。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为<strong>原进程的子进程</strong></li><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了<strong>写时复制技术</strong></li><li>一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p><img src="/img/redis6.assets/image-20220124140258868.png" alt="image-20220124140258868"></p><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><h4 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h4><p>在redis.conf中配置文件名称，默认为dump.rdb</p><p><img src="/img/redis6.assets/wpsF3B3.tmp.jpg" alt="img"> </p><p>配置位置</p><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p>dir “/myredis/“</p><p><img src="/img/redis6.assets/wpsF3B4.tmp.jpg" alt="img"> </p><h4 id="如何触发RDB快照；保持策略"><a href="#如何触发RDB快照；保持策略" class="headerlink" title="如何触发RDB快照；保持策略"></a>如何触发RDB快照；保持策略</h4><p>配置文件中默认的快照配置</p><p><img src="/img/redis6.assets/wpsF3C5.tmp.jpg" alt="img"> </p><p>命令  save  VS  bgsave</p><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p>bgsave：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。</p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><h4 id="flushall-命令"><a href="#flushall-命令" class="headerlink" title="flushall  命令"></a>flushall  命令</h4><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><h4 id="SNAPSHOTTING-快照"><a href="#SNAPSHOTTING-快照" class="headerlink" title="SNAPSHOTTING  快照"></a>SNAPSHOTTING  快照</h4><h5 id="Save"><a href="#Save" class="headerlink" title="Save"></a>Save</h5><p>格式：save 秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p><p>默认是1分钟内改了\万次，或5分钟内改了10次，或15分钟内改了次。</p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><p>stop-writes-on-bgsave-error</p><p><img src="/img/redis6.assets/wpsF3C6.tmp.jpg" alt="img"> </p><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p><h5 id="rdbcompression-压缩文件"><a href="#rdbcompression-压缩文件" class="headerlink" title="rdbcompression  压缩文件"></a>rdbcompression  压缩文件</h5><p><img src="/img/redis6.assets/wpsF3C7.tmp.jpg" alt="img"> </p><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><h5 id="rdbchecksum-检查完整性"><a href="#rdbchecksum-检查完整性" class="headerlink" title="rdbchecksum  检查完整性"></a>rdbchecksum  检查完整性</h5><p><img src="/img/redis6.assets/wpsF3C8.tmp.jpg" alt="img"> </p><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。推荐yes.</p><h3 id="rdb的备份"><a href="#rdb的备份" class="headerlink" title="rdb的备份"></a>rdb的备份</h3><p>先通过config get dir  查询rdb文件的目录 </p><p>将*.rdb的文件拷贝到别的地方</p><p>rdb的恢复</p><p>关闭Redis</p><p>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p><p>启动Redis, 备份数据会直接加载</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><p><img src="/img/redis6.assets/wpsF3C9.tmp.png" alt="img"> </p><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ul><h3 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h3><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>以<strong>日志的形式来记录每个写操作（增量保存）</strong>，将Redis执行过的所有<strong>写指令记录下来(读操作不记录)<strong>， 只许</strong>追加文件</strong>但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，<strong>redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</strong></p><h3 id="开启AOF"><a href="#开启AOF" class="headerlink" title="开启AOF"></a>开启AOF</h3><p>AOF默认<strong>不开启</strong></p><ul><li>可以在redis.conf中配置文件名称，默认为 appendonly.aof，AOF文件的保存路径，同RDB的路径一致。在配置文件中配置appendonly <strong>yes</strong> 则开启AOF。</li><li>当RDB和AOF同时开启时，<strong>系统默认取AOF的数据</strong>（数据不会存在丢失）</li></ul><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><ul><li>修改默认的appendonly no，改为yes</li><li>如遇到<strong>AOF文件损坏</strong>，通过/usr/local/bin/  redis-check-aof–fix appendonly.aof进行恢复</li><li>备份被写坏的AOF文件</li><li>恢复：重启redis，然后重新加载</li></ul><h3 id="配置信息-1"><a href="#配置信息-1" class="headerlink" title="配置信息"></a>配置信息</h3><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h4><ul><li><p>appendfsync always    始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p></li><li><p>appendfsync everysec   每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p></li><li><p>appendfsync no  redis不主动进行同步，把同步时机交给操作系统。</p></li></ul><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h4><p>如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行<strong>重写</strong>。 </p><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><p><img src="/img/redis6.assets/wps8830.tmp.png" alt="img"> </p><ul><li>备份机制更<strong>稳健</strong>，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以<strong>处理误操作</strong>。</li></ul><h3 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h3><ul><li>比起RDB<strong>占用更多的磁盘空间</strong>。</li><li>恢复<strong>备份速度要慢</strong>。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul><h2 id="用谁"><a href="#用谁" class="headerlink" title="用谁"></a>用谁</h2><ul><li>官方推荐两个都启用。</li><li>如果对数据不敏感，可以选单独用RDB。</li><li>不建议单独用 AOF，因为可能会出现Bug。</li><li>如果只是做纯内存缓存，可以都不用。</li></ul><h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，<strong>Master以写为主，Slave以读为主</strong>。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>读写分离，性能扩展</li><li>容灾快速恢复</li></ul><p><img src="/img/redis6.assets/image-20220125113027372.png" alt="image-20220125113027372"></p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建redis6379.conf在/myredis文件夹中</p><p>配置以下信息</p><p><code>include /myredis/redis.conf</code></p><p><code>pidfile /var/run/redis_6379.pid</code></p><p><code>port 6379</code></p><p><code>dbfilename dump6379.rdb</code></p><h3 id="新建多个不同端口的配置文件"><a href="#新建多个不同端口的配置文件" class="headerlink" title="新建多个不同端口的配置文件"></a>新建多个不同端口的配置文件</h3><p>并修改端口号</p><p><img src="/img/redis6.assets/image-20220125123546200.png" alt="image-20220125123546200"></p><h3 id="启动三台服务器"><a href="#启动三台服务器" class="headerlink" title="启动三台服务器"></a>启动三台服务器</h3><p><img src="/img/redis6.assets/image-20220125123647163.png" alt="image-20220125123647163"></p><h3 id="查看主从复制的相关信息"><a href="#查看主从复制的相关信息" class="headerlink" title="查看主从复制的相关信息"></a>查看主从复制的相关信息</h3><p><strong>info replication</strong> 在不同端口的redis操作中可以查询主从复制的相关信息（使用redis-cli -p port连接不同的端口） </p><p>此时  mster为主机  slaves为从机，以及从机数量和从机的端口号</p><h3 id="配从库"><a href="#配从库" class="headerlink" title="配从库"></a>配从库</h3><p>slaveof  <ip><port> 可以将此端口作为port值的从机</p><p><img src="/img/redis6.assets/image-20220125124003072.png" alt="image-20220125124003072"></p><ul><li>此时在主机上进行写操作，从机可以读取数据，但不能在从机上写数据。</li><li>主机挂掉后，重启就行，一切如初，但从机需要重新进行slaveof设置他的主机</li></ul><h2 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h2><p>主机shutdown后，从机会原地待命，不会作为主服务器。主机又回来了后，主机新增记录，从机还能顺利复制。</p><p>其中一台从机shutdown后情况如何，重连后会变为master， 需要再次加入主服务器后，才会同步主服务器的内容。</p><ul><li><strong>全量复制</strong>：当从服务器连接主服务器后，连接到master后会发送一个sync命令，即向主服务器请求同步数据，主服务器收到请求会进行持久化，生成rdb文件，并发送给从服务器，从服务器拿到rdb文件进行读取。</li><li><strong>增量复制</strong>：每次主服务器进行写操作后，会又主服务器向从服务器发送数据同步请求。但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li></ul><p><img src="/img/redis6.assets/image-20220125132151953.png" alt="image-20220125132151953"></p><h2 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h2><p><img src="/img/redis6.assets/image-20220125132158511.png" alt="image-20220125132158511"></p><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p><p>用 <strong>slaveof  <ip><port></strong></p><p>中途变更转向:会清除之前的数据，重新建立拷贝最新的，风险是一旦某个slave宕机，后面的slave都没法备份，主机挂了，从机还是从机，无法写数据了</p><h2 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h2><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用 <strong>slaveof  no one</strong>  将从机变为主机。</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p><strong>反客为主的自动版</strong>，能够后台<strong>监控</strong>主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p><img src="/img/redis6.assets/image-20220125131645854.png" alt="image-20220125131645854"></p><h3 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h3><p><strong>sentinel monitor mymaster 127.0.0.1 6379 1</strong></p><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。 </p><h3 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h3><p>/usr/local/bin</p><p>redis做压测可以用自带的redis-benchmark工具</p><p>执行<strong>redis-sentinel  /myredis/sentinel.conf</strong> </p><p><img src="/img/redis6.assets/image-20220125131744673.png" alt="image-20220125131744673"></p><h3 id="怎么选择主机"><a href="#怎么选择主机" class="headerlink" title="怎么选择主机"></a>怎么选择主机</h3><p>根据优先级别：<strong>slave-priority</strong>  原主机重启后会变为从机。</p><h3 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><p><img src="/img/redis6.assets/image-20220125131950756.png" alt="image-20220125131950756"></p><p>优先级在redis.conf中默认：slave-priority 100，值越小优先级越高</p><p>偏移量是指获得原主机数据最全的（与原机数据相似度最高）</p><p>每个redis实例启动后都会随机生成一个40位的runid</p><h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>容量不够，redis如何进行扩容？，并发根据优先级别：slave-priority </p><p>原主机重启后会变为从机。写操作， redis如何分摊？</p><p>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过代理主机来解决，但是redis3.0中提供了解决方案。就是无中心化集群配置。</p><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><p>Redis 集群实现了对Redis<strong>的水平扩容</strong>，即启动N个redis节点，将<strong>整个数据库分布存储在这N个节点中</strong>，每个节点存储总数据的1/N。</p><p>Redis 集群通过分区（partition）来提供一定程度的<strong>可用性</strong>（availability）： <strong>即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</strong></p><h2 id="删除持久化数据"><a href="#删除持久化数据" class="headerlink" title="删除持久化数据"></a>删除持久化数据</h2><p>将rdb,aof文件都删除掉。</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>实现6个实例，6379,6380,6381,6389,6390,6391</p><h3 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h3><p>开启daemonize yes，Pid文件名字，指定端口，Log文件名字，Dump.rdb名字，Appendonly 关掉或者换名字</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>cluster-enabled yes  打开集群模式</p><p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p><p>cluster-node-timeout 15000  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p><ul><li>详细信息</li></ul><p><code>include /myredis/redis.conf</code><br><code>pidfile &quot;/var/run/redis_6379.pid&quot;</code><br><code>dbfilename &quot;dump6379.rdb&quot;</code><br><code>port 6379</code><br><code>cluster enabled yes</code><br><code>cluster-config-file nodes-6379.conf</code><br><code>cluster-node-timeout 15000</code></p><h3 id="拷贝多个文件"><a href="#拷贝多个文件" class="headerlink" title="拷贝多个文件"></a>拷贝多个文件</h3><p><img src="/img/redis6.assets/image-20220124201334239.png" alt="image-20220124201334239"></p><p>使用 ：%s/6379/6380  命令修改端口号</p><h3 id="启动6个redis服务"><a href="#启动6个redis服务" class="headerlink" title="启动6个redis服务"></a>启动6个redis服务</h3><p><img src="/img/redis6.assets/image-20220124201932763.png" alt="image-20220124201932763"></p><h3 id="将6个节点合成一个集群"><a href="#将6个节点合成一个集群" class="headerlink" title="将6个节点合成一个集群"></a>将6个节点合成一个集群</h3><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><p><img src="/img/redis6.assets/image-20220124202637315.png" alt="image-20220124202637315"></p><h3 id="合体"><a href="#合体" class="headerlink" title="合体"></a>合体</h3><p>进入到  <strong>cd  /opt/redis-6.2.1/src</strong>  目录执行（需要使用ruby环境）</p><p><code>redis-cli --cluster create --cluster-replicas 1 192.168.241.130:6379 192.168.241.130:6380 192.168.241.130:6381 192.168.241.130:6382 192.168.241.130:6383 192.168.241.130:6384</code></p><p><img src="/img/redis6.assets/image-20220124203127906.png" alt="image-20220124203127906"></p><p>此处不要用127.0.0.1， <strong>请用真实IP地址</strong></p><p>–replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul><li>普通方式登录：可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</li><li>-c 采用集群策略连接，设置数据会自动切换到相应的写主机</li></ul><p><img src="/img/redis6.assets/image-20220124204309813.png" alt="image-20220124204309813"></p><h2 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h2><p>通过<strong>cluster nodes</strong>命令查看集群信息</p><p><img src="/img/redis6.assets/image-20220124211147941.png" alt="image-20220124211147941"></p><h3 id="redis-cluster-如何分配着六个节点"><a href="#redis-cluster-如何分配着六个节点" class="headerlink" title="redis cluster 如何分配着六个节点"></a>redis cluster 如何分配着六个节点</h3><p>一个集群<strong>至少要有三个主节点</strong>。选项 <strong>–cluster-replicas 1</strong> 表示我们希望<strong>为集群中的每个主节点创建一个从节点</strong>。</p><p>分配原则尽量保证每个主数据库运行<strong>在不同的IP地址</strong>，每个<strong>从库和主库不在一个IP地址上</strong>。</p><h2 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h2><ul><li><p>一个 Redis 集群包含 <strong>16384</strong> 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个，集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p></li><li><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p><p>节点 A 负责处理 0 号至 5460 号插槽。</p><p>节点 B 负责处理 5461 号至 10922 号插槽。</p><p>节点 C 负责处理 10923 号至 16383 号插槽。</p></li></ul><h3 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值"></a>在集群中录入值</h3><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p><p>redis-cli客户端提供了 <strong>–c</strong> 参数<strong>实现自动重定向</strong>。</p><p>如 redis-cli  -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</p><ul><li><p>录入多个key时：不在一个slot下的键值，是不能使用mget,mset等多键操作。可以通过**{}来定义组的概念，**从而使key中{}内相同内容的键值对放到一个slot中去。</p><p><img src="/img/redis6.assets/image-20220124211923794.png" alt="image-20220124211923794"></p><p>因为计算插槽值时时通过key来计算，所以使用{}定义在<strong>同一个key</strong>则可以计算插槽。</p></li></ul><h3 id="查询集群中的值"><a href="#查询集群中的值" class="headerlink" title="查询集群中的值"></a>查询集群中的值</h3><p>CLUSTER GETKEYSINSLOT <slot><count> 返回 count 个 slot 槽中的键。</p><p><img src="/img/redis6.assets/image-20220124212609811.png" alt="image-20220124212609811"></p><h2 id="故障恢复-1"><a href="#故障恢复-1" class="headerlink" title="故障恢复"></a>故障恢复</h2><p>主服务器挂掉后，<strong>从节点会自动生为主节点</strong>（注意15秒超时）,当主节点恢复后，会变为<strong>从节点</strong>。</p><h4 id="如果所有某一段插槽的主从节点都宕掉"><a href="#如果所有某一段插槽的主从节点都宕掉" class="headerlink" title="如果所有某一段插槽的主从节点都宕掉"></a>如果所有某一段插槽的主从节点都宕掉</h4><p>redis.conf中的参数  <strong>cluster-require-full-coverage</strong></p><ul><li>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为<strong>yes</strong> ，那么 ，<strong>整个集群都挂掉</strong></li><li>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为<strong>no</strong> ，那么，<strong>该插槽数据全都不能使用，也无法存储</strong>。</li></ul><h2 id="集群的好处"><a href="#集群的好处" class="headerlink" title="集群的好处"></a>集群的好处</h2><ul><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ul><h2 id="集群的不足"><a href="#集群的不足" class="headerlink" title="集群的不足"></a>集群的不足</h2><ul><li>多键操作是不被支持的 </li><li>多键的Redis事务是不被支持的。lua脚本不被支持</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li></ul><h1 id="应用问题解决"><a href="#应用问题解决" class="headerlink" title="应用问题解决"></a>应用问题解决</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>key对应的数据<strong>在数据源并不存在</strong>，<strong>每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源</strong>。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="/img/redis6.assets/image-20220125101915689.png" alt="image-20220125101915689"></p><p>解决方案</p><p>（1） <strong>对空值缓存：</strong>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p><p>（2） <strong>设置可访问的名单（白名单）：</strong></p><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p><p>（3） <strong>采用布隆过滤器</strong>：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p><p>（4） <strong>进行实时监控：</strong>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h2 id="缓存穿透-1"><a href="#缓存穿透-1" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><strong>单个</strong>key<strong>对应的数据存在，但在redis中过期</strong>，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="/img/redis6.assets/image-20220125102227874.png" alt="image-20220125102227874"></p><p>解决方案</p><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><p><strong>（1）预先设置热门数据：</strong>在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p><p><strong>（2）实时调整：</strong>现场监控哪些数据热门，实时调整key的过期时长</p><p><strong>（3）使用锁：</strong></p><ul><li> 就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）</li><li>当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</li><li>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>多个</strong>key<strong>对应的数据存在，但在redis中过期</strong>，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><strong>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</strong></p><p><img src="/img/redis6.assets/image-20220125102654418.png" alt="image-20220125102654418"></p><p>解决方案</p><p>（1） <strong>构建多级缓存架构：</strong>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p><p>（2） <strong>使用锁或队列</strong>：用<strong>加锁或者队列</strong>的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。<strong>不适用高并发情况</strong></p><p>（3）<strong>设置过期标志更新缓存</strong>：记录缓存数据是否过期（<strong>设置提前量</strong>），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p><p>（4)  <strong>将缓存失效时间分散开：</strong>如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的<strong>重复率</strong>就会降低，就很难引发集体失效的事件。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><h3 id="Redis操作"><a href="#Redis操作" class="headerlink" title="Redis操作"></a>Redis操作</h3><ul><li>使用set <key>  <value>  nx ex <time> 可以实现分布式锁，在设置时直接设置过期时间</li><li>直接使用setnx， <key> <value> 不设置时间会造成锁无法释放，也可以empire设置过期时间</li><li>del <key> 可以直接释放锁，就可以再次设置</li><li>具体操作:<ol><li>多个客户端同时获取锁（setnx）</li><li>获取成功，执行业务逻辑{从db获取数据，放入缓存}，执行完成释放锁（del）</li><li>其他客户端等待重试</li></ol></li></ul><h3 id="UUID防止误删"><a href="#UUID防止误删" class="headerlink" title="UUID防止误删"></a>UUID防止误删</h3><p>setnx设置锁时，设置一个唯一的值（UUID），释放前比较<strong>是否相等</strong>，从而将自己对应UUID的锁删除。</p><p><img src="/img/redis6.assets/image-20220125112210314.png" alt="image-20220125112210314"></p><h3 id="LUA保证删除原子性"><a href="#LUA保证删除原子性" class="headerlink" title="LUA保证删除原子性"></a>LUA保证删除原子性</h3><p>在A获取锁操作后，判断UUID相等后，准备执行删除，而此时服务器卡顿，还未成功执行删除，而锁设置的时间自动过期，此时B获得锁进行操作，而A现在却将锁释放，造成B还未操作完锁就被释放。这是使用UUID可能会造成没有原子性。</p><p>使用LUA脚本可以解决。</p><h3 id="分布式锁的使用注意"><a href="#分布式锁的使用注意" class="headerlink" title="分布式锁的使用注意"></a>分布式锁的使用注意</h3><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p><ul><li>互斥性。在任意时刻，只有一个客户端能持有锁。</li><li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li><li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li><li>加锁和解锁必须具有原子性。</li></ul><h1 id="Redis6新功能"><a href="#Redis6新功能" class="headerlink" title="Redis6新功能"></a>Redis6新功能</h1><h2 id="ACL（参考官网）"><a href="#ACL（参考官网）" class="headerlink" title="ACL（参考官网）"></a>ACL（<a href="https://redis.io/topics/acl">参考官网</a>）</h2><h3 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h3><p>edis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis 安全规则<strong>只有密码控制</strong> 还有通过<strong>rename</strong> 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p><p>（1）接入权限:用户名和密码 </p><p>（2）可以执行的命令 </p><p>（3）可以操作的 KEY</p><p><img src="/img/redis6.assets/image-20220125135021831.png" alt="image-20220125135021831"></p><h3 id="使用acl-cat命令"><a href="#使用acl-cat命令" class="headerlink" title="使用acl cat命令"></a>使用acl cat命令</h3><ul><li><p>查看添加权限指令类别</p><p><img src="/img/redis6.assets/image-20220125135315536.png" alt="image-20220125135315536"></p></li><li><p>加参数类型名可以查看类型下具体命令</p><p><img src="/img/redis6.assets/image-20220125135353795.png" alt="image-20220125135353795"></p></li><li><p>使用acl whoami命令查看当前用户</p></li><li><p>使用aclsetuser命令创建和编辑用户ACL</p></li></ul><h3 id="ACL规则"><a href="#ACL规则" class="headerlink" title="ACL规则"></a>ACL规则</h3><ul><li>下面是有效ACL规则的列表。某些规则只是用于激活或删除标志，或对用户ACL执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</li></ul><p><img src="/img/redis6.assets/image-20220125140001251.png" alt="image-20220125140001251"></p><ul><li>通过命令创建新用户默认权限</li></ul><p>acl setuser user1</p><p><img src="/img/redis6.assets/wps53F2.tmp.jpg" alt="img"> </p><p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p><ul><li>设置有用户名、密码、ACL权限、并启用的用户</li></ul><p>acl setuser user2 on &gt;password ~cached:* +get</p><p><img src="/img/redis6.assets/wps53F3.tmp.jpg" alt="img"> </p><ul><li> 切换用户，验证权限</li></ul><p><img src="/img/redis6.assets/wps53F4.tmp.jpg" alt="img"> </p><h2 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h2><h3 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h3><p>IO多线程其实<strong>指客户端交互部分的网络IO交互处理模块多线程</strong>，而非执行命令多线程。Redis6<strong>执行命令依然是单线程</strong>。</p><h3 id="原理架构"><a href="#原理架构" class="headerlink" title="原理架构"></a>原理架构</h3><p>Redis 6 加入多线程,但跟 Memcached 这种从 IO处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:</p><p><img src="/img/redis6.assets/wps53F5.tmp.jpg" alt="img"> </p><h3 id="开启IO多线程"><a href="#开启IO多线程" class="headerlink" title="开启IO多线程"></a>开启IO多线程</h3><p>另外，多线程IO默认也是不开启的，需要再配置文件中配置</p><p>io-threads-do-reads  yes </p><p>io-threads 4</p><p>工具支持 Cluster</p><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测。</p><p><img src="/img/redis6.assets/wps5406.tmp.jpg" alt="img"> </p><h2 id="Redis新功能持续关注"><a href="#Redis新功能持续关注" class="headerlink" title="Redis新功能持续关注"></a>Redis新功能持续关注</h2><p>Redis6新功能还有：</p><p>1、RESP3新的 Redis 通信协议：优化服务端与客户端之间通信</p><p>2、Client side caching客户端缓存：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。</p><p>3、Proxy集群代理模式：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用cluster的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多Key操作。</p><p>4、Modules API</p><p>Redis 6中模块API开发进展非常大，因为Redis Labs为了开发复杂的功能，从一开始就用上Redis模块。Redis可以变成一个框架，利用Modules来构建不同系统，而不需要从头开始写然后还要BSD许可。Redis一开始就是一个向编写各种系统开放的平台。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚筹网</title>
    <link href="/2022/02/01/%E5%B0%9A%E7%AD%B9%E7%BD%91/"/>
    <url>/2022/02/01/%E5%B0%9A%E7%AD%B9%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><h2 id="尚筹网项目介绍"><a href="#尚筹网项目介绍" class="headerlink" title="尚筹网项目介绍"></a>尚筹网项目介绍</h2><p>本项目视频为B站尚硅谷的尚筹网课程，为单一架构过渡到分布式架构的项目，使用Maven管理项目，<strong>后台使用SSM框架单一架构，前台使用Springboot和SpringCloud分布式架构</strong>（其中会使用SpringSecurity做权限控制，SpringSeesion等Spring家族的产品），数据存储使用mysql，redis数据库，页面显示部分后台页面使用<strong>jsp</strong>，前台页面使用<strong>html+Thymeleaf</strong>视图解析器。</p><h2 id="尚筹网项目构架"><a href="#尚筹网项目构架" class="headerlink" title="尚筹网项目构架"></a>尚筹网项目构架</h2><p><img src="/img/atcrowdfunding.assets/image-20220203131505582.png" alt="image-20220203131505582"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="总体目标"><a href="#总体目标" class="headerlink" title="总体目标"></a>总体目标</h2><p><img src="/img/atcrowdfunding.assets/project.png" alt="image-20220101150454662"></p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><ul><li>项目关系如下</li></ul><p><img src="/img/atcrowdfunding.assets/image-20220203131301256.png" alt="image-20220203131301256"></p><ul><li><p>工程创建计划</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><pre><code class="hljs java">atcrowdfunding01-admin-parent <br><br>groupId：com.atguigu.crowd <br><br>artifactId：atcrowdfunding01-admin-parent <br><br>packaging：pom<br><br><br><br>atcrowdfunding02-admin-webui <br><br>groupId：com.atguigu.crowd <br><br>artifactId：atcrowdfunding02-admin-webui <br><br>packaging：war<br><br><br><br>atcrowdfunding03-admin-component <br><br>groupId：com.atguigu.crowd <br><br>artifactId：atcrowdfunding03-admin-component <br><br>packaging：jar<br><br><br><br>atcrowdfunding04-admin-entity <br><br>groupId：com.atguigu.crowd<br><br>artifactId：atcrowdfunding04-admin-entity<br><br>packaging：jar <br><br><br><br>atcrowdfunding05-common-util<br><br>groupId：com.atguigu.crowd <br><br>artifactId：atcrowdfunding05-common-util <br><br>packaging：jar<br><br><br><br>atcrowdfunding06-common-reverse <br><br>groupId：com.atguigu.crowd <br><br>artifactId：atcrowdfunding06-common-reverse <br><br>packaging：jar<br></code></pre></td></tr></table></figure></li><li><p>建立工程之间的依赖关系</p><p>webui 依赖 component </p><p>component 依赖 entity </p><p>component 依赖 util</p><p>在IDEA模板pom中导入dependence依赖即可</p></li><li><p><img src="/img/atcrowdfunding.assets/image-20220107110616599.png" alt="image-20220107110616599"></p></li></ul><h2 id="创建数据库和数据库表"><a href="#创建数据库和数据库表" class="headerlink" title="创建数据库和数据库表"></a>创建数据库和数据库表</h2><ul><li><p>物理建模</p><ul><li>第一范式：数据库表中的每一列都不可再分，也就是原子性</li></ul><p><img src="/img/atcrowdfunding.assets/image-20220101160030116.png" alt="image-20220101160030116"></p><p>​                            这个表中“部门”和“岗位”应该拆分成两个字段：“部门名称”、“岗位”。</p><p><img src="/img/atcrowdfunding.assets/image-20220101160107255.png" alt="image-20220101160107255"></p><p>​                            这样才能够专门针对“部门”或“岗位”进行查询。</p><ul><li> 第二范式：在满足第一范式基础上要求每个字段都和主键完整相关，而不是仅和主键部分相关（主要针对联合主键而言）</li></ul><p>  <img src="/img/atcrowdfunding.assets/image-20220101160328142.png" alt="image-20220101160328142"></p><p>  “订单详情表”使用“订单编号”和“产品编号”作为联合主键。此时“产品价格”、“产品数量”都和联合主键整体相关，但“订单金额”和“下单时间” 只和联合主键中的“订单编号”相关，和“产品编号”无关。所以只关联了主键中的部分字段，不满足第二范式。</p><p>  把“订单金额”和“下单时间”移到订单表就符合第二范式了</p><p>  <img src="/img/atcrowdfunding.assets/image-20220101160420380.png" alt="image-20220101160420380"></p><ul><li><p>第三范式：表中的非主键字段和主键字段直接相关，不允许间接相关</p><p><img src="/img/atcrowdfunding.assets/image-20220101160448251.png" alt="image-20220101160448251"></p><p>上面表中的“部门名称”和“员工编号”的关系是“员工编号”→“部门编号”</p><p>→“部门名称”，不是直接相关。此时会带来下列问题：</p><ul><li><p>数据冗余：“部门名称”多次重复出现。</p></li><li><p>插入异常：组建一个新部门时没有员工信息，也就无法单独插入部门 信息。就算强行插入部门信息，员工表中没有员工信息的记录同样是 非法记录。</p></li><li><p> 删除异常：删除员工信息会连带删除部门信息导致部门信息意外丢失。</p></li><li><p>更新异常：哪怕只修改一个部门的名称也要更新多条员工记录。 正确的做法是：把上表拆分成两张表，以外键形式关联</p></li><li><p><img src="/img/atcrowdfunding.assets/image-20220101160539404.png" alt="image-20220101160539404"></p><p>“部门编号”和“员工编号”是直接相关的。</p><p>第二范式的另一种表述方式是：两张表要通过外键关联，不保存冗余字段。例 如：不能在“员工表”中存储“部门名称”</p></li></ul></li></ul></li></ul><h3 id="建表："><a href="#建表：" class="headerlink" title="建表："></a>建表：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE project_rowd <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8;<br><br>USE project_rowd;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> t_admin;# 如果存在t_admin则删除存在的表<br>    <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_admin (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> auto_increment,# 主键<br>    login_acct <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">255</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,# 登录账号<br>    user_pswd <span class="hljs-type">CHAR</span> ( <span class="hljs-number">32</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,# 登录密码<br>    user_name <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">255</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,# 昵称<br>    email <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">255</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,# 邮件地址<br>    create_time <span class="hljs-type">CHAR</span> ( <span class="hljs-number">19</span> ),# 创建时间<br>    <span class="hljs-keyword">PRIMARY</span> KEY ( id ) # 设置主键<br>);<br></code></pre></td></tr></table></figure><p> 进行基于Maven的逆向工程（根据已存在的表，在项目中逆向生成对应的实体类、Mapper文件、Mapper接口）</p><h3 id="在reverse模块中进行逆向："><a href="#在reverse模块中进行逆向：" class="headerlink" title="在reverse模块中进行逆向："></a>在reverse模块中进行逆向：</h3><h4 id="pom-xml中导入依赖"><a href="#pom-xml中导入依赖" class="headerlink" title="pom.xml中导入依赖"></a>pom.xml中导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中的相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 逆向工程核心依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--MySQL驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写generatorConfig-xml文"><a href="#编写generatorConfig-xml文" class="headerlink" title="编写generatorConfig.xml文"></a>编写generatorConfig.xml文</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;atguiguTables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span></span><br><span class="hljs-tag">                <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/project_crowd?serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span><br><span class="hljs-comment">            true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span><br><span class="hljs-comment">        也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;javaModelGenerator targetPackage=&quot;com.joey.mybaties.test.pojo&quot; targetProject=&quot;MAVEN&quot;&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;crowd.entity&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--是否让schema作为包的后缀--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 从数据库返回的值被清理前后的空格  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--对应的mapper.xml文件  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--是否让schema作为包的后缀--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 对应的Mapper接口类文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;org.fall.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--是否让schema作为包的后缀--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数据库表名与需要的实体类对应映射的指定 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_admin&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Admin&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 在IDEA中进行逆向工程的方法：</p><p><img src="/img/atcrowdfunding.assets/image-20220101163657740.png" alt="image-20220101163657740"></p><p>运行完后，应当对产生的所有文件各归各位（Mapper接口放入component的mapper包下；实体类放入entity模块的entity包；xxxMapper.xml放入webui的resources文件夹下<strong>（xml放在web模块下方便寻找）</strong>）</p><h2 id="通过父工程管理依赖版本"><a href="#通过父工程管理依赖版本" class="headerlink" title="通过父工程管理依赖版本"></a>通过父工程管理依赖版本</h2><p>在父工程通过<strong>dependencyManagement</strong>标签管理依赖版本，但是在子工程正式通过<strong>dependencies</strong>标签导入依赖前，这些依赖并不会生效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过properties标签指定一些需要重用的版本号，方便在后面调用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fall.spring.version</span>&gt;</span>4.3.20.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">fall.spring.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fall.spring.security.version</span>&gt;</span>4.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">fall.spring.security.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--依赖管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Spring 依赖 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Spring AOP --&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数据库依赖 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- MySQL 驱动 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- MyBatis 与 Spring 整合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- MyBatis 分页插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 其他日志框架的中间转换包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jul-to-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Spring 进行 JSON 数据转换依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- JSTL 标签库 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- junit 测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 引入 Servlet 容器中相关依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- JSP 页面使用的依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3-b06<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringSecurity 对 Web 应用进行权限管理 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.security.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringSecurity 配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.security.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringSecurity 标签库 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.security.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h2><p>思路:</p><p><img src="/img/atcrowdfunding.assets/image-20220101175446685.png" alt="image-20220101175446685"></p><h3 id="1、配置Maven依赖"><a href="#1、配置Maven依赖" class="headerlink" title="1、配置Maven依赖"></a>1、配置Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖entity--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>crowdfunding04-admin-entity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖util--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>crowdfunding05-common-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring 依赖 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring AOP --&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 数据库依赖 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL 驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MyBatis 与 Spring 整合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MyBatis 分页插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 进行 JSON 数据转换依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- JSTL 标签库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-创建配置文件"><a href="#2-创建配置文件" class="headerlink" title="2.创建配置文件"></a>2.创建配置文件</h3><ul><li><p>mybatis-config.xml 全局配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0/EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring与MyBatis整合后，MyBatis的配置文件可有可不有--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>jdbc.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">jdbc.user=root<br>jdbc.password=...<br>jdbc.Driver=com.mysql.cj.jdbc.Driver<br>jdbc.url=jdbc:mysql://localhost:3306/project_crowd?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8<br></code></pre></td></tr></table></figure></li><li><p>spring-persist-mybatis.xml 整合mybatis文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--扫描properties配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  数据源配置  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.Driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring-persist-mybatis.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        Connection connection = dataSource.getConnection();<br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以打印出connection的数据，而不是报空指针异常，得出结论：整合成功。</p><h4 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a>遇到的bug</h4><p>无法创建sqlsessionfactory，原因是在逆向工程生成后，mybatis文件进行了移动，导致mybatis文件中namespace，resultmap中全类名错误。</p><h2 id="日志系统整合"><a href="#日志系统整合" class="headerlink" title="日志系统整合"></a>日志系统整合</h2><h3 id="日志的意义"><a href="#日志的意义" class="headerlink" title="日志的意义"></a>日志的意义</h3><p>大量使用sysout不仅耗时，而且消耗人力，通过日志运行级别可以<strong>批量控制打印信息</strong>。</p><p><img src="/img/atcrowdfunding.assets/image-20220107111010489.png" alt="image-20220107111010489"></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><img src="/img/atcrowdfunding.assets/image-20220107111040685.png" alt="image-20220107111040685"></p><h3 id="不同日志系统的整合"><a href="#不同日志系统的整合" class="headerlink" title="不同日志系统的整合"></a>不同日志系统的整合</h3><p><img src="/img/atcrowdfunding.assets/image-20220107110907715.png" alt="image-20220107110907715"></p><h3 id="替换Spring自带的日志"><a href="#替换Spring自带的日志" class="headerlink" title="替换Spring自带的日志"></a>替换Spring自带的日志</h3><p>由于spring自带common-logging的日志包，使用 jcl-over-slf4j.jar来代替common-logging，做接口转换功能，在jcl-over-slf4j下可以实现slf4j-api.jar接口,进而使用logback</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在component中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 其他日志框架的中间转换包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jul-to-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><ul><li>DEBUG</li><li>INFO</li><li>WARN</li><li>ERROR</li></ul><p>等级 <strong>DEBUG &lt; INFO &lt; WARN &lt; ERROR</strong>  会打印和自己一样和比自己高的运行级别</p><p>使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logTest</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//获取Logger对象，这里传入的Class就是当前打印日志的类</span><br>    Logger logger = LoggerFactory.getLogger(CrowdTest.class);<br>    logger.debug(<span class="hljs-string">&quot;DEBUG!!!&quot;</span>);<br>    logger.info(<span class="hljs-string">&quot;INFO!!!&quot;</span>);<br>    logger.warn(<span class="hljs-string">&quot;WARN!!!&quot;</span>);<br>    logger.error(<span class="hljs-string">&quot;ERROR!!!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logback-xml实现自定义配置日志"><a href="#logback-xml实现自定义配置日志" class="headerlink" title="logback.xml实现自定义配置日志"></a>logback.xml实现自定义配置日志</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是： 时间、 日志级别、 线程名称、 打印日志的类、 日志主体</span><br><span class="hljs-comment">            内容、 换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%-8thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。 日志级别按顺序分别是： DEBUG、 INFO、 WARN、 ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的 appender， 这里通过&quot;STDOUT&quot;引用了前面配置的 appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.fall.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p>要么<strong>成功</strong>，要么<strong>失败</strong></p></li><li><p>特性:</p><ul><li>一致性</li><li>原子性</li><li>持久性</li><li>隔离性</li></ul></li><li><p>对应AOP中通知类型</p><p><img src="/img/atcrowdfunding.assets/image-20220107121553869.png" alt="image-20220107121553869"></p></li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>在框架下通过一系列配置使spring来管理事务操作</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>xml使用配置事务的流程:</p><p><img src="/img/atcrowdfunding.assets/image-20220107122909860.png" alt="image-20220107122909860"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>在component中创建service包</p><p><img src="/img/atcrowdfunding.assets/image-20220107160420447.png" alt="image-20220107160420447"></p></li><li><p>创建spring-persist-tx.xml文件单独进行事务配置</p><p>（注：基于xml事务配置中，事务属性method必须配置，如果某个方法没有配置对应的txmethod，事务对方法可能不生效）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--扫描service包，事务方法在service层--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.fall.service&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置AOP--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--切入点表达式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *..*ServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务通知和切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;txManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--name指定对应的方法名，read-only=&quot;true&quot;设置为只读，可以加快查询性能--&gt;</span><br>            <span class="hljs-comment">&lt;!--查询：通常设置为只读，便于性能优化--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;count*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--增删改：配置事务传播行为，回滚异常--&gt;</span><br>                <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                默认行为：REQUIRED，表示当前方法必须运行在事务中，如果没有事务，则开启事务，在自己的事务中运行。</span><br><span class="hljs-comment">                    如果已经有了已开启的事务，则在当前事务中运行。有可能和其他方法共用同一个事务</span><br><span class="hljs-comment">                建议设置：REQUIRES_NEW，表示当前方法必须运行在事务中，如果没有事务，则开启事务，在自己的事务中运行。</span><br><span class="hljs-comment">                    和 REQUIRED 的区别是就算现在已经有了已开启的事务，也一定要开启自己的事务，避免和其他方法共用同一个事务。</span><br><span class="hljs-comment">                --&gt;</span><br>            <span class="hljs-comment">&lt;!--rollback-for：表示触发什么异常时，进行回滚；默认值：运行时异常，建议设置为运行时异常+编译期异常--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:method</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:method</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remove*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:method</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>测试:</p><p>测试时，抛出异常，回滚不插入数据，则配置事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring-persist-mybatis.xml&quot;,&quot;classpath:spring-persist-tx.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AdminMapper adminMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AdminService adminService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">txTest</span><span class="hljs-params">()</span></span>&#123;<br>        Admin admin = <span class="hljs-keyword">new</span> Admin(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;lily&quot;</span>,<span class="hljs-string">&quot;321&quot;</span>,<span class="hljs-string">&quot;丽丽&quot;</span>,<span class="hljs-string">&quot;lily@qq.com&quot;</span>,<span class="hljs-keyword">null</span>);<br>        adminService.saveAdmin(admin);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Spring整合SpringMVC"><a href="#Spring整合SpringMVC" class="headerlink" title="Spring整合SpringMVC"></a>Spring整合SpringMVC</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ol><li>handler中装配Service</li><li>页面能够访问handler</li></ol><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>表述层配置文件关系</p><p><img src="/img/atcrowdfunding.assets/image-20220107163121737.png" alt="image-20220107163121737"></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><h4 id="web-xml具体配置"><a href="#web-xml具体配置" class="headerlink" title="web.xml具体配置"></a>web.xml具体配置</h4><ul><li><p>在web.xml中配置ContextLoaderListener</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置监听加载文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-persist-*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-comment">&lt;!--ContextLoaderListener加入容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在web.xml中配置filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置字符集过滤器,解决乱码 --&gt;</span><br><span class="hljs-comment">&lt;!--必须作为第一个filter进行配置，才能生效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--强制请求进行编码--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--强制响应进行编码--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置过滤器的过滤路径，/*全部路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在web.xml中配置前端控制器DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--配置前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SpringMVC的配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-web-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Servlet默认的生命周期中，会在第一次请求时创建对象</span><br><span class="hljs-comment">        而DispatcherServlet创建对象时，有大量的初始化工作，不适合在第一次请求时创建</span><br><span class="hljs-comment">        设置load-on-startup使其在web应用启动时进行创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--配置映射路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  url-pattern配置方式一:/表示所有拦截  --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;url-pattern&gt;/&lt;/url-pattern&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  url-pattern配置方式二:配置请求扩展名  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  优点:</span><br><span class="hljs-comment">                1.静态资源不通过SpringMVC，不需要特殊处理</span><br><span class="hljs-comment">                2.实现伪静态效果</span><br><span class="hljs-comment">                  (1)给黑客入侵增加难度</span><br><span class="hljs-comment">                   (2)有利于SEO优化</span><br><span class="hljs-comment">           缺点：不符合RESTFul风格--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--如果一个Ajax请求扩展名时是html，但实际返回json数据，与实际不匹配，会报406错误</span><br><span class="hljs-comment">        为了让Ajax顺利拿到json数据，配置json扩展名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.json<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="SpringMVC配置文件具体配置"><a href="#SpringMVC配置文件具体配置" class="headerlink" title="SpringMVC配置文件具体配置"></a>SpringMVC配置文件具体配置</h4><ul><li><p>```xml</p><?xml version="1.0" encoding="UTF-8"?><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;">http://www.springframework.org/schema/beans&quot;</a></p><div class="code-wrapper"><pre><code class="hljs">               xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;               xmlns:context=&quot;http://www.springframework.org/schema/context&quot;               xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;               xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;        &lt;!--自动扫描包，扫描handler--&gt;        &lt;context:component-scan base-package=&quot;org.fall.mvc&quot;&gt;&lt;/context:component-scan&gt;        &lt;!--配置SpringMVC驱动注解--&gt;        &lt;mvc:annotation-driven/&gt;        &lt;!--配置视图解析器--&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;            &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;        &lt;/bean&gt;</code></pre></div></beans><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"></span><br><span class="xml">#### 测试</span><br><span class="xml"></span><br><span class="xml">- index.jsp</span><br><span class="xml"></span><br><span class="xml">  ```xml</span><br><span class="xml">  &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">      &lt;%--</span><br><span class="xml">          base 标签必须写在 head 标签内部</span><br><span class="xml">          base 标签必须在所有“带具体路径”的标签的前面</span><br><span class="xml">          serverName 部分 EL 表达式和 serverPort 部分 EL 表达式之间必须写“:”</span><br><span class="xml">          serverPort 部分 EL 表达式和 contextPath 部分 EL 表达式之间绝对不能写“/”</span><br><span class="xml">          原因：contextPath 部分 EL 表达式本身就是“/”开头</span><br><span class="xml">          如果多写一个“/”会干扰 Cookie 的工作机制</span><br><span class="xml">          serverPort 部分 EL 表达式后面必须写“/”</span><br><span class="xml">      --%&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://$</span></span></span><span class="hljs-template-variable">&#123;pageContext.request.serverName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">:$</span></span></span><span class="hljs-template-variable">&#123;pageContext.request.serverPort&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">$</span></span></span><span class="hljs-template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;test/ssm.html&quot;</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AdminService adminService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test/ssm.html&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testSSM</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        List&lt;Admin&gt; admins = adminService.getAll();<br>        model.addAttribute(<span class="hljs-string">&quot;admins&quot;</span>, admins);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="AJAX请求"><a href="#AJAX请求" class="headerlink" title="AJAX请求"></a>AJAX请求</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p><img src="/img/atcrowdfunding.assets/image-20220107225628686.png" alt="image-20220107225628686"></p><p>@RequestBody和@RespondBody要生效需要jackson依赖，确定是否导入依赖，同时配置mvc:annotation-driven。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring 进行 JSON 数据转换依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="导入jquery"><a href="#导入jquery" class="headerlink" title="导入jquery"></a>导入jquery</h3><p><img src="/img/atcrowdfunding.assets/image-20220108160359994.png" alt="image-20220108160359994"></p><p>导入后记得刷新项目</p><h3 id="Ajax测试"><a href="#Ajax测试" class="headerlink" title="Ajax测试"></a>Ajax测试</h3><p>jsp页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs jsp">    &lt;script src=<span class="hljs-string">&quot;jquery/jquery-2.1.1.min.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br><br>            <span class="hljs-comment">//btn1</span><br>            <span class="hljs-comment">//此方式可以在浏览器看到发送的请求体是Form Data(表单数据)</span><br>            $(<span class="hljs-string">&quot;#btn1&quot;</span>).click(function () &#123;<br>                $.ajax(&#123;<br>                    url: <span class="hljs-string">&quot;send/array/one.html&quot;</span>,         <span class="hljs-comment">//请求目标资源地址</span><br>                    type: <span class="hljs-string">&quot;post&quot;</span>,                       <span class="hljs-comment">//请求方式</span><br>                    data: &#123;<br>                        array: [<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>]<br>                    &#125;,                     <span class="hljs-comment">//发送的请求参数</span><br>                    dataType: <span class="hljs-string">&quot;text&quot;</span>,                   <span class="hljs-comment">//表示如何对待服务器返回的数据</span><br>                    success: function (response) &#123;<br>                        alert(response);<br>                    &#125;,<br>                    error: function (response) &#123;<br>                        alert(response);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br><br>            <span class="hljs-comment">//btn2</span><br>            <span class="hljs-comment">//此方式可以在浏览器看到发送的请求体是Request Payload(请求负载)</span><br>            $(<span class="hljs-string">&quot;#btn2&quot;</span>).click(function () &#123;<br>                <span class="hljs-comment">//准备要发送的数据</span><br>                <span class="hljs-keyword">var</span> array=[<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>];<br>                <span class="hljs-comment">//必须先将目标转换成JSON字符串</span><br>                <span class="hljs-keyword">var</span> arrayStr = JSON.stringify(array);<br>                $.ajax(&#123;<br>                    url: <span class="hljs-string">&quot;send/array/two.html&quot;</span>,<br>                    type: <span class="hljs-string">&quot;post&quot;</span>,<br>                    data: arrayStr,<br>                    dataType: <span class="hljs-string">&quot;text&quot;</span>,<br>                    contentType: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,  <span class="hljs-comment">//告诉服务器端当前请求的请求体是JSON格式</span><br>                    success: function (response) &#123;<br>                        alert(response);<br>                    &#125;,<br>                    error: function (response) &#123;<br>                        alert(response);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br><br>            <span class="hljs-comment">//btn3</span><br>            <span class="hljs-comment">//传输复杂对象</span><br>            $(<span class="hljs-string">&quot;#btn3&quot;</span>).click(function () &#123;<br>                <span class="hljs-keyword">var</span> student = &#123;<br>                    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Fall&quot;</span>,<br>                    <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">21</span>,<br>                    <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;province&quot;</span>:<span class="hljs-string">&quot;浙江&quot;</span>,<br>                        <span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;宁波&quot;</span><br>                    &#125;,<br>                    <span class="hljs-string">&quot;subjects&quot;</span>:[<br>                        &#123;<br>                            <span class="hljs-string">&quot;subjectName&quot;</span>:<span class="hljs-string">&quot;Java&quot;</span>,<br>                            <span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">96</span><br>                        &#125;,<br>                        &#123;<br>                            <span class="hljs-string">&quot;subjectName&quot;</span>:<span class="hljs-string">&quot;Data Struct&quot;</span>,<br>                            <span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">93</span><br>                        &#125;<br>                    ],<br>                    <span class="hljs-string">&quot;map&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-string">&quot;value1&quot;</span>,<br>                        <span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;value2&quot;</span><br>                    &#125;<br>                &#125;;   <span class="hljs-comment">//student end</span><br>                <span class="hljs-keyword">var</span> studentStr = JSON.stringify(student);<br>                $.ajax(&#123;<br>                    url: <span class="hljs-string">&quot;send/compose/object.html&quot;</span>,<br>                    type: <span class="hljs-string">&quot;post&quot;</span>,<br>                    data: studentStr,<br>                    dataType: <span class="hljs-string">&quot;text&quot;</span>,<br>                    contentType: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>                    success: function (response) &#123;<br>                        alert(response);            <span class="hljs-comment">//在浏览器控制台打印返回的信息</span><br>                    &#125;,<br>                    error: function (response) &#123;<br>                        alert(response);<br>                    &#125;<br>                &#125;);<br><br>            &#125;);<br><br>            <span class="hljs-comment">//btn4</span><br>            <span class="hljs-comment">//使用ResultEntity，统一返回的格式</span><br>            $(<span class="hljs-string">&quot;#btn4&quot;</span>).click(function () &#123;<br>                <span class="hljs-keyword">var</span> student = &#123;<br>                    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Fall&quot;</span>,<br>                    <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">21</span>,<br>                    <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;province&quot;</span>:<span class="hljs-string">&quot;浙江&quot;</span>,<br>                        <span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;宁波&quot;</span><br>                    &#125;,<br>                    <span class="hljs-string">&quot;subjects&quot;</span>:[<br>                        &#123;<br>                            <span class="hljs-string">&quot;subjectName&quot;</span>:<span class="hljs-string">&quot;Java&quot;</span>,<br>                            <span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">96</span><br>                        &#125;,<br>                        &#123;<br>                            <span class="hljs-string">&quot;subjectName&quot;</span>:<span class="hljs-string">&quot;Data Struct&quot;</span>,<br>                            <span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">93</span><br>                        &#125;<br>                    ],<br>                    <span class="hljs-string">&quot;map&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-string">&quot;value1&quot;</span>,<br>                        <span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;value2&quot;</span><br>                    &#125;<br>                &#125;;<br>                <span class="hljs-keyword">var</span> studentStr = JSON.stringify(student);<br>                $.ajax(&#123;<br>                    url: <span class="hljs-string">&quot;send/compose/object.json&quot;</span>,    <span class="hljs-comment">//此时是json，表示返回的数据是json格式的</span><br>                    type: <span class="hljs-string">&quot;post&quot;</span>,<br>                    data: studentStr,<br>                    dataType: <span class="hljs-string">&quot;json&quot;</span>,                   <span class="hljs-comment">//此时服务端返回的数据是json格式</span><br>                    contentType: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>                    success: function (response) &#123;<br>                        console.log(response);       <span class="hljs-comment">//在浏览器控制台打印返回的信息</span><br>                    &#125;,<br>                    error: function (response) &#123;<br>                        console.log(response);<br>                    &#125;<br>                &#125;);<br><br>            &#125;);<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;h2&gt;Hello World!&lt;/h2&gt;<br>&lt;a href=<span class="hljs-string">&quot;test/ssm.html&quot;</span>&gt;测试页面&lt;/a&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>&lt;button id=<span class="hljs-string">&quot;btn1&quot;</span>&gt;Test Ajax One&lt;/button&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>&lt;button id=<span class="hljs-string">&quot;btn2&quot;</span>&gt;Test Ajax Two&lt;/button&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>&lt;button id=<span class="hljs-string">&quot;btn3&quot;</span>&gt;Test Compose Object&lt;/button&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>&lt;button id=<span class="hljs-string">&quot;btn4&quot;</span>&gt;Test ResultEntity&lt;/button&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/send/array/one.html&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAjaxOne</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;array[]&quot;)</span>List&lt;Integer&gt; array)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (Integer integer : array) &#123;<br>        System.out.println(integer);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//@RequestBody来获取请求体中的json数据</span><br><span class="hljs-meta">@RequestMapping(&quot;/send/array/two.html&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAjaxTwo</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Integer[] array)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (Integer integer : array) &#123;<br>        System.out.println(integer);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//@RequestBody来获取请求体中的复杂数据</span><br><span class="hljs-meta">@RequestMapping(&quot;send/compose/object.html&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAjaxObject</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span></span>&#123;<br>    System.out.println(student.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//测试ResultEntity</span><br><span class="hljs-meta">@RequestMapping(&quot;send/compose/object.json&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;Student&gt; <span class="hljs-title">testAjaxResultEntity</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span></span>&#123;<br>    <span class="hljs-comment">//将查询到的数据通过ResultEntity返回</span><br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData(student);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="统一返回ResultEntity实体类"><a href="#统一返回ResultEntity实体类" class="headerlink" title="统一返回ResultEntity实体类"></a>统一返回ResultEntity实体类</h3><p>在util工程下创建ResultEntity实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fall;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultEntity</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//设置两个常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SUCCESS = <span class="hljs-string">&quot;SUCCESS&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FAILED = <span class="hljs-string">&quot;FAILED&quot;</span>;<br><br>    <span class="hljs-comment">//请求错误时，返回的错误信息，对应SUCCESS与FAILED</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-comment">//要返回的数据</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-comment">//封装当前请求的处理结果是成功还是失败</span><br>    <span class="hljs-keyword">private</span> String result;<br><br>    <span class="hljs-comment">//请求处理成功并且不向前端返回数据时，使用的静态方法</span><br>    <span class="hljs-comment">//第一个&lt;Type&gt;表示声明一个泛型Type，第二个和return中的&lt;Type&gt;表示使用该泛型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Type&gt; <span class="hljs-function">ResultEntity&lt;Type&gt; <span class="hljs-title">successWithoutData</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultEntity&lt;Type&gt;(<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,SUCCESS);<br>    &#125;<br><br>    <span class="hljs-comment">//请求处理成功并且向前端返回数据时，使用的静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Type&gt; <span class="hljs-function">ResultEntity&lt;Type&gt; <span class="hljs-title">successWithData</span><span class="hljs-params">(Type data)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultEntity&lt;Type&gt;(<span class="hljs-keyword">null</span>,data,SUCCESS);<br>    &#125;<br><br>    <span class="hljs-comment">//请求处理失败，需要返回错误信息时，使用的静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Type&gt; <span class="hljs-function">ResultEntity&lt;Type&gt; <span class="hljs-title">failed</span><span class="hljs-params">(String message)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultEntity&lt;&gt;(message,<span class="hljs-keyword">null</span>,FAILED);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResultEntity</span><span class="hljs-params">(String message, T data, String result)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.result = result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResultEntity</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getSUCCESS</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> SUCCESS;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getFAILED</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> FAILED;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResult</span><span class="hljs-params">(String result)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.result = result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>使用异常映射机制将整个项目的异常和错误进行统一管理</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li>异常映射机制</li></ul><p><img src="/img/atcrowdfunding.assets/image-20220108161755218.png" alt="image-20220108161755218"></p><ul><li><p>SpringMVC提供了基于xml和基于注解的两种异常映射机制</p><p><img src="/img/atcrowdfunding.assets/image-20220108161917266.png" alt="image-20220108161917266"></p></li></ul><h3 id="基于xml的异常映射"><a href="#基于xml的异常映射" class="headerlink" title="基于xml的异常映射"></a>基于xml的异常映射</h3><p>在spring-web-mvc中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  基于xml的异常配置  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simpleMappingExceptionResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   配置异常视图和具体页面的对应关系     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--  key属性指定异常的全类名，标签中写具体对应的视图(这个值要拼前后缀得到的路径)    --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span>&gt;</span>system-error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="判断请求类型的工具方法"><a href="#判断请求类型的工具方法" class="headerlink" title="判断请求类型的工具方法"></a>判断请求类型的工具方法</h3><p>在utils工程下创建CrowdUtils工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用来判断请求类型的工具(true表示json请求，false表示普通请求)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdUtils</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judgeRequestType</span><span class="hljs-params">(HttpServletRequest httpServletRequest)</span></span>&#123;<br>        <span class="hljs-comment">//获取请求的信息头</span><br>        String acceptHeader=httpServletRequest.getHeader(<span class="hljs-string">&quot;Accept&quot;</span>);<br>        String xRequestHeader=httpServletRequest.getHeader(<span class="hljs-string">&quot;X-Requested-With&quot;</span>);<br>        <span class="hljs-comment">//判断是否为json请求</span><br>        <span class="hljs-keyword">if</span> ((acceptHeader!=<span class="hljs-keyword">null</span>&amp;&amp;acceptHeader.contains(<span class="hljs-string">&quot;application/json&quot;</span>)) ||<br>                (xRequestHeader!=<span class="hljs-keyword">null</span>&amp;&amp;acceptHeader.equals(<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>)))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于注解的异常映射"><a href="#基于注解的异常映射" class="headerlink" title="基于注解的异常映射"></a>基于注解的异常映射</h3><ul><li><p>创建处理异常的CrowUtils工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span>   <span class="hljs-comment">//表示一个基于注解的异常类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdExceptionResolver</span> </span>&#123;<br><br>    <span class="hljs-comment">//处理空指针异常</span><br>    <span class="hljs-meta">@ExceptionHandler(value = &#123;NullPointerException.class&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">nullPointExceptionResolver</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            //实际捕获到的类型</span></span><br><span class="hljs-params"><span class="hljs-function">            NullPointerException nullPointerException,</span></span><br><span class="hljs-params"><span class="hljs-function">            //当前请求对象</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">            //当前响应对象</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpServletResponse response</span></span><br><span class="hljs-params"><span class="hljs-function">            //指定普通页时去的错误页面</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String viewName=<span class="hljs-string">&quot;system-error&quot;</span>;<br>        <span class="hljs-keyword">return</span> conmonResolver(nullPointerException,request,response,viewName);<br>    &#125;<br><br>    <span class="hljs-comment">//处理数学异常</span><br>    <span class="hljs-meta">@ExceptionHandler(value = &#123;ArithmeticException.class&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">resolveArithmeticException</span><span class="hljs-params">(ArithmeticException arithmeticException,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                   HttpServletRequest request,HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String viewName=<span class="hljs-string">&quot;system-error&quot;</span>;<br>        <span class="hljs-keyword">return</span> conmonResolver(arithmeticException,request,response,viewName);<br>    &#125;<br><br>    <span class="hljs-comment">//抽取出公共部分代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ModelAndView <span class="hljs-title">conmonResolver</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            //实际捕获到的类型,使用了泛型的特性</span></span><br><span class="hljs-params"><span class="hljs-function">            Exception exception,</span></span><br><span class="hljs-params"><span class="hljs-function">            //当前请求对象</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">            //当前响应对象</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">            //指定普通页时去的错误页面</span></span><br><span class="hljs-params"><span class="hljs-function">            String viewName</span></span><br><span class="hljs-params"><span class="hljs-function">        )</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>            <span class="hljs-comment">//判断当前的类型请求</span><br>        <span class="hljs-keyword">boolean</span> judgeRequestType = CrowdUtils.judgeRequestType(request);<br>        <span class="hljs-comment">//是json请求则执行</span><br>        <span class="hljs-keyword">if</span>(judgeRequestType)&#123;<br>            <span class="hljs-comment">//创建返回异常的实体类</span><br>            ResultEntity&lt;Object&gt; failed=ResultEntity.failed(exception.getMessage());<br>            <span class="hljs-comment">//创建gson对象进行json转换</span><br>            Gson gson = <span class="hljs-keyword">new</span> Gson();<br>            <span class="hljs-comment">//转换为json字符串</span><br>            String json=gson.toJson(failed);<br>            <span class="hljs-comment">//通过原生的servlet返回</span><br>            response.getWriter().write(json);<br>            <span class="hljs-comment">//由于ResultEntity已经由respond返回，不用返回ModelAndView</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//是普通请求则执行</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//创建ModelAndView对象</span><br>            ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>            <span class="hljs-comment">//设置出发跳转的页面</span><br>            modelAndView.setViewName(viewName);<br>            <span class="hljs-comment">//将异常信息植入</span><br>            modelAndView.addObject(CrowdConstant.ATTR_NAME_EXCEPTION,exception);<br>            <span class="hljs-comment">//返回ModelAndView</span><br>            <span class="hljs-keyword">return</span> modelAndView;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建常量类CrowdConstant</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 常量类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdConstant</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ATTR_NAME_EXCEPTION = <span class="hljs-string">&quot;exception&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MESSAGE_LOGIN_FAILED = <span class="hljs-string">&quot;抱歉！登录失败！请确认账号密码是否正确&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MESSAGE_LOGIN_ACCT_ALREADY_IN_USE = <span class="hljs-string">&quot;抱歉！账号已经被人使用过了&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MESSAGE_ACCESS_FORBIDEN = <span class="hljs-string">&quot;请登录后在访问&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="修饰异常页面"><a href="#修饰异常页面" class="headerlink" title="修饰异常页面"></a>修饰异常页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keys&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;bootstrap/css/bootstrap.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/font-awesome.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/login.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery/jquery-2.1.1.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;button&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">window</span>.history.back();</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:32px;&quot;</span>&gt;</span>尚筹网-创意产品众筹平台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>请求出现了错误QAQ<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>错误消息：$&#123;requestScope.exception.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:150px;margin: 0 auto;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span>&gt;</span>返回上一步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="管理员登录页"><a href="#管理员登录页" class="headerlink" title="管理员登录页"></a>管理员登录页</h2><p>引入静态资源,放入webapp下</p><p><img src="/img/atcrowdfunding.assets/image-20220109004852629.png" alt="image-20220109004852629"></p><p>创建admin-login.jsp页面,修改表单，添加base标签(注意放在引入css，js<strong>前面</strong>)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;admin/do/login.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-signin&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span>&gt;<br>    &lt;h2 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-signin-heading&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-log-in&quot;</span>&gt;&lt;/i&gt; 管理员登录&lt;/h2&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;loginAcct&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;inputSuccess4&quot;</span> placeholder=<span class="hljs-string">&quot;请输入登录账号&quot;</span> autofocus&gt;<br>        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-user form-control-feedback&quot;</span>&gt;&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;loginPswd&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;inputSuccess4&quot;</span> placeholder=<span class="hljs-string">&quot;请输入登录密码&quot;</span> style=<span class="hljs-string">&quot;margin-top:10px;&quot;</span>&gt;<br>        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-lock form-control-feedback&quot;</span>&gt;&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span> href=<span class="hljs-string">&quot;main.html&quot;</span>&gt;登录&lt;/button&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>配置视图控制器，进行页面跳转</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置视图控制器，代替@RequestMapping  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/to/login/page.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;admin-login&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用Layer弹框组件"><a href="#使用Layer弹框组件" class="headerlink" title="使用Layer弹框组件"></a>使用Layer弹框组件</h2><p>引入Layer文件，并在页面引入js(注意在jquery后面引入)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script src=<span class="hljs-string">&quot;layer/layer.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h1><h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>识别登陆者身份，控制他行为，赋予他权限。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220109143549363.png" alt="image-20220109143549363"></p><h3 id="创建MD5加密工具方法"><a href="#创建MD5加密工具方法" class="headerlink" title="创建MD5加密工具方法"></a>创建MD5加密工具方法</h3><p>在CrowdUtils类加入静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对明文字符进行MD5加密</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> source 传入明文字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">md5</span><span class="hljs-params">(String source)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.判断source是否有效</span><br>    <span class="hljs-keyword">if</span> (source == <span class="hljs-keyword">null</span> || source.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 2.如果不是有效字符抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(CrowdConstant.MESSAGE_STRING_INVALIDATE);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 3.获取MessageDigest对象</span><br>        String algorithm = <span class="hljs-string">&quot;md5&quot;</span>;<br>        MessageDigest messageDigest = MessageDigest.getInstance(algorithm);<br>        <span class="hljs-comment">// 4.获取字符串解析数组</span><br>        <span class="hljs-keyword">byte</span>[] input = source.getBytes();<br>        <span class="hljs-comment">// 5.执行加密</span><br>        <span class="hljs-keyword">byte</span>[] output = messageDigest.digest(input);<br>        <span class="hljs-comment">// 6.创建BigInteger对象</span><br>        <span class="hljs-keyword">int</span> signum = <span class="hljs-number">1</span>;<br>        BigInteger bigInteger = <span class="hljs-keyword">new</span> BigInteger(signum, output);<br>        <span class="hljs-comment">// 7.按照16进制将值转化为字符串</span><br>        <span class="hljs-keyword">int</span> radix = <span class="hljs-number">16</span>;<br>        String encoded = bigInteger.toString(radix).toUpperCase();<br>        <span class="hljs-comment">// 8.返回加密字符串</span><br>        <span class="hljs-keyword">return</span> encoded;<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义登录失败异常类"><a href="#自定义登录失败异常类" class="headerlink" title="自定义登录失败异常类"></a>自定义登录失败异常类</h3><ul><li><p>在exception包下创建LoginFailedException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fall.exception;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录失败的异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginFailedException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginFailedException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginFailedException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginFailedException</span><span class="hljs-params">(String message, Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginFailedException</span><span class="hljs-params">(Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginFailedException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-keyword">boolean</span> enableSuppression, <span class="hljs-keyword">boolean</span> writableStackTrace)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//处理登录失败异常</span><br><span class="hljs-meta">@ExceptionHandler(value = &#123;LoginFailedException.class&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">nullLoginFailedExceptionResolver</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        //实际捕获到的类型</span></span><br><span class="hljs-params"><span class="hljs-function">        NullPointerException nullPointerException,</span></span><br><span class="hljs-params"><span class="hljs-function">        //当前请求对象</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">        //当前响应对象</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletResponse response</span></span><br><span class="hljs-params"><span class="hljs-function">        //指定普通页时去的错误页面</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    String viewName=<span class="hljs-string">&quot;system-error&quot;</span>;<br>    <span class="hljs-keyword">return</span> conmonResolver(nullPointerException,request,response,viewName);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将错误信息显示到admin-login.jsp页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-log-in&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 管理员登录<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;requestScope.exception.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="创建控制管理员登录的Handler方法"><a href="#创建控制管理员登录的Handler方法" class="headerlink" title="创建控制管理员登录的Handler方法"></a>创建控制管理员登录的Handler方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AdminService adminService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/admin/do/login.html&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLogin</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;loginAcct&quot;)</span> String loginAcct,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;loginPswd&quot;)</span> String loginPswd,</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpSession session</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span> </span>&#123;<br>        <span class="hljs-comment">// 调用Service方法检查登录</span><br>        <span class="hljs-comment">// 这个方法如果返回Admin对象则登录成功，如果账号密码不正确则抛出异常</span><br>        Admin admin = adminService.getAdminByLoginAcct(loginAcct, loginPswd);<br>        <span class="hljs-comment">// 将登录成功返回的对象存入session域中</span><br>        session.setAttribute(CrowdConstant.ATTR_NAME_LOGIN_ADMIN, admin);<br>        <span class="hljs-comment">// 返回主页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin-main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Service层实现业务逻辑"><a href="#Service层实现业务逻辑" class="headerlink" title="Service层实现业务逻辑"></a>Service层实现业务逻辑</h3><p>获取管理员的登录信息方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Admin <span class="hljs-title">getAdminByLoginAcct</span><span class="hljs-params">(String loginAcct, String loginPswd)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.根据登录账号查询Admin对象</span><br>    <span class="hljs-comment">// 创建Example对象</span><br>    AdminExample adminExample = <span class="hljs-keyword">new</span> AdminExample();<br>    <span class="hljs-comment">// 创建Criteria对象</span><br>    AdminExample.Criteria criteria = adminExample.createCriteria();<br>    <span class="hljs-comment">// 封装查找的条件</span><br>    criteria.andLoginAcctEqualTo(loginAcct);<br>    <span class="hljs-comment">// 调用adminMapper进行查找</span><br>    List&lt;Admin&gt; admins = adminMapper.selectByExample(adminExample);<br>    <span class="hljs-comment">// 2.判断Admin是否为空</span><br>    <span class="hljs-keyword">if</span> (admins == <span class="hljs-keyword">null</span> &amp;&amp; admins.size() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 3.Admin对象为空则抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginFailedException(CrowdConstant.MESSAGE_LOGIN_FAILED);<br>    &#125;<br>    <span class="hljs-comment">// 是否出现多条数据</span><br>    <span class="hljs-keyword">if</span> (admins.size() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginFailedException(CrowdConstant.MESSAGE_SYSTEM_ERROR_LOGIN_NOT_UNIQUE);<br>    &#125;<br>    <span class="hljs-comment">// 4.Admin对象不为空则取出Admin对象</span><br>    Admin admin = admins.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 5.为空抛出异常，不为空取出密码</span><br>    <span class="hljs-keyword">if</span> (admin == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginFailedException(CrowdConstant.MESSAGE_LOGIN_FAILED);<br>    &#125;<br>    String userPswdDb = admin.getUserPswd();<br>    <span class="hljs-comment">// 5.将表单提交的数据进行明文加密</span><br>    String userPswdForm = CrowdUtils.md5(loginPswd);<br>    <span class="hljs-comment">// 6.对密码进行比较</span><br>    <span class="hljs-keyword">if</span> (!Objects.equals(userPswdDb, userPswdForm)) &#123;<br>        <span class="hljs-comment">// 7.不相等抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginFailedException(CrowdConstant.MESSAGE_LOGIN_FAILED);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 8.相等则返回Admin对象</span><br>        <span class="hljs-keyword">return</span> admin;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重定向主页面"><a href="#重定向主页面" class="headerlink" title="重定向主页面"></a>重定向主页面</h3><ul><li><p>将admin-main.html页面导入后，修改base标签，和用户名</p></li><li><p>doLogin重定向主页面，防止表单重复提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回主页面</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/to/main/page.html&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>配置视图控制器，重新响应页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/to/main/page.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;admin-main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><ul><li><p>修改超链接地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;admin/do/logout.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-off&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 退出系统<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Handler中doLogout方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/admin/do/logout.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLogout</span><span class="hljs-params">(HttpSession session)</span></span>&#123;<br>    <span class="hljs-comment">// 强制session失败</span><br>    session.invalidate();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/to/login/page.html&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="抽取主页面的公共部分"><a href="#抽取主页面的公共部分" class="headerlink" title="抽取主页面的公共部分"></a>抽取主页面的公共部分</h3><ul><li><p>抽取为后，需要引入jsp文件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/WEB-INF/include-head.jsp&quot;</span> %&gt;<br>&lt;body&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/WEB-INF/include-nav.jsp&quot;</span> %&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/WEB-INF/include-sidebar.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure></li><li><p>setting-&gt;Editor-&gt;File an Code Templates中创建模板方便下次使用</p></li></ul><h2 id="登录检查"><a href="#登录检查" class="headerlink" title="登录检查"></a>登录检查</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>将部分资源保护起来，让没有登录的用户不能访问</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220111164707521.png" alt="image-20220111164707521"></p><h3 id="创建拦截器类"><a href="#创建拦截器类" class="headerlink" title="创建拦截器类"></a>创建拦截器类</h3><p>拦截器只需重写preHandle使其继承HandlerInterceptorAdapter即可，在拦截器拦截后，抛出异常来处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 1.通过request对象获取session域</span><br>        HttpSession session = httpServletRequest.getSession();<br>        <span class="hljs-comment">// 2.获取session中的Admin对象</span><br>        Admin admin = (Admin) session.getAttribute(CrowdConstant.ATTR_NAME_LOGIN_ADMIN);<br>        <span class="hljs-comment">// 3.admin为空抛出异常</span><br>        <span class="hljs-keyword">if</span> (admin == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AccessForbiddenException(CrowdConstant.MESSAGE_ACCESS_FORBIDEN);<br>        &#125;<br>        <span class="hljs-comment">// 4.不为空则放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义拒绝访问异常类"><a href="#自定义拒绝访问异常类" class="headerlink" title="自定义拒绝访问异常类"></a>自定义拒绝访问异常类</h3><p>处理拦截器抛出的异常，使其返回到登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessForbiddenException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccessForbiddenException</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccessForbiddenException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccessForbiddenException</span><span class="hljs-params">(String message, Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccessForbiddenException</span><span class="hljs-params">(Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AccessForbiddenException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-keyword">boolean</span> enableSuppression, <span class="hljs-keyword">boolean</span> writableStackTrace)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>拦截器拦截登录页面，退出，登录请求以外的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置将要拦截的资源路径:--&gt;</span><br>        <span class="hljs-comment">&lt;!-- /** 表示多层路径 /aaa/bbb--&gt;</span><br>        <span class="hljs-comment">&lt;!-- /* 表示一层路径 /aaa--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置不拦截的请求--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/to/login/page.html&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/do/login.html&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/do/logout.html&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截器类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.fall.mvc.interceptor.LoginInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置异常类的映射路径"><a href="#配置异常类的映射路径" class="headerlink" title="配置异常类的映射路径"></a>配置异常类的映射路径</h3><p>触发异常则返回登陆页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simpleMappingExceptionResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   配置异常视图和具体页面的对应关系     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- key属性指定异常的全类名，标签中写具体对应的视图(这个值要拼前后缀得到的路径)    --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span>&gt;</span>system-error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 通过xml配置拒绝访问异常映射，跳转登陆页面--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;AccessForbiddenException&quot;</span>&gt;</span>admin-login<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="管理员维护"><a href="#管理员维护" class="headerlink" title="管理员维护"></a>管理员维护</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><h4 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h4><p>将数据库的Admin数据在页面上已分页的形式显示，在后端将“带关键字”和“不带关键字”的分页合并为同一套代码。</p><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220113192952927.png" alt="image-20220113192952927"></p><h4 id="导入pagehelper依赖"><a href="#导入pagehelper依赖" class="headerlink" title="导入pagehelper依赖"></a>导入pagehelper依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyBatis 分页插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在mybatis配置文件中配置分页插件"><a href="#在mybatis配置文件中配置分页插件" class="headerlink" title="在mybatis配置文件中配置分页插件"></a>在mybatis配置文件中配置分页插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置pagehelper插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 配置数据库方言（mysql）--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;dialect&quot;</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 配置页码的合理修正--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;reasonable&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="AdminMapper添加根据关键字查询sql"><a href="#AdminMapper添加根据关键字查询sql" class="headerlink" title="AdminMapper添加根据关键字查询sql"></a>AdminMapper添加根据关键字查询sql</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAdminByKeyword&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>    from t_admin<br>    where login_acct like concat(&quot;%&quot;,#&#123;keyword&#125;,&quot;%&quot;)<br>    or user_name like concat(&quot;%&quot;,#&#123;keyword&#125;,&quot;%&quot;)<br>    or email like concat(&quot;%&quot;,#&#123;keyword&#125;,&quot;%&quot;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="AdminServiceImpl中接口中的实现方法"><a href="#AdminServiceImpl中接口中的实现方法" class="headerlink" title="AdminServiceImpl中接口中的实现方法"></a>AdminServiceImpl中接口中的实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 按关键字查询数据，并返回分页对象</span><br><span class="hljs-function">PageInfo&lt;Admin&gt; <span class="hljs-title">getPageInfo</span><span class="hljs-params">(String keyword,Integer pageNum,Integer pageSize)</span></span>;<br></code></pre></td></tr></table></figure><p>使用pagehelper插件封装List对象为pageInfo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PageInfo&lt;Admin&gt; <span class="hljs-title">getPageInfo</span><span class="hljs-params">(String keyword, Integer pageNum, Integer pageSize)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.开启pageHelper功能</span><br>    <span class="hljs-comment">// 体现了pageHelper的”非侵入设计“，原本要做的查询不必有任何修改</span><br>    PageHelper.startPage(pageNum, pageSize);<br>    <span class="hljs-comment">// 2.按照关键字进行查询</span><br>    List&lt;Admin&gt; admins = adminMapper.selectAdminByKeyword(keyword);<br>    <span class="hljs-comment">// 3.返回封装的pageInfo对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageInfo(admins);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分页hanlder处理请求"><a href="#分页hanlder处理请求" class="headerlink" title="分页hanlder处理请求"></a>分页hanlder处理请求</h4><p>当不点击页数是时，需要设置默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/admin/get/page.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPageInfo</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        // 当值为空时，需要指定默认值</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(value = &quot;keyword&quot;, defaultValue = &quot;&quot;)</span> String keyword,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> Integer pageNum,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;5&quot;)</span> Integer pageSize,</span></span><br><span class="hljs-params"><span class="hljs-function">        ModelMap modelMap</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br>    PageInfo&lt;Admin&gt; pageInfo = adminService.getPageInfo(keyword, pageNum, pageSize);<br>    modelMap.addAttribute(CrowdConstant.ATTR_NAME_PAGE_INFO,pageInfo);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin-page&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在分页页面显示信息"><a href="#在分页页面显示信息" class="headerlink" title="在分页页面显示信息"></a>在分页页面显示信息</h4><ul><li><p>先导入jstl标签库，进行调用信息显示</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>table标签显示数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;table <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table  table-bordered&quot;</span>&gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th width=<span class="hljs-string">&quot;30&quot;</span>&gt;#&lt;/th&gt;<br>        &lt;th width=<span class="hljs-string">&quot;30&quot;</span>&gt;&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;&lt;/th&gt;<br>        &lt;th&gt;账号&lt;/th&gt;<br>        &lt;th&gt;名称&lt;/th&gt;<br>        &lt;th&gt;邮箱地址&lt;/th&gt;<br>        &lt;th width=<span class="hljs-string">&quot;100&quot;</span>&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>    &lt;%-- jstl --%&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty requestScope.pageInfo.list&#125;&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td colspan=<span class="hljs-string">&quot;6&quot;</span>&gt;抱歉，查不到相关的数据！&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;!empty requestScope.pageInfo.list&#125;&quot;</span>&gt;<br>        &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.pageInfo.list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;admin&quot;</span> varStatus=<span class="hljs-string">&quot;status&quot;</span>&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;&lt;/td&gt;<br>                &lt;td&gt;$&#123;admin.loginAcct&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;admin.userName&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;admin.email&#125;&lt;/td&gt;<br>                &lt;td&gt;<br>                    &lt;a href=<span class="hljs-string">&quot;assign/to/page.html?adminId=$&#123;admin.id&#125;&amp;pageNum=$&#123;requestScope.pageInfo.pageNum&#125;&amp;keyword=$&#123;param.keyword&#125;&quot;</span><br>                       <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-success btn-xs&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot; glyphicon glyphicon-check&quot;</span>&gt;&lt;/i&gt;&lt;/a&gt;<br>                    &lt;a href=<span class="hljs-string">&quot;admin/page/update/$&#123;admin.id&#125;/$&#123;requestScope.pageInfo.pageNum&#125;/$&#123;param.keyword&#125;.html&quot;</span><br>                       <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot; glyphicon glyphicon-pencil&quot;</span>&gt;&lt;/i&gt;&lt;/a&gt;<br>                    &lt;a href=<span class="hljs-string">&quot;admin/page/remove/$&#123;admin.id&#125;/$&#123;requestScope.pageInfo.pageNum&#125;/$&#123;param.keyword&#125;.html&quot;</span><br>                       <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;<br>                        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot; glyphicon glyphicon-remove&quot;</span>&gt;&lt;/i&gt;<br>                    &lt;/a&gt;<br>                &lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/c:forEach&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><h4 id="分页导航条"><a href="#分页导航条" class="headerlink" title="分页导航条"></a>分页导航条</h4><p>使用<strong>Pagination</strong>来选择页码</p><ul><li><p>导入pagination的css和jquery文件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--引入pagination的css--%&gt;<br>&lt;link href=<span class="hljs-string">&quot;css/pagination.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;<br>&lt;%--引入基于jquery的paginationjs--%&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;jquery/jquery.pagination.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>分页导航条显示</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;/tbody&gt;<br>&lt;tfoot&gt;<br>&lt;tr&gt;<br>    &lt;td colspan=<span class="hljs-string">&quot;6&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;div id=<span class="hljs-string">&quot;Pagination&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;&lt;!-- 这里显示分页 --&gt;&lt;/div&gt;<br>    &lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;/tfoot&gt;<br></code></pre></td></tr></table></figure></li><li><p>js代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(function () &#123;<br>        initPagination();<br>    &#125;);<br><br>    <span class="hljs-function">function <span class="hljs-title">initPagination</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//获取分页数据中的总记录数</span><br>        <span class="hljs-keyword">var</span> totalRecord = $&#123;requestScope.pageInfo.total&#125;;<br><br>        <span class="hljs-comment">//声明Pagination设置属性的JSON对象</span><br>        <span class="hljs-keyword">var</span> properties = &#123;<br>            num_edge_entries: <span class="hljs-number">3</span>,                                <span class="hljs-comment">//边缘页数</span><br>            num_display_entries: <span class="hljs-number">5</span>,                             <span class="hljs-comment">//主体页数</span><br>            callback: pageSelectCallback,                       <span class="hljs-comment">//点击各种翻页反扭时触发的回调函数（执行翻页操作）</span><br>            current_page: $&#123;requestScope.pageInfo.pageNum-<span class="hljs-number">1</span>&#125;,   <span class="hljs-comment">//当前页码</span><br>            prev_text: <span class="hljs-string">&quot;上一页&quot;</span>,                                 <span class="hljs-comment">//在对应上一页操作的按钮上的文本</span><br>            next_text: <span class="hljs-string">&quot;下一页&quot;</span>,                                 <span class="hljs-comment">//在对应下一页操作的按钮上的文本</span><br>            items_per_page: $&#123;requestScope.pageInfo.pageSize&#125;   <span class="hljs-comment">//每页显示的数量</span><br>        &#125;;<br>        $(<span class="hljs-string">&quot;#Pagination&quot;</span>).pagination(totalRecord,properties);<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">pageSelectCallback</span><span class="hljs-params">(pageIndex, jQuery)</span></span>&#123;<br>        <span class="hljs-comment">// pageIndex是当前页码的索引，因此比pageNum小1</span><br>        <span class="hljs-keyword">var</span> pageNum = pageIndex+<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 执行页面跳转</span><br>        window.location.href = <span class="hljs-string">&quot;admin/get/page.html?pageNum=&quot;</span>+pageNum;<br>        <span class="hljs-comment">// 取消当前超链接的默认行为</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>修复造成一直刷新的回调bug</p><p>在jquery.pagination.js中将其注释掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 回调函数</span><br><span class="hljs-comment">// opts.callback(current_page, this);</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="关键字查询"><a href="#关键字查询" class="headerlink" title="关键字查询"></a>关键字查询</h4><ul><li><p>修改form标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span> action=<span class="hljs-string">&quot;admin/get/page.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span><br>      style=<span class="hljs-string">&quot;float:left;&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group has-feedback&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;查询条件&lt;/div&gt;<br>            &lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control has-success&quot;</span> name=<span class="hljs-string">&quot;keyword&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入查询条件&quot;</span><br>                   value=<span class="hljs-string">&quot;$&#123;param.keyword&#125;&quot;</span>/&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-search&quot;</span>&gt;&lt;/i&gt; 查询<br>    &lt;/button&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li><p>在页面切换后，关键字不在请求参数中，在转发请求路径中加入关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jS"><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;admin/get/page.html?pageNum=&quot;</span> + pageNum+<span class="hljs-string">&quot;&amp;keyword=&quot;</span>+$&#123;param.keyword&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><h4 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h4><p>点击删除将数据删除后，返回当前页面。</p><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220114101538435.png" alt="image-20220114101538435"></p><h4 id="设置按钮跳转路径"><a href="#设置按钮跳转路径" class="headerlink" title="设置按钮跳转路径"></a>设置按钮跳转路径</h4><p>使用Restful风格，pageNum在重定向时需要在路径中传入需要显示的页面，keyword在查询条件后删除，在重定向时也需要传入显示关键字查询页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;admin/remove/$&#123;admin.id&#125;/$&#123;requestScope.pageInfo.pageNum&#125;/$&#123;param.keyword&#125;.html&quot;</span><br>   <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="Hander方法"><a href="#Hander方法" class="headerlink" title="Hander方法"></a>Hander方法</h4><p>返回时的问题：</p><ol><li>直接返回页面会因为没有发送分页请求而无法显示数据</li><li>使用转发发送分页请求可以实现页面的显示，但用户刷新后会造成后台重复删除</li><li>使用重定向可以防止重复删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/admin/remove/&#123;adminId&#125;/&#123;pageNum&#125;/&#123;keyword&#125;.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">remove</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@PathVariable(&quot;adminId&quot;)</span> Integer adminId,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@PathVariable(&quot;keyword&quot;)</span> String keyword</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>&#123;<br>    adminService.removeOne(adminId);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/get/page.html?pageNum=&quot;</span>+pageNum+<span class="hljs-string">&quot;&amp;keyword=&quot;</span>+keyword;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AdminService接口"><a href="#AdminService接口" class="headerlink" title="AdminService接口"></a>AdminService接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeOne</span><span class="hljs-params">(Integer adminId)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="AdminServiceImpl"><a href="#AdminServiceImpl" class="headerlink" title="AdminServiceImpl"></a>AdminServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeOne</span><span class="hljs-params">(Integer adminId)</span> </span>&#123;<br>    adminMapper.deleteByPrimaryKey(adminId);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h3><h4 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h4><p>将表单提交的admin对象保存到数据库中</p><ul><li>loginAcct不能重复</li><li>密码加密</li></ul><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220114112324628.png" alt="image-20220114112324628"></p><h4 id="添加唯一索引"><a href="#添加唯一索引" class="headerlink" title="添加唯一索引"></a>添加唯一索引</h4><p>给数据库中login_acct字段添加唯一索引，防止用户名重复（在添加时注意表中<strong>不能有重复的数据</strong>，会报错1062）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_admin <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> INDEX(login_acct);<br></code></pre></td></tr></table></figure><h4 id="修改admin-add-jsp页面"><a href="#修改admin-add-jsp页面" class="headerlink" title="修改admin-add.jsp页面"></a>修改admin-add.jsp页面</h4><p>修改字段中的name属性和Admin实体对应，修改提交请求路径</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsp">    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>            &lt;ol <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;<br>                &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;admin/main/page.html&quot;</span>&gt;首页&lt;/a&gt;&lt;/li&gt;<br>                &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;admin/page/page.html&quot;</span>&gt;数据列表&lt;/a&gt;&lt;/li&gt;<br>                &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;active&quot;</span>&gt;新增&lt;/li&gt;<br>            &lt;/ol&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;表单数据<br>                    &lt;div style=<span class="hljs-string">&quot;float:right;cursor:pointer;&quot;</span> data-toggle=<span class="hljs-string">&quot;modal&quot;</span> data-target=<span class="hljs-string">&quot;#myModal&quot;</span>&gt;&lt;i<br>                            <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-question-sign&quot;</span>&gt;&lt;/i&gt;&lt;/div&gt;<br>                &lt;/div&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;<br>                    &lt;form action=<span class="hljs-string">&quot;admin/save.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span>&gt;<br>                        &lt;p&gt;$&#123;requestScope.exception.message&#125;&lt;/p&gt;<br>                        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;登录账号&lt;/label&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;loginAcct&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span><br>                                   placeholder=<span class="hljs-string">&quot;请输入登录账号&quot;</span>&gt;<br>                        &lt;/div&gt;<br>                        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;用户密码&lt;/label&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userPswd&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span><br>                                   placeholder=<span class="hljs-string">&quot;请输入用户密码&quot;</span>&gt;<br>                        &lt;/div&gt;<br>                        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;用户昵称&lt;/label&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span><br>                                   placeholder=<span class="hljs-string">&quot;请输入用户昵称&quot;</span>&gt;<br>                        &lt;/div&gt;<br><br>                        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;邮箱地址&lt;/label&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;email&quot;</span> name=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span><br>                                   placeholder=<span class="hljs-string">&quot;请输入邮箱地址&quot;</span>&gt;<br>                            &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;help-block label label-warning&quot;</span>&gt;请输入合法的邮箱地址, 格式为： xxxx<span class="hljs-meta">@xxxx</span>.com&lt;/p&gt;<br>                        &lt;/div&gt;<br>                        &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-plus&quot;</span>&gt;&lt;/i&gt; 新增<br>                        &lt;/button&gt;<br>                        &lt;button type=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-refresh&quot;</span>&gt;&lt;/i&gt; 重置<br>                        &lt;/button&gt;<br>                    &lt;/form&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="Handler方法"><a href="#Handler方法" class="headerlink" title="Handler方法"></a>Handler方法</h4><p>注意重定向到最后一页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;admin/save.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveAdmin</span><span class="hljs-params">(Admin admin)</span></span>&#123;<br>    <span class="hljs-comment">// 1.调用service保存数据</span><br>    adminService.saveAdmin(admin);<br>    <span class="hljs-comment">// 2.返回页面，由于新增数据在最后一条，将数据定位到最后一页</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/get/page.html?pageNum=&quot;</span>+Integer.MAX_VALUE;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AdminServiceImpl中实现方法"><a href="#AdminServiceImpl中实现方法" class="headerlink" title="AdminServiceImpl中实现方法"></a>AdminServiceImpl中实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveAdmin</span><span class="hljs-params">(Admin admin)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.取出密码进行md5加密</span><br>    String password=admin.getUserPswd();<br>    String passwordMd5 = CrowdUtils.md5(password);<br>    admin.setUserPswd(passwordMd5);<br>    <span class="hljs-comment">// 2.设置新增时间</span><br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    String createTime = simpleDateFormat.format(date);<br>    admin.setCreateTime(createTime);<br>    <span class="hljs-comment">// 3.添加数据</span><br>    adminMapper.insert(admin);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理账户一致异常"><a href="#处理账户一致异常" class="headerlink" title="处理账户一致异常"></a>处理账户一致异常</h4><ul><li><p>由于在mysql中设置了唯一约束，在进行添加时spring会报DuplicateKeyException异常，自定义异常类进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginAcctAlreadyInUseException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginAcctAlreadyInUseException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginAcctAlreadyInUseException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginAcctAlreadyInUseException</span><span class="hljs-params">(String message, Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginAcctAlreadyInUseException</span><span class="hljs-params">(Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginAcctAlreadyInUseException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-keyword">boolean</span> enableSuppression, <span class="hljs-keyword">boolean</span> writableStackTrace)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在CrowdExceptionResolver中添加异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 处理用户名重复的异常</span><br><span class="hljs-meta">@ExceptionHandler(value = &#123;LoginAcctAlreadyInUseException.class&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">loginAcctAlreadyInUseExceptionResolver</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        // 实际捕获到的类型</span></span><br><span class="hljs-params"><span class="hljs-function">        LoginAcctAlreadyInUseException LoginAcctAlreadyInUseException,</span></span><br><span class="hljs-params"><span class="hljs-function">        // 当前请求对象</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">        // 当前响应对象</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletResponse response</span></span><br><span class="hljs-params"><span class="hljs-function">        // 指定普通页时去的错误页面</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    String viewName = <span class="hljs-string">&quot;admin-add&quot;</span>;<br>    <span class="hljs-keyword">return</span> conmonResolver(LoginAcctAlreadyInUseException, request, response, viewName);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在增加记录时捕获异常，并抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3.添加数据</span><br><span class="hljs-keyword">try</span> &#123;<br>    adminMapper.insert(admin);<br>&#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>    <span class="hljs-keyword">if</span>(exception <span class="hljs-keyword">instanceof</span> DuplicateKeyException)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginAcctAlreadyInUseException(CrowdConstant.MESSAGE_LOGIN_ACCT_ALREADY_IN_USE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="更新用户"><a href="#更新用户" class="headerlink" title="更新用户"></a>更新用户</h3><h4 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h4><p>修改现有的Admin，不修改密码和创建时间。</p><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220114141705314.png" alt="image-20220114141705314"></p><h4 id="表单回显"><a href="#表单回显" class="headerlink" title="表单回显"></a>表单回显</h4><ul><li><p>Handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/admin/to/edit/page.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toEditPage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;adminId&quot;)</span> Integer adminId,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;keyword&quot;)</span> String keyword,</span></span><br><span class="hljs-params"><span class="hljs-function">        ModelMap modelMap</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>&#123;<br>    <span class="hljs-comment">// 1.调用serivce查询数据</span><br>    Admin admin=adminService.getAdminById(adminId);<br>    <span class="hljs-comment">// 2.将admin数据保存到model中，用于表单回显数据，pageNum和keyword返回</span><br>    modelMap.addAttribute(<span class="hljs-string">&quot;admin&quot;</span>,admin);<br>    modelMap.addAttribute(<span class="hljs-string">&quot;pageNum&quot;</span>,pageNum);<br>    modelMap.addAttribute(<span class="hljs-string">&quot;keyword&quot;</span>,keyword);<br>    <span class="hljs-comment">// 3.返回到修改页面</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin-edit&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改页面和新增页面相似</p><p>注意将pageNum和keyword设置在隐藏域中，用于更新后返回分页</p><p>（报错400，注意createTime也需要传进去才能自动封装Admin）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>        &lt;ol <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;admin/main/page.html&quot;</span>&gt;首页&lt;/a&gt;&lt;/li&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;admin/page/page.html&quot;</span>&gt;数据列表&lt;/a&gt;&lt;/li&gt;<br>            &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;active&quot;</span>&gt;更新&lt;/li&gt;<br>        &lt;/ol&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;表单数据<br>                &lt;div style=<span class="hljs-string">&quot;float:right;cursor:pointer;&quot;</span> data-toggle=<span class="hljs-string">&quot;modal&quot;</span> data-target=<span class="hljs-string">&quot;#myModal&quot;</span>&gt;<br>                    &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-question-sign&quot;</span>&gt;&lt;/i&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;<br>                &lt;form action=<span class="hljs-string">&quot;admin/update.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span>&gt;<br>                    &lt;%-- 显示错误信息 --%&gt;<br>                    &lt;p&gt;$&#123;requestScope.exception.message&#125;&lt;/p&gt;<br>                    &lt;%-- type=hidden，因为这些数据不需要（pageNum、keyword）或不应该被修改（id、createTime）只需要传递给后端即可 --%&gt;<br>                    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.admin.id&#125;&quot;</span>/&gt;<br>                    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;createTime&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.admin.createTime&#125;&quot;</span>/&gt;<br>                    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;pageNum&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.pageNum&#125;&quot;</span>/&gt;<br>                    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;keyword&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.keyword&#125;&quot;</span>/&gt;<br>                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;登录账号&lt;/label&gt;<br>                        &lt;%-- 通过value给各个文本框赋原始值 --%&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;loginAcct&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span><br>                               value=<span class="hljs-string">&quot;$&#123;requestScope.admin.loginAcct&#125;&quot;</span> placeholder=<span class="hljs-string">&quot;请输入登录账号&quot;</span>&gt;<br>                    &lt;/div&gt;<br>                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;用户昵称&lt;/label&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span><br>                               value=<span class="hljs-string">&quot;$&#123;requestScope.admin.userName&#125;&quot;</span> placeholder=<span class="hljs-string">&quot;请输入用户昵称&quot;</span>&gt;<br>                    &lt;/div&gt;<br><br>                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;邮箱地址&lt;/label&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;email&quot;</span> name=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span><br>                               value=<span class="hljs-string">&quot;$&#123;requestScope.admin.email&#125;&quot;</span> placeholder=<span class="hljs-string">&quot;请输入邮箱地址&quot;</span>&gt;<br>                        &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;help-block label label-warning&quot;</span>&gt;请输入合法的邮箱地址, 格式为： xxxx<span class="hljs-meta">@xxxx</span>.com&lt;/p&gt;<br>                    &lt;/div&gt;<br>                    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;<br>                        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-plus&quot;</span>&gt;修改&lt;/i&gt;<br>                    &lt;/button&gt;<br>                    &lt;button type=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;<br>                        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-refresh&quot;</span>&gt;重置&lt;/i&gt;<br>                    &lt;/button&gt;<br>                &lt;/form&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><ul><li><p>Handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;admin/update.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateAdmin</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        Admin admin,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;keyword&quot;)</span> String keyword</span></span><br><span class="hljs-params"><span class="hljs-function">        )</span></span>&#123;<br>    <span class="hljs-comment">// 1.调用service更新信息</span><br>    adminService.updateAdmin(admin);<br>    <span class="hljs-comment">// 2.重定向到分页页面</span><br>    System.out.println(keyword);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/get/page.html?pageNum=&quot;</span>+pageNum+<span class="hljs-string">&quot;&amp;keyword=&quot;</span>+keyword;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口中实现更新操作</p><p>当<strong>用户名相同</strong>时，抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateAdmin</span><span class="hljs-params">(Admin admin)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 有选择的更新</span><br>        adminMapper.updateByPrimaryKeySelective(admin);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        <span class="hljs-comment">// 抛出更新时，用户名相同异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginAcctAlreadyUpdateException(CrowdConstant.MESSAGE_LOGIN_ACCT_ALREADY_IN_USE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自定义异常类和登录一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  更新Admin如果有相同的账户，则抛出这个异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginAcctAlreadyUpdateException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>异常处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 处理新增用户名重复的异常</span><br><span class="hljs-meta">@ExceptionHandler(value = &#123;LoginAcctAlreadyInUseException.class&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">loginAcctAlreadyInUseExceptionResolver</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        // 实际捕获到的类型</span></span><br><span class="hljs-params"><span class="hljs-function">        LoginAcctAlreadyInUseException LoginAcctAlreadyInUseException,</span></span><br><span class="hljs-params"><span class="hljs-function">        // 当前请求对象</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">        // 当前响应对象</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletResponse response</span></span><br><span class="hljs-params"><span class="hljs-function">        // 指定普通页时去的错误页面</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    String viewName = <span class="hljs-string">&quot;admin-add&quot;</span>;<br>    <span class="hljs-keyword">return</span> conmonResolver(LoginAcctAlreadyInUseException, request, response, viewName);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="角色系统"><a href="#角色系统" class="headerlink" title="角色系统"></a>角色系统</h1><h2 id="RBAC模型"><a href="#RBAC模型" class="headerlink" title="RBAC模型"></a>RBAC模型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="为什么要进行权限控制"><a href="#为什么要进行权限控制" class="headerlink" title="为什么要进行权限控制"></a>为什么要进行权限控制</h4><p>如果没有权限控制，系统的功能完全不设防，全部暴露在所有用户面前。用户登录 以后可以使用系统中的所有功能。这是实际运行中不能接受的。 </p><p>所以权限控制系统的<strong>目标</strong>就是管理用户行为，保护系统功能。 </p><h4 id="什么是权限控制"><a href="#什么是权限控制" class="headerlink" title="什么是权限控制"></a>什么是权限控制</h4><p>“权限”=“权力”+“限制” </p><h4 id="如何进行权限控制"><a href="#如何进行权限控制" class="headerlink" title="如何进行权限控制"></a>如何进行权限控制</h4><h3 id="定义资源"><a href="#定义资源" class="headerlink" title="定义资源"></a>定义资源</h3><p>资源就是系统中需要保护起来的功能。具体形式很多：URL 地址、handler 方 法、service 方法、页面元素等等都可以定义为资源使用权限控制系统保护起来。 </p><h3 id="创建权限"><a href="#创建权限" class="headerlink" title="创建权限"></a>创建权限</h3><p>一个功能复杂的项目会包含很多具体资源，成千上万都有可能。这么多资源逐 个进行操作太麻烦了。为了简化操作，可以将相关的几个资源封装到一起，打包成 一个“权限”同时分配给有需要的人。</p><p><strong>创建角色</strong> </p><p>对于一个庞大系统来说，一方面需要保护的资源非常多，另一方面操作系统的 人也非常多。把资源打包为权限是对操作的简化，同样把用户划分为不同角色也是 对操作的简化。否则直接针对一个个用户进行管理就会很繁琐 所以角色就是用户的分组、分类。先给角色分配权限，然后再把角色分配给用户，用户以这个角色的身份操作系统就享有角色对应的权限了。 </p><p><strong>管理用户</strong> </p><p>系统中的用户其实是人操作系统时用来登录系统的账号、密码。 </p><p><strong>建立关联关系</strong> </p><p><strong>权限→资源：单向多对多</strong> </p><p>Java 类之间单向：从权限实体类可以获取到资源对象的集合，但是通过资 源获取不到权限 。</p><p>数据库表之间多对多： 一个权限可以包含多个资源 ,一个资源可以被分配给多个不同权限 。</p><p><strong>角色→权限：单向多对多</strong> </p><p>Java 类之间单向：从角色实体类可以获取到权限对象的集合，但是通过权限获取不到角色 。</p><p>数据库表之间多对多： 一个角色可以包含多个权限 ，一个权限可以被分配给多个不同角色 。</p><p><strong>用户→角色：双向多对多</strong> </p><p>Java 类之间双向：可以通过用户获取它具备的角色，也可以看一个角色下,包含哪些用户 。</p><p>数据库表之间： 一个角色可以包含多个用户 ，一个用户可以身兼数职。</p><h2 id="角色维护"><a href="#角色维护" class="headerlink" title="角色维护"></a>角色维护</h2><h3 id="分页显示角色"><a href="#分页显示角色" class="headerlink" title="分页显示角色"></a>分页显示角色</h3><h4 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h4><p>将角色数据分页显示，使用异步AJAX完成</p><h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220114200548146.png" alt="image-20220114200548146"></p><h4 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_role(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">PRIMARY</span> key auto_increment,<br>name <span class="hljs-type">char</span>(<span class="hljs-number">100</span>)<br>)<br></code></pre></td></tr></table></figure><h4 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h4><p>在generatorConfig中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库表名与需要的实体类对应映射的指定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_role&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Role&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>生成后归类到各自的包中,生成Role的构造方法</p><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><h5 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h5><p>RoleMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-function">List&lt;Role&gt; <span class="hljs-title">selectRoleByKeyword</span><span class="hljs-params">(String keyword)</span></span>;<br></code></pre></td></tr></table></figure><p>RoleMapper.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectRoleByKeyword&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>  select<br>  <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>  from t_role<br>  where name like concat(&quot;%&quot;,#&#123;keyword&#125;,&quot;%&quot;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="接口实现查询操作"><a href="#接口实现查询操作" class="headerlink" title="接口实现查询操作"></a>接口实现查询操作</h5><p>RoleService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleService</span> </span>&#123;<br>    <span class="hljs-comment">// 根据关键字查询Role</span><br>    <span class="hljs-function">PageInfo&lt;Role&gt; <span class="hljs-title">getRoleByKeyword</span><span class="hljs-params">(String keyword,Integer pageNum,Integer pageSize)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>RoleServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RoleService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RoleMapper roleMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageInfo&lt;Role&gt; <span class="hljs-title">getRoleByKeyword</span><span class="hljs-params">(String keyword, Integer pageNum, Integer pageSize)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.开启分页插件</span><br>        PageHelper.startPage(pageNum,pageSize);<br>        <span class="hljs-comment">// 2.进行查询返回List对象</span><br>        List&lt;Role&gt; roles = roleMapper.selectRoleByKeyword(keyword);<br>        <span class="hljs-comment">// 3.将roles封装在pageInfo中</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(roles);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Handler方法-1"><a href="#Handler方法-1" class="headerlink" title="Handler方法"></a>Handler方法</h5><p>处理json请求，斌返回封装到ResultEntity中的json数据（异常已通过异常机制抛出，这里不做处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/role/get/page/info.json&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;PageInfo&lt;Role&gt;&gt; getPageInfo(<br>        <span class="hljs-meta">@RequestParam(value = &quot;keyword&quot;,defaultValue = &quot;&quot;)</span> String keyword,<br>        <span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;)</span> Integer pageNum,<br>        <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;5&quot;)</span> Integer pageSize<br>)&#123;<br>    <span class="hljs-comment">// 1.调用service查询</span><br>    PageInfo&lt;Role&gt; roleByKeyword = roleService.getRoleByKeyword(keyword, pageNum, pageSize);<br>    <span class="hljs-comment">// 2.封装到ResultEntity中,上面抛出异常是交给异常映射机制处理</span><br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData(roleByKeyword);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>设置a标签路径</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;li style=<span class="hljs-string">&quot;height:30px;&quot;</span>&gt;<br>    &lt;a href=<span class="hljs-string">&quot;role/to/page.html&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-king&quot;</span>&gt;&lt;/i&gt; 角色维护&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h5 id="配置视图控制器"><a href="#配置视图控制器" class="headerlink" title="配置视图控制器"></a>配置视图控制器</h5><p>跳转到role-page页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/role/to/page.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;role-page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="role-page页面"><a href="#role-page页面" class="headerlink" title="role-page页面"></a>role-page页面</h5><ul><li>引入外部js</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--引入pagination的css--%&gt;<br>&lt;link href=<span class="hljs-string">&quot;css/pagination.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;%--引入基于jquery的paginationjs--%&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;jquery/jquery.pagination.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;ztree/zTreeStyle.css&quot;</span>/&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;ztree/jquery.ztree.all-3.5.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;%--引入自定义的js代码--%&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;crowd/my-role.js&quot;</span> charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;&lt;/script&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(function () &#123;<br>        <span class="hljs-comment">// 设置各个全局变量，方便外部js文件中使用</span><br>        window.pageNum = <span class="hljs-number">1</span>;<br>        window.pageSize = <span class="hljs-number">5</span>;<br>        window.keyword = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 调用外部的生成分页的函数</span><br>        generatePage();<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>主题表格部分</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;<br>            &lt;h3 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-th&quot;</span>&gt;&lt;/i&gt; 数据列表&lt;/h3&gt;<br>        &lt;/div&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;<br>            &lt;form <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span> style=<span class="hljs-string">&quot;float:left;&quot;</span>&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group has-feedback&quot;</span>&gt;<br>                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;<br>                        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;查询条件&lt;/div&gt;<br>                        &lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control has-success&quot;</span> id=<span class="hljs-string">&quot;inputKeyword&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span><br>                               placeholder=<span class="hljs-string">&quot;请输入查询条件&quot;</span>&gt;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>                &lt;button id=<span class="hljs-string">&quot;searchBtn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span>&gt;&lt;i<br>                        <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-search&quot;</span>&gt;&lt;/i&gt; 查询<br>                &lt;/button&gt;<br>            &lt;/form&gt;<br>            &lt;button type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;batchRemoveBtn&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span><br>                    style=<span class="hljs-string">&quot;float:right;margin-left:10px;&quot;</span>&gt;&lt;i<br>                    <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot; glyphicon glyphicon-remove&quot;</span>&gt;&lt;/i&gt; 删除<br>            &lt;/button&gt;<br>            &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span><br>                    style=<span class="hljs-string">&quot;float:right;&quot;</span> id=<span class="hljs-string">&quot;showAddModalBtn&quot;</span>&gt;<br>                &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-plus&quot;</span>&gt;&lt;/i&gt; 新增<br>            &lt;/button&gt;<br>            &lt;br&gt;<br>            &lt;hr style=<span class="hljs-string">&quot;clear:both;&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table-responsive&quot;</span>&gt;<br>                &lt;table <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table  table-bordered&quot;</span>&gt;<br>                    &lt;thead&gt;<br>                    &lt;tr&gt;<br>                        &lt;th width=<span class="hljs-string">&quot;30&quot;</span>&gt;#&lt;/th&gt;<br>                        &lt;th width=<span class="hljs-string">&quot;30&quot;</span>&gt;&lt;input id=<span class="hljs-string">&quot;summaryBox&quot;</span> type=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;&lt;/th&gt;<br>                        &lt;th&gt;名称&lt;/th&gt;<br>                        &lt;th width=<span class="hljs-string">&quot;100&quot;</span>&gt;操作&lt;/th&gt;<br>                    &lt;/tr&gt;<br>                    &lt;/thead&gt;<br>                    &lt;%--  tbody的id=rolePageTBody,用于绑定on()函数 --%&gt;<br>                    &lt;tbody id=<span class="hljs-string">&quot;rolePageTBody&quot;</span>&gt;<br>                    &lt;/tbody&gt;<br>                    &lt;tfoot&gt;<br>                    &lt;tr&gt;<br>                        &lt;td colspan=<span class="hljs-string">&quot;6&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>                            &lt;div id=<span class="hljs-string">&quot;Pagination&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;&lt;!-- 这里显示分页 --&gt;&lt;/div&gt;<br>                        &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;/tfoot&gt;<br>                &lt;/table&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h5 id="填充表格"><a href="#填充表格" class="headerlink" title="填充表格"></a>填充表格</h5><p>使用jquery处理json数据，并填充在表格中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 执行分页，生成分页效果</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generatePage</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 通过getPageInfoRemote()方法得到pageInfo</span><br>    <span class="hljs-keyword">var</span> pageInfo = getPageInfoRemote();<br><br>    <span class="hljs-comment">// 将pageInfo传入fillTableTBody()方法，在tbody中生成分页后的数据</span><br>    fillTableTBody(pageInfo);<br>&#125;<br><br><span class="hljs-comment">// 从远程服务器端获取PageInfo数据</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPageInfoRemote</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">// 调用$.ajax()函数发送请求，并用ajaxResult接收函数返回值</span><br>    <span class="hljs-keyword">var</span> ajaxResult = $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;role/get/page/info.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-comment">// 页码、页大小、关键字均从全局变量中获取</span><br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-string">&quot;pageNum&quot;</span>: <span class="hljs-built_in">window</span>.pageNum,<br>            <span class="hljs-string">&quot;pageSize&quot;</span>: <span class="hljs-built_in">window</span>.pageSize,<br>            <span class="hljs-string">&quot;keyword&quot;</span>: <span class="hljs-built_in">window</span>.keyword<br>        &#125;,<br>        <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>,        <span class="hljs-comment">//关闭异步模式，使用同步，这是为了显示页面时保持现有的顺序</span><br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span><br>    &#125;);<br><br>    <span class="hljs-comment">// 取得当前的响应状态码</span><br>    <span class="hljs-keyword">var</span> statusCode = ajaxResult.status;<br><br>    <span class="hljs-comment">// 判断当前状态码是不是200，不是200表示发生错误，通过layer提示错误消息</span><br>    <span class="hljs-keyword">if</span> (statusCode != <span class="hljs-number">200</span>) &#123;<br>        layer.msg(<span class="hljs-string">&quot;失败！状态码=&quot;</span> + statusCode + <span class="hljs-string">&quot;错误信息=&quot;</span> + ajaxResult.statusText);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 响应状态码为200，进入下面的代码</span><br>    <span class="hljs-comment">// 通过responseJSON取得handler中的返回值</span><br>    <span class="hljs-keyword">var</span> resultEntity = ajaxResult.responseJSON;<br><br>    <span class="hljs-comment">// 从resultEntity取得result属性</span><br>    <span class="hljs-keyword">var</span> result = resultEntity.result;<br><br>    <span class="hljs-comment">// 判断result是否是FAILED</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-string">&quot;FAILED&quot;</span>) &#123;<br>        <span class="hljs-comment">// 显示失败的信息</span><br>        layer.msg(resultEntity.message);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// result不是失败时，获取pageInfo</span><br>    <span class="hljs-keyword">var</span> pageInfo = resultEntity.data;<br><br>    <span class="hljs-comment">// 返回pageInfo</span><br>    <span class="hljs-keyword">return</span> pageInfo;<br>&#125;<br><br><span class="hljs-comment">// 根据PageInfo填充表格</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fillTableTBody</span>(<span class="hljs-params">pageInfo</span>) </span>&#123;<br><br>    <span class="hljs-comment">// 清除tbody中的旧内容</span><br>    $(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).empty();<br><br>    <span class="hljs-comment">// 使无查询结果时，不显示导航条</span><br>    $(<span class="hljs-string">&quot;#Pagination&quot;</span>).empty();<br><br>    <span class="hljs-comment">// 判断pageInfo对象是否有效，无效则表示未查到数据</span><br>    <span class="hljs-keyword">if</span> (pageInfo == <span class="hljs-literal">null</span> || pageInfo == <span class="hljs-literal">undefined</span> || pageInfo.list == <span class="hljs-literal">null</span> || pageInfo.list.length == <span class="hljs-number">0</span>) &#123;<br>        $(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).append(<span class="hljs-string">&quot;&lt;tr&gt;&lt;td colspan=&#x27;4&#x27; align=&#x27;center&#x27;&gt;抱歉！没有查询到想要的数据&lt;/td&gt;&lt;/tr&gt;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// pageInfo有效，使用pageInfo的list填充tbody</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; pageInfo.list.length; i++) &#123;<br><br>        <span class="hljs-keyword">var</span> role = pageInfo.list[i];<br>        <span class="hljs-keyword">var</span> roleId = role.id;<br>        <span class="hljs-keyword">var</span> roleName = role.name;<br>        <span class="hljs-keyword">var</span> numberTd = <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;<br>        <span class="hljs-keyword">var</span> checkboxTd = <span class="hljs-string">&quot;&lt;td&gt;&lt;input type=&#x27;checkbox&#x27;/&gt;&lt;/td&gt;&quot;</span>;<br>        <span class="hljs-keyword">var</span> roleNameTd = <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + roleName + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;<br><br>        <span class="hljs-keyword">var</span> checkBtn = <span class="hljs-string">&quot;&lt;button type=&#x27;button&#x27; class=&#x27;btn btn-success btn-xs&#x27;&gt;&lt;i class=&#x27; glyphicon glyphicon-check&#x27;&gt;&lt;/i&gt;&lt;/button&gt;&quot;</span><br><br>        <span class="hljs-keyword">var</span> pencilBtn = <span class="hljs-string">&quot;&lt;button type=&#x27;button&#x27; class=&#x27;btn btn-primary btn-xs&#x27;&gt;&lt;i class=&#x27; glyphicon glyphicon-pencil&#x27;&gt;&lt;/i&gt;&lt;/button&gt;&quot;</span><br><br>        <span class="hljs-keyword">var</span> removeBtn = <span class="hljs-string">&quot;&lt;button type=&#x27;button&#x27; class=&#x27;btn btn-danger btn-xs&#x27;&gt;&lt;i class=&#x27; glyphicon glyphicon-remove&#x27;&gt;&lt;/i&gt;&lt;/button&gt;&quot;</span><br><br>        <span class="hljs-comment">// 拼接三个小按钮成一个td</span><br>        <span class="hljs-keyword">var</span> buttonTd = <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + checkBtn + <span class="hljs-string">&quot; &quot;</span> + pencilBtn + <span class="hljs-string">&quot; &quot;</span> + removeBtn + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// 将所有的td拼接成tr</span><br>        <span class="hljs-keyword">var</span> tr = <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> + numberTd + checkboxTd + roleNameTd + buttonTd + <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// 将拼接后的结果，放入id=rolePageTBody</span><br>        $(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).append(tr);<br>    &#125;<br><br>    <span class="hljs-comment">// 调用generateNavigator()方法传入pageInfo，进行生成分页页码导航条</span><br>    generateNavigator(pageInfo);<br><br>&#125;<br><br><span class="hljs-comment">// 生成分页页码导航条</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateNavigator</span>(<span class="hljs-params">pageInfo</span>) </span>&#123;<br><br><br>    <span class="hljs-comment">//获取分页数据中的总记录数</span><br>    <span class="hljs-keyword">var</span> totalRecord = pageInfo.total;<br><br>    <span class="hljs-comment">//声明Pagination设置属性的JSON对象</span><br>    <span class="hljs-keyword">var</span> properties = &#123;<br>        <span class="hljs-attr">num_edge_entries</span>: <span class="hljs-number">3</span>,                                <span class="hljs-comment">//边缘页数</span><br>        <span class="hljs-attr">num_display_entries</span>: <span class="hljs-number">5</span>,                             <span class="hljs-comment">//主体页数</span><br>        <span class="hljs-attr">callback</span>: paginationCallback,                       <span class="hljs-comment">//点击各种翻页反扭时触发的回调函数（执行翻页操作）</span><br>        <span class="hljs-attr">current_page</span>: (pageInfo.pageNum - <span class="hljs-number">1</span>),                 <span class="hljs-comment">//当前页码</span><br>        <span class="hljs-attr">prev_text</span>: <span class="hljs-string">&quot;上一页&quot;</span>,                                 <span class="hljs-comment">//在对应上一页操作的按钮上的文本</span><br>        <span class="hljs-attr">next_text</span>: <span class="hljs-string">&quot;下一页&quot;</span>,                                 <span class="hljs-comment">//在对应下一页操作的按钮上的文本</span><br>        <span class="hljs-attr">items_per_page</span>: pageInfo.pageSize               <span class="hljs-comment">//每页显示的数量</span><br>    &#125;;<br><br>    <span class="hljs-comment">// 调用pagination()函数，生成导航条</span><br>    $(<span class="hljs-string">&quot;#Pagination&quot;</span>).pagination(totalRecord, properties);<br><br><br>&#125;<br><br><span class="hljs-comment">// 翻页时的回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paginationCallback</span>(<span class="hljs-params">pageIndex, jQuery</span>) </span>&#123;<br><br>    <span class="hljs-comment">// pageIndex是当前页码的索引，因此比pageNum小1</span><br>    <span class="hljs-built_in">window</span>.pageNum = pageIndex + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 重新执行分页代码</span><br>    generatePage();<br><br>    <span class="hljs-comment">// 取消当前超链接的默认行为</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h5><ul><li>方法一:可以修改tomcat启动参数</li></ul><p><img src="/img/atcrowdfunding.assets/image-20220115120719617.png" alt="image-20220115120719617"></p><ul><li>方法二:将js文件修改为带有BOM的utf-8格式</li><li>方法三:在引入js时规定字符编码charset=”UTF-8”</li></ul><h3 id="关键字查询-1"><a href="#关键字查询-1" class="headerlink" title="关键字查询"></a>关键字查询</h3><h4 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h4><p>把页面上的“查询”表单和已经封装好的执行分页的函数连起来即可</p><h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220115121106127.png" alt="image-20220115121106127"></p><h4 id="绑定单击事件"><a href="#绑定单击事件" class="headerlink" title="绑定单击事件"></a>绑定单击事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给查询按钮绑定单击事件</span><br>$(<span class="hljs-string">&quot;#searchBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 查询后的页面从第一页显示</span><br>    <span class="hljs-built_in">window</span>.pageNum = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 获取关键字数据给对应的全局变量</span><br>    <span class="hljs-built_in">window</span>.keyword  = $(<span class="hljs-string">&quot;#inputKeyword&quot;</span>).val();<br>    <span class="hljs-comment">// 调用分页函数刷新</span><br>    generatePage();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="新增角色"><a href="#新增角色" class="headerlink" title="新增角色"></a>新增角色</h3><h4 id="目标-11"><a href="#目标-11" class="headerlink" title="目标"></a>目标</h4><p>通过在打开的模态框中输入角色名称，执行对新角色的保存</p><h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220115140947213.png" alt="image-20220115140947213"></p><h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><h5 id="新增模态框的引入"><a href="#新增模态框的引入" class="headerlink" title="新增模态框的引入"></a>新增模态框的引入</h5><ul><li><p>创建model-role-add.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;div id=<span class="hljs-string">&quot;addRoleModal&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal fade&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>    &lt;div  <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;<br>                &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span> aria-label=<span class="hljs-string">&quot;Close&quot;</span>&gt;&lt;span aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;<br>                &lt;h4 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;尚筹网-角色添加&lt;/h4&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>                &lt;form <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-signin&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span>&gt;<br>                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;inputSuccess4&quot;</span> placeholder=<span class="hljs-string">&quot;请输入角色名称&quot;</span> autofocus&gt;<br>                        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-user form-control-feedback&quot;</span>&gt;&lt;/span&gt;<br>                    &lt;/div&gt;<br>                &lt;/form&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>                &lt;button id=<span class="hljs-string">&quot;saveRoleBtn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;保存&lt;/button&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>将静态资源在页尾引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/WEB-INF/model-role-add.jsp&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>绑定新增按钮，弹出静态框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 点击新增按钮打开模态框</span><br>$(<span class="hljs-string">&quot;#showAddModalBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#addRoleModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h5 id="绑定保存按钮"><a href="#绑定保存按钮" class="headerlink" title="绑定保存按钮"></a>绑定保存按钮</h5><p>点击保存按钮，返送Ajax异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给新增模态框的保存按钮绑定单击事件</span><br>$(<span class="hljs-string">&quot;#saveRoleBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 获取用户在文本框中输入角色的名称</span><br>    <span class="hljs-comment">// #addModal表示找到整个模态框</span><br>    <span class="hljs-comment">// 空格表示后代元素中继续查找</span><br>    <span class="hljs-comment">// [name=roleName] 表示匹配name属性roleName的元素</span><br>    <span class="hljs-keyword">var</span> roleName = $.trim($(<span class="hljs-string">&quot;#addRoleModal [name=roleName]&quot;</span>).val());<br><br>    <span class="hljs-comment">// 发送Ajax请求</span><br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;role/save.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">name</span>: roleName<br>        &#125;,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> result = response.result;<br>            <span class="hljs-comment">// 成功则弹框输出</span><br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br><br>                <span class="hljs-comment">// 进入最后一页 方便显示添加的内容</span><br>                <span class="hljs-built_in">window</span>.pageNum = <span class="hljs-number">999</span>;<br>                <span class="hljs-comment">// 重新生成分页</span><br>                generatePage();<br>            &#125;<br><br>            <span class="hljs-comment">// 失败弹出原因</span><br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-string">&quot;FAILED&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作失败！&quot;</span> + response.message);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            layer.msg(response.status + <span class="hljs-string">&quot; &quot;</span> + response.statusText);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 关闭模态框</span><br>    $(<span class="hljs-string">&quot;#addRoleModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br><br>    <span class="hljs-comment">// 清理模态框</span><br>    $(<span class="hljs-string">&quot;#addRoleModal [name=roleName]&quot;</span>).val(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h4><h5 id="handler方法"><a href="#handler方法" class="headerlink" title="handler方法"></a>handler方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/role/save.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveRole</span><span class="hljs-params">(Role role)</span></span>&#123;<br>    roleService.saveRole(role);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RoleService的实现"><a href="#RoleService的实现" class="headerlink" title="RoleService的实现"></a>RoleService的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveRole</span><span class="hljs-params">(Role role)</span> </span>&#123;<br>    roleMapper.insert(role);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="更新角色"><a href="#更新角色" class="headerlink" title="更新角色"></a>更新角色</h3><h4 id="目标-12"><a href="#目标-12" class="headerlink" title="目标"></a>目标</h4><p>修改角色信息</p><h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220115143004565.png" alt="image-20220115143004565"></p><h4 id="前端-2"><a href="#前端-2" class="headerlink" title="前端"></a>前端</h4><h5 id="修改模态框的引入"><a href="#修改模态框的引入" class="headerlink" title="修改模态框的引入"></a>修改模态框的引入</h5><ul><li>modal-role-update.jsp页面</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;div id=<span class="hljs-string">&quot;editModal&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal fade&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>    &lt;div  <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;<br>                &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span> aria-label=<span class="hljs-string">&quot;Close&quot;</span>&gt;&lt;span aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;<br>                &lt;h4 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;尚筹网-角色更新&lt;/h4&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>                &lt;form <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-signin&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span>&gt;<br>                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;inputSuccess4&quot;</span> placeholder=<span class="hljs-string">&quot;请输入角色名称&quot;</span> autofocus&gt;<br>                        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-user form-control-feedback&quot;</span>&gt;&lt;/span&gt;<br>                    &lt;/div&gt;<br>                &lt;/form&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>                &lt;button id=<span class="hljs-string">&quot;updateRoleBtn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;更新&lt;/button&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li><p>引入到role-page中</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/WEB-INF/modal-role-update.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure></li></ul><h5 id="回显数据"><a href="#回显数据" class="headerlink" title="回显数据"></a>回显数据</h5><ul><li><p>在动态生成的编辑按钮处添加选择器，以及添加id值，方便修改时获取id的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> pencilBtn = <span class="hljs-string">&quot;&lt;button id=&#x27;&quot;</span>+roleId+<span class="hljs-string">&quot;&#x27; type=&#x27;button&#x27; class=&#x27;btn btn-primary btn-xs pencilBtn&#x27;&gt;&lt;i class=&#x27; glyphicon glyphicon-pencil&#x27;&gt;&lt;/i&gt;&lt;/button&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>给动态生成的编辑按钮绑定单击事件，弹出静态框，并回显信息在输入文本框中</p><p>普通单击事件无法绑定翻页后的编辑按钮，使用on函数利用静态元素取绑定动态生成的按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传统的事件绑定方式只有那个在第一个页面有效，在翻页后失效，使用jQuery对象on（）函数解决</span><br><span class="hljs-comment">//首先找到“动态生成”的元素附着的“静态”元素</span><br><span class="hljs-comment">// on：第一个参数：事件类型</span><br><span class="hljs-comment">// on：第二个参数：找到真正的绑定元素的选择器</span><br><span class="hljs-comment">// on：第一个参数：事件的响应函数</span><br>$(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-string">&quot;.pencilBtn&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 打开模态框</span><br>    $(<span class="hljs-string">&quot;#editModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br><br>    <span class="hljs-comment">// 获取表格中当前行的角色名称</span><br>    <span class="hljs-keyword">var</span> roleName=$(<span class="hljs-built_in">this</span>).parent().prev().text();<br><br>    <span class="hljs-comment">// 获取当前角色的id,为了发送Ajax请求，将它设置为全局变量</span><br>    <span class="hljs-built_in">window</span>.roleId=<span class="hljs-built_in">this</span>.id;<br><br>    <span class="hljs-comment">// 使用roleName设置模态框中的文本框</span><br>    $(<span class="hljs-string">&quot;#editModal [name=roleName]&quot;</span>).val(roleName);<br><br>    <span class="hljs-comment">// 绑定更新，发送Ajax请求</span><br>    $(<span class="hljs-string">&quot;#updateRoleBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 获取用户填写的更新用户名</span><br>        $(<span class="hljs-string">&quot;#editModal [name=roleName]&quot;</span>).val();<br></code></pre></td></tr></table></figure></li></ul><h5 id="发送Ajax修改数据"><a href="#发送Ajax修改数据" class="headerlink" title="发送Ajax修改数据"></a>发送Ajax修改数据</h5><p>最后不执行清除模态框，(需要回显信息)，不返回最后一页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 绑定更新，发送Ajax请求</span><br>          $(<span class="hljs-string">&quot;#updateRoleBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// 从模态框的文本框中获得修改后的roleName</span><br>              <span class="hljs-keyword">var</span> roleName = $(<span class="hljs-string">&quot;#editModal [name=roleName]&quot;</span>).val();<br>              $.ajax(&#123;<br>                  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;role/update.json&quot;</span>,<br>                  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                  <span class="hljs-attr">data</span>: &#123;<br>                      <span class="hljs-attr">id</span>:<span class="hljs-built_in">window</span>.roleId,<span class="hljs-comment">// 从全局遍历取得当前角色的id</span><br>                      <span class="hljs-attr">name</span>:roleName<br>                  &#125;,<br>                  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>                  <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>                      <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>)&#123;<br>                          layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br>                          generatePage();<br>                      &#125;<br>                      <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>)<br>                          layer.msg(<span class="hljs-string">&quot;操作失败&quot;</span>+response.message)<br>                  &#125;,<br>                  <span class="hljs-attr">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>                      layer.msg(<span class="hljs-string">&quot;statusCode=&quot;</span>+response.status + <span class="hljs-string">&quot; message=&quot;</span>+response.statusText);<br>                  &#125;<br>              &#125;);<br><br>              <span class="hljs-comment">// 关闭模态框</span><br>              $(<span class="hljs-string">&quot;#editModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br>          &#125;);<br>      &#125;);<br></code></pre></td></tr></table></figure><h4 id="后端-2"><a href="#后端-2" class="headerlink" title="后端"></a>后端</h4><p>Hander方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/role/update.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">updateRole</span><span class="hljs-params">(Role role)</span></span>&#123;<br>    roleService.updateRole(role);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData();<br>&#125;<br></code></pre></td></tr></table></figure><p>RoleService实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateRole</span><span class="hljs-params">(Role role)</span> </span>&#123;<br>    roleMapper.updateByPrimaryKey(role);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h3><h4 id="目标-13"><a href="#目标-13" class="headerlink" title="目标"></a>目标</h4><p>前端的“单条删除”和“批量删除”在后端合并为同一套操作，合并的依据是：单条删除时id也被放在数组中，后端完全根据id的数组进行删除</p><h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220115162624525.png" alt="image-20220115162624525"></p><h4 id="前端-3"><a href="#前端-3" class="headerlink" title="前端"></a>前端</h4><h5 id="删除模态框的引入"><a href="#删除模态框的引入" class="headerlink" title="删除模态框的引入"></a>删除模态框的引入</h5><ul><li><p>modal-role-confirm.jsp模态框</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;div id=<span class="hljs-string">&quot;confirmRoleModal&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal fade&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>    &lt;div  <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;<br>                &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span> aria-label=<span class="hljs-string">&quot;Close&quot;</span>&gt;&lt;span aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;<br>                &lt;h4 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;尚筹网-确认删除&lt;/h4&gt;<br>            &lt;/div&gt;<br><br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>                &lt;h4&gt;请确认是否删除下列角色！&lt;/h4&gt;<br>                &lt;%-- 确认的列表 --%&gt;<br>                &lt;div id=<span class="hljs-string">&quot;confirmList&quot;</span> style=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;&lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>                &lt;button id=<span class="hljs-string">&quot;confirmRoleBtn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;确认删除&lt;/button&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>引入到role-page页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%@include file=<span class="hljs-string">&quot;/WEB-INF/modal-role-confirm.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure></li></ul><h5 id="确认删除框的函数"><a href="#确认删除框的函数" class="headerlink" title="确认删除框的函数"></a>确认删除框的函数</h5><p>显示已选择的角色的角色名，封装函数在my-role.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 打开确认删除的模态框</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showConfirmModal</span>(<span class="hljs-params">roleArray</span>) </span>&#123;<br>    <span class="hljs-comment">// 显示模态框</span><br>    $(<span class="hljs-string">&quot;#confirmRoleModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br><br>    <span class="hljs-comment">// 清除旧的模态框中的数据</span><br>    $(<span class="hljs-string">&quot;#confirmList&quot;</span>).empty();<br><br>    <span class="hljs-comment">// 创建一个全局变量数组，用于存放要删除的roleId</span><br>    <span class="hljs-built_in">window</span>.roleIdArray = [];<br><br>    <span class="hljs-comment">// 填充数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; roleArray.length; i++) &#123;<br><br>        <span class="hljs-keyword">var</span> roleId = roleArray[i].id;<br><br>        <span class="hljs-comment">// 将当前遍历到的roleId放入全局变量</span><br>        <span class="hljs-built_in">window</span>.roleIdArray.push(roleId);<br><br>        <span class="hljs-keyword">var</span> roleName = roleArray[i].name;<br><br>        <span class="hljs-comment">// 显示出要删除的数据</span><br>        $(<span class="hljs-string">&quot;#confirmList&quot;</span>).append(roleName + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="点击删除弹出模态框（单个删除）"><a href="#点击删除弹出模态框（单个删除）" class="headerlink" title="点击删除弹出模态框（单个删除）"></a>点击删除弹出模态框（单个删除）</h5><ul><li><p>在每页的删除按钮添加id（方便后面用来删除操作）和class的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeBtn = <span class="hljs-string">&quot;&lt;button id=&#x27;&quot;</span>+roleId+<span class="hljs-string">&quot;&#x27; type=&#x27;button&#x27; class=&#x27;btn btn-danger btn-xs removeBtn&#x27;&gt;&lt;i class=&#x27; glyphicon glyphicon-remove&#x27;&gt;&lt;/i&gt;&lt;/button&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>给单击X删除绑定单击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给单击删除把昂顶单击响应函数</span><br>$(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.removeBtn&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 通过x按钮删除时，只有一个角色，因此只需要建一个特殊的数组，存放单个对象即可</span><br>    <span class="hljs-keyword">var</span> roleArray = [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-built_in">this</span>.id,<br>        <span class="hljs-attr">name</span>: $(<span class="hljs-built_in">this</span>).parent().prev().text()<br>    &#125;];<br>    <span class="hljs-comment">// 调用删除静态框函数，传入roleArray</span><br>    showConfirmModal(roleArray);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h5 id="绑定确认删除单击事件"><a href="#绑定确认删除单击事件" class="headerlink" title="绑定确认删除单击事件"></a>绑定确认删除单击事件</h5><p>需要先转换为json字符串，后台才能使用请求体获取请求数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给确认删除按钮绑定单击事件</span><br>$(<span class="hljs-string">&quot;#confirmRoleBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 将id信息封装到请求体</span><br>    <span class="hljs-keyword">var</span> requestBody = <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">window</span>.roleIdArray);<br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;role/remove.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-attr">data</span>: requestBody,                         <span class="hljs-comment">// 将转换后的数据传给后端</span><br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>, <span class="hljs-comment">// 表明发送json格式数据</span><br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br>                generatePage();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>)<br>                layer.msg(<span class="hljs-string">&quot;操作失败&quot;</span> + response.message)<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            layer.msg(<span class="hljs-string">&quot;statusCode=&quot;</span> + response.status + <span class="hljs-string">&quot; message=&quot;</span> + response.statusText);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 关闭模态框</span><br>    $(<span class="hljs-string">&quot;#confirmRoleModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="多选框删除角色（多个删除）"><a href="#多选框删除角色（多个删除）" class="headerlink" title="多选框删除角色（多个删除）"></a>多选框删除角色（多个删除）</h5><ul><li><p>在外部js生成表单td绑定id，方便多选框勾取时获取id值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> checkboxTd = <span class="hljs-string">&quot;&lt;td&gt;&lt;input type=&#x27;checkbox&#x27; id=&#x27;&quot;</span>+roleId+<span class="hljs-string">&quot;&#x27; class=&#x27;itemBox&#x27;/&gt;&lt;/td&gt;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>给全选框设置id（id=summaryBox）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;summaryBox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>多选框全选，全不选处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全选，全不选的反向操作</span><br>$(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.itemBox&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 获取当前已选中的多选框的数量</span><br>    <span class="hljs-keyword">var</span> checkedBoxCount = $(<span class="hljs-string">&quot;.itemBox:checked&quot;</span>).length;<br>    <span class="hljs-comment">// 获取全部checkBox的数量</span><br>    <span class="hljs-keyword">var</span> checkBoxAll = $(<span class="hljs-string">&quot;.itemBox&quot;</span>).length;<br>    <span class="hljs-comment">// 两者比较设置总的多选框状态</span><br>    $(<span class="hljs-string">&quot;#summaryBox&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>, checkedBoxCount == checkBoxAll);<br>&#125;);<br><br><span class="hljs-comment">// 给多选删除按钮绑定单击事件</span><br>$(<span class="hljs-string">&quot;#batchRemoveBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-comment">// 创建一个数组对象，用来存放后面获得的角色对象</span><br>    <span class="hljs-keyword">var</span> roleArray = [];<br><br>    <span class="hljs-comment">// 遍历被勾选的内容</span><br>    $(<span class="hljs-string">&quot;.itemBox:checked&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 通过this引用当前遍历得到的多选框的id</span><br>        <span class="hljs-keyword">var</span> roleId = <span class="hljs-built_in">this</span>.id;<br><br>        <span class="hljs-comment">// 通过DOM操作获取角色名称</span><br>        <span class="hljs-keyword">var</span> roleName = $(<span class="hljs-built_in">this</span>).parent().next().text();<br><br>        roleArray.push(&#123;<br>            <span class="hljs-string">&quot;id&quot;</span>:roleId,<br>            <span class="hljs-string">&quot;name&quot;</span>:roleName<br>        &#125;);<br>    &#125;);<br></code></pre></td></tr></table></figure></li><li><p>点击删除多选框内容</p><p>调用显示静态框函数，传入roleArray</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给多选删除按钮绑定单击事件</span><br>       $(<span class="hljs-string">&quot;#batchRemoveBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <br>           <span class="hljs-comment">// 创建一个数组对象，用来存放后面获得的角色对象</span><br>           <span class="hljs-keyword">var</span> roleArray = [];<br>  <br>           <span class="hljs-comment">// 遍历被勾选的内容</span><br>           $(<span class="hljs-string">&quot;.itemBox:checked&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-comment">// 通过this引用当前遍历得到的多选框的id</span><br>               <span class="hljs-keyword">var</span> roleId = <span class="hljs-built_in">this</span>.id;<br>  <br>               <span class="hljs-comment">// 通过DOM操作获取角色名称</span><br>               <span class="hljs-keyword">var</span> roleName = $(<span class="hljs-built_in">this</span>).parent().next().text();<br>  <br>               roleArray.push(&#123;<br>                   <span class="hljs-attr">id</span>: roleId,<br>                   <span class="hljs-attr">name</span>: roleName<br>               &#125;);<br>           &#125;);<br>  <br>           <span class="hljs-comment">// 判断roleArray的长度是否为0</span><br>           <span class="hljs-keyword">if</span> (roleArray.length == <span class="hljs-number">0</span>) &#123;<br>               layer.msg(<span class="hljs-string">&quot;请至少选择一个来删除&quot;</span>);<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br>  <br>           <span class="hljs-comment">// 显示确认框</span><br>           showConfirmModal(roleArray);<br></code></pre></td></tr></table></figure></li></ul><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><h5 id="Handler方法-2"><a href="#Handler方法-2" class="headerlink" title="Handler方法"></a>Handler方法</h5><p>传入的是json数据，使用请求体来获取json字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/role/update.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">updateRole</span><span class="hljs-params">(Role role)</span> </span>&#123;<br>    roleService.updateRole(role);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RoleService的实现-1"><a href="#RoleService的实现-1" class="headerlink" title="RoleService的实现"></a>RoleService的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteRole</span><span class="hljs-params">(List&lt;Integer&gt; roleIdList)</span> </span>&#123;<br>    RoleExample roleExample = <span class="hljs-keyword">new</span> RoleExample();<br>    RoleExample.Criteria criteria = roleExample.createCriteria();<br>    criteria.andIdIn(roleIdList);<br>    roleMapper.deleteByExample(roleExample);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="菜单维护"><a href="#菜单维护" class="headerlink" title="菜单维护"></a>菜单维护</h1><h2 id="树形结构基础知识"><a href="#树形结构基础知识" class="headerlink" title="树形结构基础知识"></a>树形结构基础知识</h2><p><img src="/img/atcrowdfunding.assets/image-20220115201632429.png" alt="image-20220115201632429"></p><p>整个树形结构最多只能有三级</p><h3 id="在数据库中表示树形结构"><a href="#在数据库中表示树形结构" class="headerlink" title="在数据库中表示树形结构"></a>在数据库中表示树形结构</h3><h4 id="创建菜单数据库表"><a href="#创建菜单数据库表" class="headerlink" title="创建菜单数据库表"></a>创建菜单数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#创建菜单的数据库表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_menu<br>(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>pid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>), <br>url <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>icon <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>), <br><span class="hljs-keyword">primary</span> key (id)<br>);<br></code></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>#插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27; 系统权限菜单&#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-th-list&#x27;</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27; 控 制 面 板 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-dashboard&#x27;</span>,<span class="hljs-string">&#x27;main.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;权限管理&#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon glyphicon-tasks&#x27;</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27; 用 户 维 护 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-user&#x27;</span>,<span class="hljs-string">&#x27;user/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27; 角 色 维 护 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-king&#x27;</span>,<span class="hljs-string">&#x27;role/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27; 菜 单 维 护 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-lock&#x27;</span>,<span class="hljs-string">&#x27;permission/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27; 业 务 审 核 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-ok&#x27;</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27; 实名认证审核&#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-check&#x27;</span>,<span class="hljs-string">&#x27;auth_cert/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27; 广 告 审 核 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-check&#x27;</span>,<span class="hljs-string">&#x27;auth_adv/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27; 项 目 审 核 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-check&#x27;</span>,<span class="hljs-string">&#x27;auth_project/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27; 业 务 管 理 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-th-large&#x27;</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 资 质 维 护 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-picture&#x27;</span>,<span class="hljs-string">&#x27;cert/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;13&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 分 类 管 理 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-equalizer&#x27;</span>,<span class="hljs-string">&#x27;certtype/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;14&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 流 程 管 理 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-random&#x27;</span>,<span class="hljs-string">&#x27;process/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 广 告 管 理 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-hdd&#x27;</span>,<span class="hljs-string">&#x27;advert/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 消 息 模 板 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-comment&#x27;</span>,<span class="hljs-string">&#x27;message/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;17&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 项 目 分 类 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-list&#x27;</span>,<span class="hljs-string">&#x27;projectType/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27; 项 目 标 签 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-tags&#x27;</span>,<span class="hljs-string">&#x27;tag/index.htm&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `t_menu` (`id`, `pid`, `name`, `icon`, `url`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;19&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27; 参 数 管 理 &#x27;</span>,<span class="hljs-string">&#x27;glyphicon glyphicon-list-alt&#x27;</span>,<span class="hljs-string">&#x27;param/index.htm&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="关联方式"><a href="#关联方式" class="headerlink" title="关联方式"></a>关联方式</h4><p>子节点通过pid字段关联到父节点的id字段，建立父子关系。</p><p><img src="/img/atcrowdfunding.assets/image-20220115202554241.png" alt="image-20220115202554241"></p><p>根节点的pid为空</p><h4 id="在Java类中表示树形结构"><a href="#在Java类中表示树形结构" class="headerlink" title="在Java类中表示树形结构"></a>在Java类中表示树形结构</h4><h5 id="基本方式"><a href="#基本方式" class="headerlink" title="基本方式"></a>基本方式</h5><p>在 Menu 类中使用 List<Menu> <strong>children</strong> 属性存储当前节点的子节点。 </p><h5 id="为了配合zTree-所需要添加的属性"><a href="#为了配合zTree-所需要添加的属性" class="headerlink" title="为了配合zTree 所需要添加的属性"></a>为了配合zTree 所需要添加的属性</h5><ul><li><p>pid 属性：找到父节点 </p></li><li><p>name 属性：作为节点名称 </p></li><li><p>icon 属性：当前节点使用的图标 </p></li><li><p><strong>open</strong> 属性：控制节点是否默认打开 </p></li><li><p>url 属性：点击节点时跳转的位置 </p></li></ul><h2 id="页面显示树形结构"><a href="#页面显示树形结构" class="headerlink" title="页面显示树形结构"></a>页面显示树形结构</h2><h3 id="目标-14"><a href="#目标-14" class="headerlink" title="目标"></a>目标</h3><p>将数据库中查询得到的数据到页面上显示出来</p><h3 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h3><p>数据库查询全部→Java 对象组装→页面上使用 zTree 显示 </p><h3 id="逆向工程-1"><a href="#逆向工程-1" class="headerlink" title="逆向工程"></a>逆向工程</h3><ul><li><p>修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库表名与需要的实体类对应映射的指定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_menu&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Menu&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改Menu实体类</p><p>此处省略get，set，有参，无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> crowd.entity;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Menu</span> </span>&#123;<br>    <span class="hljs-comment">// 主键</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">// 父节点id</span><br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-comment">// 结点名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 结点附带的url地址，是将来点击菜单项时要跳转的路径</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-comment">// 结点图标样式</span><br>    <span class="hljs-keyword">private</span> String icon;<br>    <span class="hljs-comment">// 存储节点的集合，初始化是为了避免空指针异常</span><br>    <span class="hljs-keyword">private</span> List&lt;Menu&gt; children = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-comment">// 控制节点是否默认打开，true为打开</span><br>    <span class="hljs-keyword">private</span> Boolean open = <span class="hljs-keyword">true</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="后端-3"><a href="#后端-3" class="headerlink" title="后端"></a>后端</h3><h4 id="MenuHandler方法"><a href="#MenuHandler方法" class="headerlink" title="MenuHandler方法"></a>MenuHandler方法</h4><p>查询节点信息，将节点的id和信息封装为map返回，最终返回根节点信息，则得到整棵树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/menu/get/whole/tree.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;Menu&gt; <span class="hljs-title">getWholeTreeNew</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 1.查询全部的Menu对象</span><br>    List&lt;Menu&gt; menuList = menuService.getAll();<br>    <span class="hljs-comment">// 2.申明一个变量来存储找到的一个根节点</span><br>    Menu root = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 3.创建 Map 对象用来存储 id 和 Menu 对象的对应关系便于查找父节点</span><br>    Map&lt;Integer, Menu&gt; menuMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 4.遍历 menuList 填充 menuMap</span><br>    <span class="hljs-keyword">for</span> (Menu menu : menuList) &#123;<br>        Integer id = menu.getId();<br>        menuMap.put(id, menu);<br>    &#125;<br>    <span class="hljs-comment">// 5.再次遍历 menuList 查找根节点、组装父子节点</span><br>    <span class="hljs-keyword">for</span> (Menu menu : menuList) &#123;<br>        <span class="hljs-comment">// 6.获取节点的父节点值</span><br>        Integer pid = menu.getPid();<br>        <span class="hljs-comment">// 7.判断父节点为空则为根节点</span><br>        <span class="hljs-keyword">if</span> (pid == <span class="hljs-keyword">null</span>) &#123;<br>            root = menu;<br>            <span class="hljs-comment">// 8.如果当前节点没有父节点，那肯定是根节点，不循环执行</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// 9.如果 pid 不为 null，说明当前节点有父节点，那么可以根据 pid 到 menuMap 中 查找对应的 Menu 对象</span><br>        Menu father = menuMap.get(pid);<br>        <span class="hljs-comment">// 10.将当前节点存入父节点的 children 集合</span><br>        father.getChildren().add(menu);<br>    &#125;<br>    <span class="hljs-comment">// 11.经过上面的运算，根节点包含了整个树形结构，返回根节点就是返回整个树</span><br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData(root);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service实现"><a href="#Service实现" class="headerlink" title="Service实现"></a>Service实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Menu&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> menuMapper.selectByExample(<span class="hljs-keyword">new</span> MenuExample());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="绑定单击事件-1"><a href="#绑定单击事件-1" class="headerlink" title="绑定单击事件"></a>绑定单击事件</h4><ul><li><p>绑定菜单维护单击事件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;menu/to/page.html&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-lock&quot;</span>&gt;&lt;/i&gt; 菜单维护&lt;/a&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置视图</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/menu/to/page.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;menu-page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="前端-4"><a href="#前端-4" class="headerlink" title="前端"></a>前端</h3><h4 id="引入ZTree和自定义的外部js文件"><a href="#引入ZTree和自定义的外部js文件" class="headerlink" title="引入ZTree和自定义的外部js文件"></a>引入ZTree和自定义的外部js文件</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;ztree/zTreeStyle.css&quot;</span>/&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;ztree/jquery.ztree.all-3.5.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;crowd/my-menu.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="menu主页面"><a href="#menu主页面" class="headerlink" title="menu主页面"></a>menu主页面</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-th-list&quot;</span>&gt;&lt;/i&gt; 权限菜单列表<br>            &lt;div style=<span class="hljs-string">&quot;float:right;cursor:pointer;&quot;</span> data-toggle=<span class="hljs-string">&quot;modal&quot;</span> data-target=<span class="hljs-string">&quot;#myModal&quot;</span>&gt;<br>                &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-question-sign&quot;</span>&gt;<br>                &lt;/i&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;<br>            &lt;ul id=<span class="hljs-string">&quot;treeDemo&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ztree&quot;</span>&gt;<br>                &lt;%-- 显示树形结构依附于上面的ul --%&gt;<br>            &lt;/ul&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="显示图标和按钮"><a href="#显示图标和按钮" class="headerlink" title="显示图标和按钮"></a>显示图标和按钮</h4><p>将显示图标和按钮封装为函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 显示图标</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myAddDiyDom</span>(<span class="hljs-params">treeId, treeNode</span>) </span>&#123;<br>    <span class="hljs-comment">// treeId就是树形结构依附的ul的id</span><br>    <span class="hljs-comment">// treeNode就是当前节点全部数据（包括后端查询得到的）</span><br><br>    <span class="hljs-comment">// 根据zTree中每一个图标span的id的规则：</span><br>    <span class="hljs-comment">// 如treeDemo_7_ico</span><br>    <span class="hljs-comment">// id结构就是ul的id_当前节点序号_ico（tId就是id_当前节点序号）</span><br>    <span class="hljs-comment">// 可以拼出每一个span的id：</span><br>    <span class="hljs-keyword">var</span> spanId = treeNode.tId + <span class="hljs-string">&quot;_ico&quot;</span>;<br>    <span class="hljs-comment">// 删除旧的class，增加新得到的class</span><br>    $(<span class="hljs-string">&quot;#&quot;</span>+spanId).removeClass().addClass(treeNode.icon);<br>&#125;<br><br><span class="hljs-comment">// 鼠标覆盖时，显示按钮组</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myAddHoverDom</span>(<span class="hljs-params">treeId, treeNode</span>) </span>&#123;<br>    <span class="hljs-comment">// 定义增加、修改、删除节点的标签字符串</span><br>    <span class="hljs-keyword">var</span> addBtn = <span class="hljs-string">&quot;&lt;a id=&#x27;&quot;</span>+treeNode.id+<span class="hljs-string">&quot;&#x27; class=&#x27;addBtn btn btn-info dropdown-toggle btn-xs&#x27; style=&#x27;margin-left:10px;padding-top:0px;&#x27; href=&#x27;#&#x27; title=&#x27;增加节点&#x27;&gt;&amp;nbsp;&amp;nbsp;&lt;i class=&#x27;fa fa-fw fa-plus rbg &#x27;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>;<br>    <span class="hljs-keyword">var</span> editBtn = <span class="hljs-string">&quot;&lt;a id=&#x27;&quot;</span>+treeNode.id+<span class="hljs-string">&quot;&#x27; class=&#x27;editBtn btn btn-info dropdown-toggle btn-xs&#x27; style=&#x27;margin-left:10px;padding-top:0px;&#x27; href=&#x27;#&#x27; title=&#x27;修改节点&#x27;&gt;&amp;nbsp;&amp;nbsp;&lt;i class=&#x27;fa fa-fw fa-edit rbg &#x27;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>;<br>    <span class="hljs-keyword">var</span> removeBtn = <span class="hljs-string">&quot;&lt;a id=&#x27;&quot;</span>+treeNode.id+<span class="hljs-string">&quot;&#x27; class=&#x27;removeBtn btn btn-info dropdown-toggle btn-xs&#x27; style=&#x27;margin-left:10px;padding-top:0px;&#x27; href=&#x27;#&#x27; title=&#x27;删除节点&#x27;&gt;&amp;nbsp;&amp;nbsp;&lt;i class=&#x27;fa fa-fw fa-times rbg &#x27;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>;<br><br>    <span class="hljs-comment">// btn用于存放不同的节点显示的不同的按钮</span><br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// 得到每个节点的level，根据level决定显示的按钮组的内容</span><br>    <span class="hljs-keyword">var</span> level = treeNode.level;<br><br>    <span class="hljs-comment">// 按照一定规则设置按钮组span的id</span><br>    <span class="hljs-keyword">var</span> btnGroupId = <span class="hljs-string">&quot;btnGroupTreeDemo_&quot;</span>+treeNode.id;<br><br>    <span class="hljs-comment">// 如果此时按钮组已经有内容了，则不再往下执行</span><br>    <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&quot;#&quot;</span>+btnGroupId).length &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据level决定按钮组内部显示的内容</span><br>    <span class="hljs-keyword">if</span> (level === <span class="hljs-number">0</span>)&#123;<br>        btn = addBtn;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (level === <span class="hljs-number">1</span>)&#123;<br>        btn = addBtn + editBtn;<br>        <span class="hljs-comment">// 判断是否子节点，有子节点则不显示删除按钮，没有子节点则显示删除按钮</span><br>        <span class="hljs-keyword">if</span> (treeNode.children.length === <span class="hljs-number">0</span>)&#123;<br>            btn = btn + removeBtn;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// level==3则显示删除按钮与修改按钮</span><br>        btn = editBtn+removeBtn;<br>    &#125;<br><br>    <span class="hljs-comment">// 拼接a标签的id（treeDemo_x_a）</span><br>    <span class="hljs-keyword">var</span> aId = treeNode.tId + <span class="hljs-string">&quot;_a&quot;</span>;<br><br>    <span class="hljs-comment">// 根据id，在a标签后加按钮组</span><br>    $(<span class="hljs-string">&quot;#&quot;</span>+aId).after(<span class="hljs-string">&quot;&lt;span id=&#x27;&quot;</span>+btnGroupId+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+btn+<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">// 鼠标移开时，隐藏按钮组</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myRemoveHoverDom</span>(<span class="hljs-params">treeId, treeNode</span>) </span>&#123;<br>    <span class="hljs-comment">// 按钮组span的id</span><br>    <span class="hljs-keyword">var</span> btnGroupId = <span class="hljs-string">&quot;btnGroupTreeDemo_&quot;</span>+treeNode.id;<br>    <span class="hljs-comment">// 删除此id的标签</span><br>    $(<span class="hljs-string">&quot;#&quot;</span>+btnGroupId).remove();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成树形结构"><a href="#生成树形结构" class="headerlink" title="生成树形结构"></a>生成树形结构</h4><ul><li><p>将树形结构生成封装为外部js的函数，方便调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装生成树形结构的代码</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateTree</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;menu/get/whole/tree.json&quot;</span>,<br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>)&#123;<br>                <span class="hljs-comment">// 成功 则设置下列属性\</span><br>                <span class="hljs-keyword">var</span> setting = &#123;<br>                    <span class="hljs-attr">view</span>:&#123;<br>                        <span class="hljs-comment">// 设置每一个标签的图标</span><br>                        <span class="hljs-string">&quot;addDiyDom&quot;</span>:myAddDiyDom,<br>                        <span class="hljs-comment">// 设置悬浮在标签上时的函数</span><br>                        <span class="hljs-string">&quot;addHoverDom&quot;</span>:myAddHoverDom,<br>                        <span class="hljs-comment">// 设置从标签上移除时的函数</span><br>                        <span class="hljs-string">&quot;removeHoverDom&quot;</span>:myRemoveHoverDom<br>                    &#125;,<br>                    <span class="hljs-attr">data</span>:&#123;<br>                        <span class="hljs-attr">key</span>:&#123;<br>                            <span class="hljs-comment">// 实现“点了不跑”，也就是设置了这里的url后，会根据该url去寻找页面，如果页面找不到，则不跳转</span><br>                            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                                  zTree 节点数据保存节点链接的目标 URL 的属性名称。</span><br><span class="hljs-comment">                               特殊用途：当后台数据只能生成 url 属性，又不想实现点击节点跳转的功能时，可以直接修改此属性为其他不存在的属性名称</span><br><span class="hljs-comment">                                默认值：&quot;url&quot;</span><br><span class="hljs-comment">                            */</span><br>                            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;None&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;;<br>                <span class="hljs-comment">// 通过response得到data，就是后端传来的查询结构</span><br>                <span class="hljs-keyword">var</span> zNodes = response.data;<br>                <span class="hljs-comment">// 执行zTree的初始化函数，传参分别是依附的ul的id（通过jQuery选择器）、setting变量、查询到的树形结构</span><br>                $.fn.zTree.init($(<span class="hljs-string">&quot;#treeDemo&quot;</span>), setting, zNodes);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>)<br>                layer.msg(<span class="hljs-string">&quot;操作失败&quot;</span>+response.message)<br>        &#125;,<br>        <span class="hljs-attr">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            layer.msg(<span class="hljs-string">&quot;statusCode=&quot;</span>+response.status + <span class="hljs-string">&quot; message=&quot;</span>+response.statusText);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>menu页面调用生成函数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(function () &#123;<br>       generateTree();<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><h3 id="目标-15"><a href="#目标-15" class="headerlink" title="目标"></a>目标</h3><p>给当前节点添加子节点，保存到数据库，并刷新页面的显示</p><h3 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220117112316033.png" alt="image-20220117112316033"></p><h3 id="前端-5"><a href="#前端-5" class="headerlink" title="前端"></a>前端</h3><h4 id="引入模态框"><a href="#引入模态框" class="headerlink" title="引入模态框"></a>引入模态框</h4><p>记得刷新工程</p><p><img src="/img/atcrowdfunding.assets/image-20220117121954877.png" alt="image-20220117121954877"></p><h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><p>方便通过选择器找到节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> addBtn = <span class="hljs-string">&quot;&lt;a id=&#x27;&quot;</span>+treeNode.id+<span class="hljs-string">&quot;&#x27; class=&#x27;addBtn btn btn-info dropdown-toggle btn-xs&#x27; style=&#x27;margin-left:10px;padding-top:0px;&#x27; href=&#x27;#&#x27; title=&#x27;增加节点&#x27;&gt;&amp;nbsp;&amp;nbsp;&lt;i class=&#x27;fa fa-fw fa-plus rbg &#x27;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>;<br><span class="hljs-keyword">var</span> editBtn = <span class="hljs-string">&quot;&lt;a id=&#x27;&quot;</span>+treeNode.id+<span class="hljs-string">&quot;&#x27; class=&#x27;editBtn btn btn-info dropdown-toggle btn-xs&#x27; style=&#x27;margin-left:10px;padding-top:0px;&#x27; href=&#x27;#&#x27; title=&#x27;修改节点&#x27;&gt;&amp;nbsp;&amp;nbsp;&lt;i class=&#x27;fa fa-fw fa-edit rbg &#x27;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>;<br><span class="hljs-keyword">var</span> removeBtn = <span class="hljs-string">&quot;&lt;a id=&#x27;&quot;</span>+treeNode.id+<span class="hljs-string">&quot;&#x27; class=&#x27;removeBtn btn btn-info dropdown-toggle btn-xs&#x27; style=&#x27;margin-left:10px;padding-top:0px;&#x27; href=&#x27;#&#x27; title=&#x27;删除节点&#x27;&gt;&amp;nbsp;&amp;nbsp;&lt;i class=&#x27;fa fa-fw fa-times rbg &#x27;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="点击添加按钮"><a href="#点击添加按钮" class="headerlink" title="点击添加按钮"></a>点击添加按钮</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给“+”按钮，添加单击响应函数，打开添加节点的模态框</span><br>$(<span class="hljs-string">&quot;#treeDemo&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.addBtn&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 将当前按钮的id保存为全局变量pid，方便后面调用</span><br>    <span class="hljs-built_in">window</span>.pid = <span class="hljs-built_in">this</span>.id;<br>    <span class="hljs-comment">// 打开模态框</span><br>    $(<span class="hljs-string">&quot;#menuAddModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br>    <span class="hljs-comment">// 关闭默认跳转行为</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="点击保存按钮"><a href="#点击保存按钮" class="headerlink" title="点击保存按钮"></a>点击保存按钮</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加节点模态框中保存按钮的单击事件</span><br>$(<span class="hljs-string">&quot;#menuSaveBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 从输入框中获得name，并去掉前后空格</span><br>    <span class="hljs-keyword">var</span> name = $.trim($(<span class="hljs-string">&quot;#menuAddModal [name=name]&quot;</span>).val());<br>    <span class="hljs-comment">// 从输入框中获得url，并去掉前后空格</span><br>    <span class="hljs-keyword">var</span> url = $.trim($(<span class="hljs-string">&quot;#menuAddModal [name=url]&quot;</span>).val());<br>    <span class="hljs-comment">// 下面的选项中获得被选中的icon的值</span><br>    <span class="hljs-keyword">var</span> icon = $(<span class="hljs-string">&quot;#menuAddModal [name=icon]:checked&quot;</span>).val();<br><br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;menu/save.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>            <span class="hljs-attr">name</span>: name,<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">icon</span>: icon,<br>            <span class="hljs-comment">// 从全局变量获得该节点的父节点id</span><br>            <span class="hljs-attr">pid</span>: <span class="hljs-built_in">window</span>.pid<br>        &#125;,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br><br>                <span class="hljs-comment">// 重新生成树形结构</span><br>                generateTree();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作失败！&quot;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            layer.msg(response.status + <span class="hljs-string">&quot; &quot;</span> + response.statusText);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 关闭模态框</span><br>    $(<span class="hljs-string">&quot;#menuAddModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br><br>    <span class="hljs-comment">// 清空模态框内的数据(通过模拟用户单击“重置”按钮)</span><br>    $(<span class="hljs-string">&quot;#menuResetBtn&quot;</span>).click();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="后端-4"><a href="#后端-4" class="headerlink" title="后端"></a>后端</h3><h4 id="Handler方法-3"><a href="#Handler方法-3" class="headerlink" title="Handler方法"></a>Handler方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/menu/save.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveMenu</span><span class="hljs-params">(Menu menu)</span> </span>&#123;<br>    menuService.saveMenu(menu);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service实现-1"><a href="#Service实现-1" class="headerlink" title="Service实现"></a>Service实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMenu</span><span class="hljs-params">(Menu menu)</span> </span>&#123;<br>    menuMapper.insert(menu);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h2><h3 id="目标-16"><a href="#目标-16" class="headerlink" title="目标"></a>目标</h3><p>修改当前节点的基本属性，不更换父节点 </p><h3 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220117121844546.png" alt="image-20220117121844546"></p><h3 id="前端-6"><a href="#前端-6" class="headerlink" title="前端"></a>前端</h3><h4 id="修改模态框的引入-1"><a href="#修改模态框的引入-1" class="headerlink" title="修改模态框的引入"></a>修改模态框的引入</h4><p>使用ztree提供的根据id查找结点方式getNodeByParam</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 动态生成的修改按钮，单击打开修改的模态框</span><br>$(<span class="hljs-string">&quot;#treeDemo&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.editBtn&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">// 保存此按钮的id</span><br>    <span class="hljs-built_in">window</span>.id = <span class="hljs-built_in">this</span>.id;<br><br>    $(<span class="hljs-string">&quot;#menuEditModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br><br>    <span class="hljs-comment">// 要实现通过id拿到整个节点的信息，需要拿到zTreeObj</span><br>    <span class="hljs-keyword">var</span> zTreeObj = $.fn.zTree.getZTreeObj(<span class="hljs-string">&quot;treeDemo&quot;</span>);<br><br>    <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;id&quot;</span>;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">window</span>.id;<br><br>    <span class="hljs-comment">// getNodeByParam，通过id得到当前的整个节点</span><br>    <span class="hljs-comment">// 注意：id为treeNode的id，返回的就是那个treeNode</span><br>    <span class="hljs-keyword">var</span> currentNode = zTreeObj.getNodeByParam(key, value);<br><br>    $(<span class="hljs-string">&quot;#menuEditModal [name=name]&quot;</span>).val(currentNode.name);<br><br>    $(<span class="hljs-string">&quot;#menuEditModal [name=url]&quot;</span>).val(currentNode.url);<br><br>    <span class="hljs-comment">// 这里currentNode.icon其实是数组形式，利用这个值，放在[]中，传回val，就可以使相匹配的值回显在模态框中</span><br>    $(<span class="hljs-string">&quot;#menuEditModal [name=icon]&quot;</span>).val([currentNode.icon]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="绑定更新按钮的单击事件"><a href="#绑定更新按钮的单击事件" class="headerlink" title="绑定更新按钮的单击事件"></a>绑定更新按钮的单击事件</h4><p>ajax传入修改的节点的id，而不是pid，获取icon时应该选取checked中的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新节点模态框中保存按钮的单击事件</span><br>$(<span class="hljs-string">&quot;#menuEditBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> name = $(<span class="hljs-string">&quot;#menuEditModal [name=name]&quot;</span>).val();<br><br>    <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">&quot;#menuEditModal [name=url]&quot;</span>).val();<br><br>    <span class="hljs-keyword">var</span> icon = $(<span class="hljs-string">&quot;#menuEditModal [name=icon]:checked&quot;</span>).val();<br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;menu/update.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>            <span class="hljs-attr">name</span>: name,<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">icon</span>: icon,<br>            <span class="hljs-comment">// 从全局变量获得该节点的节点id</span><br>            <span class="hljs-attr">id</span>: <span class="hljs-built_in">window</span>.id<br>        &#125;,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br><br>                <span class="hljs-comment">// 重新生成树形结构</span><br>                generateTree();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作失败！&quot;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            layer.msg(response.status + <span class="hljs-string">&quot; &quot;</span> + response.statusText);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 关闭模态框</span><br>    $(<span class="hljs-string">&quot;#menuEditModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="后端-5"><a href="#后端-5" class="headerlink" title="后端"></a>后端</h3><h4 id="Handler方法-4"><a href="#Handler方法-4" class="headerlink" title="Handler方法"></a>Handler方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/menu/update.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">updateMenu</span><span class="hljs-params">(Menu menu)</span></span>&#123;<br>    menuService.updateMenu(menu);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service的实现"><a href="#Service的实现" class="headerlink" title="Service的实现"></a>Service的实现</h4><p>有选择的进行更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMenu</span><span class="hljs-params">(Menu menu)</span> </span>&#123;<br>    menuMapper.updateByPrimaryKeySelective(menu);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><h3 id="目标-17"><a href="#目标-17" class="headerlink" title="目标"></a>目标</h3><p>删除当前节点</p><h3 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220117134313794.png" alt="image-20220117134313794"></p><h3 id="前端-7"><a href="#前端-7" class="headerlink" title="前端"></a>前端</h3><h4 id="删除静态框的引入"><a href="#删除静态框的引入" class="headerlink" title="删除静态框的引入"></a>删除静态框的引入</h4><p>主要通过获取当前节点来回显提示信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 动态生成的删除按钮，单击打开删除的模态框</span><br>$(<span class="hljs-string">&quot;#treeDemo&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.removeBtn&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">// 保存此按钮的id</span><br>    <span class="hljs-built_in">window</span>.id = <span class="hljs-built_in">this</span>.id;<br><br>    $(<span class="hljs-string">&quot;#menuConfirmModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br><br>    <span class="hljs-comment">// 要实现通过id拿到整个节点的信息，需要拿到zTreeObj</span><br>    <span class="hljs-keyword">var</span> zTreeObj = $.fn.zTree.getZTreeObj(<span class="hljs-string">&quot;treeDemo&quot;</span>);<br><br>    <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;id&quot;</span>;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">window</span>.id;<br><br>    <span class="hljs-comment">// getNodeByParam，通过id得到当前的整个节点</span><br>    <span class="hljs-comment">// 注意：id为treeNode的id，返回的就是那个treeNode</span><br>    <span class="hljs-keyword">var</span> currentNode = zTreeObj.getNodeByParam(key, value);<br><br>    <span class="hljs-comment">// 获取当前节点的icon和name来作为提示信息</span><br>    <span class="hljs-keyword">var</span> icon = currentNode.icon;<br>    <span class="hljs-keyword">var</span> name = currentNode.name;<br><br>    <span class="hljs-comment">// 回显-向id=removeNodeSpan的span标签添加html语句（显示图标与节点名）</span><br>    $(<span class="hljs-string">&quot;#removeNodeSpan&quot;</span>).html(<span class="hljs-string">&quot;【&lt;i class=&#x27;&quot;</span>+icon+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+name+<span class="hljs-string">&quot;】&lt;/i&gt;&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="绑定确定删除单击事件"><a href="#绑定确定删除单击事件" class="headerlink" title="绑定确定删除单击事件"></a>绑定确定删除单击事件</h4><p>只需传入当前节点的id，根据id进行删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除节点模态框中确定按钮的单击事件</span><br>$(<span class="hljs-string">&quot;#confirmBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> name = $(<span class="hljs-string">&quot;#menuEditModal [name=name]&quot;</span>).val();<br><br>    <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">&quot;#menuEditModal [name=url]&quot;</span>).val();<br><br>    <span class="hljs-keyword">var</span> icon = $(<span class="hljs-string">&quot;#menuEditModal [name=icon]:checked&quot;</span>).val();<br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;menu/remove.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>            <span class="hljs-comment">// 从全局变量获得该节点的节点id</span><br>            <span class="hljs-attr">id</span>: <span class="hljs-built_in">window</span>.id<br>        &#125;,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br><br>                <span class="hljs-comment">// 重新生成树形结构</span><br>                generateTree();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>) &#123;<br>                layer.msg(<span class="hljs-string">&quot;操作失败！&quot;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            layer.msg(response.status + <span class="hljs-string">&quot; &quot;</span> + response.statusText);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 关闭模态框</span><br>    $(<span class="hljs-string">&quot;#menuConfirmModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="后端-6"><a href="#后端-6" class="headerlink" title="后端"></a>后端</h3><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>将@RestController替换@ResponseBody和@Controller</p><h4 id="Handler方法-5"><a href="#Handler方法-5" class="headerlink" title="Handler方法"></a>Handler方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/menu/remove.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">removeMenu</span><span class="hljs-params">(Integer id)</span></span>&#123;<br>    menuService.remove(id);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service实现-2"><a href="#Service实现-2" class="headerlink" title="Service实现"></a>Service实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    menuMapper.deleteByPrimaryKey(id);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/img/atcrowdfunding.assets/image-20220117143627760.png" alt="image-20220117143627760"></p><h2 id="Admin分配Role"><a href="#Admin分配Role" class="headerlink" title="Admin分配Role"></a>Admin分配Role</h2><h3 id="目标-18"><a href="#目标-18" class="headerlink" title="目标"></a>目标</h3><p>通过页面操作把Admin和Role之间的关联关系保存到数据库</p><h3 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220117145438323.png" alt="image-20220117145438323"></p><h3 id="后端-7"><a href="#后端-7" class="headerlink" title="后端"></a>后端</h3><h4 id="替换button为a标签"><a href="#替换button为a标签" class="headerlink" title="替换button为a标签"></a>替换button为a标签</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;assign/to/page.html?adminId=$&#123;admin.id&#125;&amp;pageNum=$&#123;requestScope.pageInfo.pageNum&#125;&amp;keyword=$&#123;param.keyword&#125;&quot;</span><br>   <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-success btn-xs&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot; glyphicon glyphicon-check&quot;</span>&gt;&lt;/i&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure><h4 id="Handler方法-6"><a href="#Handler方法-6" class="headerlink" title="Handler方法"></a>Handler方法</h4><p>分别将已分配角色和未分配角色都传入model中，则不用前端判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/assign/to/page.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toAssignPage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;adminId&quot;)</span> Integer adminId,</span></span><br><span class="hljs-params"><span class="hljs-function">        ModelMap modelMap</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br>    <span class="hljs-comment">// 查询已分配角色</span><br>    List&lt;Role&gt; assignRoleList = roleService.getAssignedRole(adminId);<br>    <span class="hljs-comment">// 查询未分配的角色</span><br>    List&lt;Role&gt; unAssignRoleList = roleService.getUnAssignedRole(adminId);<br>    <span class="hljs-comment">// 存入模型</span><br>    modelMap.addAttribute(<span class="hljs-string">&quot;assignRoleList&quot;</span>, assignRoleList);<br>    modelMap.addAttribute(<span class="hljs-string">&quot;unAssignRoleList&quot;</span>, unAssignRoleList);<br>    <span class="hljs-comment">// 转发到assign-role</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;assign-role&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service实现-3"><a href="#Service实现-3" class="headerlink" title="Service实现"></a>Service实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getAssignedRole</span><span class="hljs-params">(Integer adminId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> roleMapper.selectAssignedRoleList(adminId);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getUnAssignedRole</span><span class="hljs-params">(Integer adminId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> roleMapper.selectUnAssignedRoleList(adminId);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><p>使用子查询，在查询已分配和未分配较方便</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询已经分配的角色 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAssignedRoleList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>  select id,name from t_role where id in (select role_id from inner_admin_role where admin_id=#&#123;adminId&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 查询未分配的角色 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUnAssignedRoleList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>  select id,name from t_role where id not in (select role_id from inner_admin_role where admin_id=#&#123;adminId&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="前端-8"><a href="#前端-8" class="headerlink" title="前端"></a>前端</h3><h4 id="页面角色显示"><a href="#页面角色显示" class="headerlink" title="页面角色显示"></a>页面角色显示</h4><p>assign-role.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main&quot;</span>&gt;<br>    &lt;ol <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;<br>        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;首页&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;数据列表&lt;/a&gt;&lt;/li&gt;<br>        &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;active&quot;</span>&gt;分配角色&lt;/li&gt;<br>    &lt;/ol&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;<br>            &lt;form action=<span class="hljs-string">&quot;assign/do/assign.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;<br>                &lt;!--隐藏域保存不会改变的adminId、pageNum、keyword，在提交时一起传给后端--&gt;<br>                &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.adminId&#125;&quot;</span> name=<span class="hljs-string">&quot;adminId&quot;</span>/&gt;<br>                &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.pageNum&#125;&quot;</span> name=<span class="hljs-string">&quot;pageNum&quot;</span>/&gt;<br>                &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.keyword&#125;&quot;</span> name=<span class="hljs-string">&quot;keyword&quot;</span>/&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;未分配角色列表&lt;/label&gt;&lt;br&gt;<br>                    &lt;select <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> multiple=<span class="hljs-string">&quot;&quot;</span> size=<span class="hljs-string">&quot;10&quot;</span> style=<span class="hljs-string">&quot;width:100px;overflow-y:auto;&quot;</span>&gt;<br>                        &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.unAssignRoleList&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;role&quot;</span>&gt;<br>                            &lt;option value=<span class="hljs-string">&quot;$&#123;role.id&#125;&quot;</span>&gt;$&#123;role.name&#125;&lt;/option&gt;<br>                        &lt;/c:forEach&gt;<br>                    &lt;/select&gt;<br>                &lt;/div&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                    &lt;ul&gt;<br>                        &lt;li id=<span class="hljs-string">&quot;toRightBtn&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-default glyphicon glyphicon-chevron-right&quot;</span>&gt;&lt;/li&gt;<br>                        &lt;br&gt;<br>                        &lt;li id=<span class="hljs-string">&quot;toLeftBtn&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-default glyphicon glyphicon-chevron-left&quot;</span> style=<span class="hljs-string">&quot;margin-top:20px;&quot;</span>&gt;&lt;/li&gt;<br>                    &lt;/ul&gt;<br>                &lt;/div&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span> style=<span class="hljs-string">&quot;margin-left:40px;&quot;</span>&gt;<br>                    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;已分配角色列表&lt;/label&gt;&lt;br&gt;<br>                    &lt;!-- 被选中要分配的部分，name设置为roleIdList --&gt;<br>                    &lt;select name=<span class="hljs-string">&quot;roleIdList&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> multiple=<span class="hljs-string">&quot;&quot;</span> size=<span class="hljs-string">&quot;10&quot;</span> style=<span class="hljs-string">&quot;width:100px;overflow-y:auto;&quot;</span>&gt;<br>                        &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.assignRoleList&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;role&quot;</span>&gt;<br>                            &lt;option value=<span class="hljs-string">&quot;$&#123;role.id&#125;&quot;</span>&gt;$&#123;role.name&#125;&lt;/option&gt;<br>                        &lt;/c:forEach&gt;<br>                    &lt;/select&gt;<br>                &lt;/div&gt;<br>                &lt;button id=<span class="hljs-string">&quot;submitBtn&quot;</span> type=<span class="hljs-string">&quot;submit&quot;</span> style=<span class="hljs-string">&quot;width:100px;margin-top: 20px;margin-left: 230px;&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-sm btn-success btn-block&quot;</span>&gt;提交&lt;/button&gt;<br>            &lt;/form&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="点击按钮分配角色"><a href="#点击按钮分配角色" class="headerlink" title="点击按钮分配角色"></a>点击按钮分配角色</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 点击右箭头，将左边角色追加在右边</span><br>        $(<span class="hljs-string">&quot;#toRightBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;select:eq(0)&gt;option:selected&quot;</span>).appendTo(<span class="hljs-string">&quot;select:eq(1)&quot;</span>);<br>        &#125;);<br>        <span class="hljs-comment">// 点击左箭头，将右边角色追加在右边</span><br>        $(<span class="hljs-string">&quot;#toLeftBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;select:eq(1)&gt;option:selected&quot;</span>).appendTo(<span class="hljs-string">&quot;select:eq(0)&quot;</span>);<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="Admin执行分配"><a href="#Admin执行分配" class="headerlink" title="Admin执行分配"></a>Admin执行分配</h2><h3 id="目标-19"><a href="#目标-19" class="headerlink" title="目标"></a>目标</h3><p>点击保存，将角色保存在数据库中</p><h3 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220118100122954.png" alt="image-20220118100122954"></p><h3 id="前端-9"><a href="#前端-9" class="headerlink" title="前端"></a>前端</h3><h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><p>表单需要设置隐藏域，来定位pageNum和keyword以及获取正在执行的adminId</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;assign/do/role/assign.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;<br>                        &lt;!--隐藏域保存不会改变的adminId、pageNum、keyword，在提交时一起传给后端--&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.adminId&#125;&quot;</span> name=<span class="hljs-string">&quot;adminId&quot;</span>/&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.pageNum&#125;&quot;</span> name=<span class="hljs-string">&quot;pageNum&quot;</span>/&gt;<br>                        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.keyword&#125;&quot;</span> name=<span class="hljs-string">&quot;keyword&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h4 id="完善表单"><a href="#完善表单" class="headerlink" title="完善表单"></a>完善表单</h4><p>让右边没有选中的角色全部选中，提交表单时才不会遗漏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 让右边框中元素全部为选中，提交表单则全部提交</span><br>$(<span class="hljs-string">&quot;#submitBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;select:eq(1)&gt;option&quot;</span>).prop(<span class="hljs-string">&quot;selected&quot;</span>,<span class="hljs-string">&quot;selected&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="后端-8"><a href="#后端-8" class="headerlink" title="后端"></a>后端</h3><h4 id="Handler方法-7"><a href="#Handler方法-7" class="headerlink" title="Handler方法"></a>Handler方法</h4><p>在获取roleIdList时，允许为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/assign/do/role/assign.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveAdminRoleRelationship</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(value = &quot;adminId&quot;)</span> Integer adminId,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;keyword&quot;)</span> String keyword,</span></span><br><span class="hljs-params"><span class="hljs-function">        // 管理员可以没有权限，所以可以设置roleId可以为空</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(value = &quot;roleIdList&quot;,required = false)</span> List&lt;Integer&gt; roleIdList,</span></span><br><span class="hljs-params"><span class="hljs-function">        ModelMap modelMap</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>&#123;<br><br>    <span class="hljs-comment">// 调用service层方法</span><br>    adminService.saveAdminRoleRelationship(adminId, roleIdList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/get/page.html?pageNum=&quot;</span>+pageNum+<span class="hljs-string">&quot;&amp;keyword=&quot;</span>+keyword;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service实现-4"><a href="#Service实现-4" class="headerlink" title="Service实现"></a>Service实现</h4><p>由于单个删除浪费时间，可以先将adminId的角色全部删除后再插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveAdminRoleRelationship</span><span class="hljs-params">(Integer adminId, List&lt;Integer&gt; roleIdList)</span> </span>&#123;<br>    <span class="hljs-comment">// 为了简化操作：先将adminId的角色全部删除</span><br>    adminMapper.deleteOldRelationship(adminId);<br>    <span class="hljs-comment">// 根据roleIdList和adminId保存新的关系</span><br>    <span class="hljs-keyword">if</span>(roleIdList!=<span class="hljs-keyword">null</span>&amp;&amp;roleIdList.size()&gt;=<span class="hljs-number">0</span>)&#123;<br>        adminMapper.saveNewRelationship(adminId,roleIdList);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="AdminMapper接口"><a href="#AdminMapper接口" class="headerlink" title="AdminMapper接口"></a>AdminMapper接口</h4><p>AminMapper接口定义方法，自定义sql进行删除和插入，使用@Param注解，在sql中会使用到参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteOldRelationship</span><span class="hljs-params">(Integer adminId)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveNewRelationship</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;adminId&quot;)</span> Integer adminId,<span class="hljs-meta">@Param(&quot;roleIdList&quot;)</span> List&lt;Integer&gt; roleIdList)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="sql语句-1"><a href="#sql语句-1" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">delete</span> id<span class="hljs-operator">=</span>&quot;deleteOldRelationship&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> inner_admin_role <span class="hljs-keyword">where</span> admin_id<span class="hljs-operator">=</span>#&#123;adminId&#125;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;saveNewRelationship&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> inner_admin_role(admin_id,role_id) <span class="hljs-keyword">values</span><br>    <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;roleIdList&quot; item<span class="hljs-operator">=</span>&quot;roleId&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span><br>         (#&#123;adminId&#125;,#&#123;roleId&#125;)<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Role分配Auth"><a href="#Role分配Auth" class="headerlink" title="Role分配Auth"></a>Role分配Auth</h2><h3 id="目标-20"><a href="#目标-20" class="headerlink" title="目标"></a>目标</h3><p>把角色和权限的关联保存到数据库</p><h3 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220118115150368.png" alt="image-20220118115150368"></p><h3 id="创建权限表"><a href="#创建权限表" class="headerlink" title="创建权限表"></a>创建权限表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建t_auth表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_auth (<br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>title <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>category_id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><br><span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><br># 给t_auth表插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;用户模块&#x27;</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;user:delete&#x27;</span>,<span class="hljs-string">&#x27;删除&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;user:get&#x27;</span>,<span class="hljs-string">&#x27;查询&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;角色模块&#x27;</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;role:delete&#x27;</span>,<span class="hljs-string">&#x27;删除&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;role:get&#x27;</span>,<span class="hljs-string">&#x27;查询&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_auth(id,`name`,title,category_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;role:add&#x27;</span>,<span class="hljs-string">&#x27;新增&#x27;</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><h3 id="逆向工程-2"><a href="#逆向工程-2" class="headerlink" title="逆向工程"></a>逆向工程</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_auth&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Auth&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>生成实体类后，添加有参和无参构造器，将各文件放在各自包中，最后创建AuthService接口和实现类</p><h3 id="前端-10"><a href="#前端-10" class="headerlink" title="前端"></a>前端</h3><h4 id="给按钮添加class和id值"><a href="#给按钮添加class和id值" class="headerlink" title="给按钮添加class和id值"></a>给按钮添加class和id值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> checkBtn = <span class="hljs-string">&quot;&lt;button id=&#x27;&quot;</span> + roleId + <span class="hljs-string">&quot;&#x27; type=&#x27;button&#x27; class=&#x27;btn btn-success btn-xs checkBtn&#x27;&gt;&lt;i class=&#x27; glyphicon glyphicon-check&#x27;&gt;&lt;/i&gt;&lt;/button&gt;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="模态框的引入"><a href="#模态框的引入" class="headerlink" title="模态框的引入"></a>模态框的引入</h4><ul><li><p>modal-role-assign-auth.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;div id=<span class="hljs-string">&quot;assignModal&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal fade&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;<br>                &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span><br>                        aria-label=<span class="hljs-string">&quot;Close&quot;</span>&gt;<br>                    &lt;span aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&amp;times;&lt;/span&gt;<br>                &lt;/button&gt;<br>                &lt;h4 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;尚筹网-角色权限分配&lt;/h4&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>                &lt;ul id=<span class="hljs-string">&quot;authTreeDemo&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ztree&quot;</span>&gt;&lt;/ul&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>                &lt;button id=<span class="hljs-string">&quot;assignBtn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;好的，我设置好了！执行分配！&lt;/button&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>静态资源引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/WEB-INF/modal-role-assign-auth.jsp&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="弹出模态框"><a href="#弹出模态框" class="headerlink" title="弹出模态框"></a>弹出模态框</h4><p>将生成树形结构封装为函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 弹出权限分配静态框</span><br>$(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.checkBtn&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 打开模态框</span><br>    $(<span class="hljs-string">&quot;#assignModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br>    <span class="hljs-comment">// 生成树形结构</span><br>    fullAuthTree();<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="生成树形结构的函数"><a href="#生成树形结构的函数" class="headerlink" title="生成树形结构的函数"></a>生成树形结构的函数</h4><p>处理树形结构不同于菜单维护，使用zTree的简单json数据来显示，而不是后台将数据封装好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 生成权限分配树形结构</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fullAuthTree</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 发送Ajax请求查询Auth数据</span><br>    <span class="hljs-keyword">var</span> ajaxReturn = $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;assign/get/all/auth.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span><br>    &#125;);<br><br>    <span class="hljs-keyword">if</span> (ajaxReturn.status != <span class="hljs-number">200</span>)&#123;<br>        layer.msg(<span class="hljs-string">&quot;请求出错！错误码：&quot;</span>+ ajaxReturn.status + <span class="hljs-string">&quot;错误信息：&quot;</span> + ajaxReturn.statusText);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> resultEntity = ajaxReturn.responseJSON;<br><br>    <span class="hljs-keyword">if</span> (resultEntity.result == <span class="hljs-string">&quot;FAILED&quot;</span>)&#123;<br>        layer.msg(<span class="hljs-string">&quot;操作失败！&quot;</span>+resultEntity.message);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (resultEntity.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>        <span class="hljs-keyword">var</span> authList = resultEntity.data;<br>        <span class="hljs-comment">// 将服务端查询到的list交给zTree自己组装</span><br>        <span class="hljs-keyword">var</span> setting = &#123;<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-comment">// 开启简单JSON功能</span><br>                <span class="hljs-attr">simpleData</span>: &#123;<br>                    <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-comment">// 通过pIdKey属性设置父节点的属性名，而不使用默认的pId</span><br>                    <span class="hljs-attr">pIdKey</span>: <span class="hljs-string">&quot;categoryId&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">key</span>: &#123;<br>                    <span class="hljs-comment">// 设置在前端显示的节点名是查询到的title，而不是使用默认的name</span><br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;title&quot;</span><br>                &#125;,<br>            &#125;,<br><br>            <span class="hljs-attr">check</span>: &#123;<br>                <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 生成树形结构信息</span><br>        $.fn.zTree.init($(<span class="hljs-string">&quot;#authTreeDemo&quot;</span>), setting, authList);<br><br>        <span class="hljs-comment">// 设置节点默认是展开的</span><br>        <span class="hljs-comment">// 1 得到zTreeObj</span><br>        <span class="hljs-keyword">var</span> zTreeObj = $.fn.zTree.getZTreeObj(<span class="hljs-string">&quot;authTreeDemo&quot;</span>);<br>        <span class="hljs-comment">// 2 设置默认展开</span><br>        zTreeObj.expandAll(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后端-9"><a href="#后端-9" class="headerlink" title="后端"></a>后端</h3><h4 id="Handler方法-8"><a href="#Handler方法-8" class="headerlink" title="Handler方法"></a>Handler方法</h4><p>获取所有Auth并封装在List，以json数据返回，方便调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/assign/get/all/auth.json&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;List&lt;Auth&gt;&gt; getAllAuth()&#123;<br>    List&lt;Auth&gt; authList = authService.getAllAuth();<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData(authList);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AuthService实现"><a href="#AuthService实现" class="headerlink" title="AuthService实现"></a>AuthService实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Auth&gt; <span class="hljs-title">getAllAuth</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> authMapper.selectByExample(<span class="hljs-keyword">new</span> AuthExample());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Role回显Auth"><a href="#Role回显Auth" class="headerlink" title="Role回显Auth"></a>Role回显Auth</h2><h3 id="目标-21"><a href="#目标-21" class="headerlink" title="目标"></a>目标</h3><p>生成模态框后，自动发送Ajax请求，并回显在复选框上</p><h3 id="思路-21"><a href="#思路-21" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220118155508792.png" alt="image-20220118155508792"></p><h3 id="前端-11"><a href="#前端-11" class="headerlink" title="前端"></a>前端</h3><h4 id="保存roleId"><a href="#保存roleId" class="headerlink" title="保存roleId"></a>保存roleId</h4><p>方便传入roleId查找Auth来回显</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 弹出权限分配静态框</span><br>$(<span class="hljs-string">&quot;#rolePageTBody&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.checkBtn&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.roleId = <span class="hljs-built_in">this</span>.id;<br>    <span class="hljs-comment">// 打开模态框</span><br>    $(<span class="hljs-string">&quot;#assignModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br>    <span class="hljs-comment">// 生成树形结构</span><br>    fullAuthTree();<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="回显Auth复选框"><a href="#回显Auth复选框" class="headerlink" title="回显Auth复选框"></a>回显Auth复选框</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 回显权限信息</span><br>ajaxReturn = $.ajax(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;assign/get/assigned/auth/id/by/role/id.json&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">roleId</span>: <span class="hljs-built_in">window</span>.roleId<br>    &#125;,<br>    <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br><span class="hljs-keyword">if</span> (ajaxReturn.status != <span class="hljs-number">200</span>) &#123;<br>    layer.msg(<span class="hljs-string">&quot;请求出错！错误码：&quot;</span> + ajaxReturn.status + <span class="hljs-string">&quot;错误信息：&quot;</span> + ajaxReturn.statusText);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取返回的json信息</span><br>resultEntity = ajaxReturn.responseJSON;<br><br><span class="hljs-keyword">if</span> (resultEntity.result == <span class="hljs-string">&quot;FAILED&quot;</span>) &#123;<br>    layer.msg(<span class="hljs-string">&quot;操作失败！&quot;</span> + resultEntity.message);<br>&#125;<br><br><span class="hljs-keyword">if</span> (resultEntity.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>) &#123;<br>    <span class="hljs-keyword">var</span> authIdArray = resultEntity.data;<br><br>    <span class="hljs-comment">// 遍历得到的autoId的数组</span><br>    <span class="hljs-comment">// 根据authIdArray勾选对应的节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; authIdArray.length; i++) &#123;<br>        <span class="hljs-keyword">var</span> authId = authIdArray[i];<br><br>        <span class="hljs-comment">// 通过id得到treeNode</span><br>        <span class="hljs-keyword">var</span> treeNode = zTreeObj.getNodeByParam(<span class="hljs-string">&quot;id&quot;</span>, authId);<br><br>        <span class="hljs-comment">// checked设置为true，表示勾选节点</span><br>        <span class="hljs-keyword">var</span> checked = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// checkTypeFlag设置为false，表示不联动勾选，</span><br>        <span class="hljs-comment">// 即父节点的子节点未完全勾选时不改变父节点的勾选状态</span><br>        <span class="hljs-comment">// 否则会出现bug：前端只要选了一个子节点，传到后端后，下次再调用时，发现前端那个子节点的所有兄弟节点也被勾选了，</span><br>        <span class="hljs-comment">// 因为在子节点勾选时，父节点也被勾选了，之后前端显示时，联动勾选，导致全部子节点被勾选</span><br>        <span class="hljs-keyword">var</span> checkTypeFlag = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// zTreeObj的checkNode方法 执行勾选操作</span><br>        zTreeObj.checkNode(treeNode, checked, checkTypeFlag);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后端-10"><a href="#后端-10" class="headerlink" title="后端"></a>后端</h3><h4 id="创建inner-role-auth数据表"><a href="#创建inner-role-auth数据表" class="headerlink" title="创建inner-role-auth数据表"></a>创建inner-role-auth数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> inner_role_auth(<br> id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br> role_id <span class="hljs-type">INT</span>,<br> auth_id <span class="hljs-type">INT</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br> );<br></code></pre></td></tr></table></figure><h4 id="Hanlder方法"><a href="#Hanlder方法" class="headerlink" title="Hanlder方法"></a>Hanlder方法</h4><p>返回authId的List集合，在前端可以遍历authId来回显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/assign/get/assigned/auth/id/by/role/id.json&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;List&lt;Integer&gt;&gt; getAssignedAuthIdByRoleId(<span class="hljs-meta">@RequestParam(&quot;roleID&quot;)</span> Integer roleId)&#123;<br>    List&lt;Integer&gt; authList = authService.getAssignedAuthIdByRoleId(roleId);<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithData(authList);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AuthService实现-1"><a href="#AuthService实现-1" class="headerlink" title="AuthService实现"></a>AuthService实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getAssignedAuthIdByRoleId</span><span class="hljs-params">(Integer roleId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> authMapper.selectAuthIdByRoleId(roleId);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="sql语句-2"><a href="#sql语句-2" class="headerlink" title="sql语句"></a>sql语句</h4><p>通过roleId查询authId</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;selectAuthIdByRoleId&quot; resultType<span class="hljs-operator">=</span>&quot;int&quot;<span class="hljs-operator">&gt;</span><br>  <span class="hljs-keyword">select</span> auth_id <span class="hljs-keyword">from</span> inner_role_auth <span class="hljs-keyword">where</span> role_id<span class="hljs-operator">=</span>#&#123;roleId&#125;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Role执行分配"><a href="#Role执行分配" class="headerlink" title="Role执行分配"></a>Role执行分配</h2><h3 id="目标-22"><a href="#目标-22" class="headerlink" title="目标"></a>目标</h3><p>点击执行，在数据库中保存，并显示模态框</p><h3 id="思路-22"><a href="#思路-22" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220118151754107-16424902801321.png" alt="image-20220118151754107"></p><h3 id="前端-12"><a href="#前端-12" class="headerlink" title="前端"></a>前端</h3><h4 id="绑定提交单击事件"><a href="#绑定提交单击事件" class="headerlink" title="绑定提交单击事件"></a>绑定提交单击事件</h4><p>提交后发送Ajax请求，注意在传入后端的参数中，需要将roleId也看作为数组，以请求体的方式传入，使用@RequestBody接受</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给提交权限修改绑定单击事件</span><br>$(<span class="hljs-string">&quot;#assignBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 声明一个数组，用来存放被勾选的auth的id</span><br>    <span class="hljs-keyword">var</span> authIdArray = [];<br><br>    <span class="hljs-comment">// 拿到zTreeObj</span><br>    <span class="hljs-keyword">var</span> zTreeObj = $.fn.zTree.getZTreeObj(<span class="hljs-string">&quot;authTreeDemo&quot;</span>);<br><br>    <span class="hljs-comment">// 通过getCheckedNodes方法拿到被选中的option信息</span><br>    <span class="hljs-keyword">var</span> authArray = zTreeObj.getCheckedNodes();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; authArray.length; i++) &#123;<br>        <span class="hljs-comment">// 从被选中的auth中遍历得到每一个auth的id</span><br>        <span class="hljs-keyword">var</span> authId = authArray[i].id;<br>        <span class="hljs-comment">// 通过push方法将得到的id存入authIdArray</span><br>        authIdArray.push(authId);<br>    &#125;<br>    <span class="hljs-keyword">var</span> requestBody = &#123;<br>        <span class="hljs-comment">// 为了后端取值方便，两个数据都用数组格式存放，后端统一用List&lt;Integer&gt;获取</span><br>        <span class="hljs-attr">roleId</span>: [<span class="hljs-built_in">window</span>.roleId],<br>        <span class="hljs-attr">authIdList</span>: authIdArray<br>    &#125;<br>    requestBody = <span class="hljs-built_in">JSON</span>.stringify(requestBody);<br><br>    <span class="hljs-comment">// 发送Ajax请求保存</span><br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;assign/do/role/assign/auth.json&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-attr">data</span>: requestBody,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;SUCCESS&quot;</span>)&#123;<br>                layer.msg(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.result == <span class="hljs-string">&quot;FAILED&quot;</span>)&#123;<br>                layer.msg(<span class="hljs-string">&quot;操作失败！提示信息：&quot;</span>+ response.message);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>            layer.msg(response.status + <span class="hljs-string">&quot;  &quot;</span> + response.statusText);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 关闭模态框</span><br>    $(<span class="hljs-string">&quot;#assignModal&quot;</span>).modal(<span class="hljs-string">&quot;hide&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="后端-11"><a href="#后端-11" class="headerlink" title="后端"></a>后端</h3><h4 id="Handler方法-9"><a href="#Handler方法-9" class="headerlink" title="Handler方法"></a>Handler方法</h4><p>使用Map接受参数，方便取出各数组，和admin执行分配方法一致，先将所有记录删除后再插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/assign/do/role/assign/auth.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveRoleAuthRelathinship</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Map&lt;String, List&lt;Integer&gt;&gt; map)</span> </span>&#123;<br>    <span class="hljs-comment">// 取出roleId进行删除</span><br>    List&lt;Integer&gt; roleIdList = map.get(<span class="hljs-string">&quot;roleId&quot;</span>);<br>    Integer roleId = roleIdList.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 根据roleId进行删除</span><br>    authService.deleteOldRelationship(roleId);<br>    <span class="hljs-comment">// 取出新增的权限的authId</span><br>    List&lt;Integer&gt; authIdList = map.get(<span class="hljs-string">&quot;authIdList&quot;</span>);<br>    <span class="hljs-comment">// 判断是否为空，再进行插入</span><br>    <span class="hljs-keyword">if</span> (authIdList != <span class="hljs-keyword">null</span> &amp;&amp; authIdList.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        authService.saveNewRelationship(roleId, authIdList);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AuthServuce实现"><a href="#AuthServuce实现" class="headerlink" title="AuthServuce实现"></a>AuthServuce实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteOldRelationship</span><span class="hljs-params">(Integer roleId)</span> </span>&#123;<br>    authMapper.deleteOldRelationship(roleId);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveNewRelationship</span><span class="hljs-params">(Integer roleId, List&lt;Integer&gt; authIdList)</span> </span>&#123;<br>    authMapper.insertNewRelationship(roleId,authIdList);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AuthMapper接口定义方法"><a href="#AuthMapper接口定义方法" class="headerlink" title="AuthMapper接口定义方法"></a>AuthMapper接口定义方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteOldRelationship</span><span class="hljs-params">(Integer roleId)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertNewRelationship</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;roleId&quot;)</span> Integer roleId,<span class="hljs-meta">@Param(&quot;authIdList&quot;)</span> List&lt;Integer&gt; authIdList)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="sql语句-3"><a href="#sql语句-3" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">delete</span> id<span class="hljs-operator">=</span>&quot;deleteOldRelationship&quot;<span class="hljs-operator">&gt;</span><br>   <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> inner_role_auth <span class="hljs-keyword">where</span> role_id<span class="hljs-operator">=</span>#&#123;roleId&#125;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;insertNewRelationship&quot;<span class="hljs-operator">&gt;</span><br>  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> inner_role_auth (role_id, auth_id) <span class="hljs-keyword">values</span><br>  <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;authIdList&quot; item<span class="hljs-operator">=</span>&quot;authId&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span><br>    (#&#123;roleId&#125;,#&#123;authId&#125;)<br>  <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringSecurity的引入"><a href="#SpringSecurity的引入" class="headerlink" title="SpringSecurity的引入"></a>SpringSecurity的引入</h2><p>在springSecurity注入IOC容器中时，应该注入SpringMVC的IOC，对浏览器请求进行控制</p><p><img src="/img/atcrowdfunding.assets/image-20220119145321761.png" alt="image-20220119145321761"></p><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>父工程下添加，控制版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringSecurity 对 Web 应用进行权限管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.security.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringSecurity 配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.security.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringSecurity 标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fall.spring.security.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在component下添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringSecurity 对 Web 应用进行权限管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- SpringSecurity 配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- SpringSecurity 标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="加入SpringSecurity的filter"><a href="#加入SpringSecurity的filter" class="headerlink" title="加入SpringSecurity的filter"></a>加入SpringSecurity的filter</h3><p>web.xml下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加入 SpringSecurity 控制权限的 Filter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><p>在mvc.config中创建springSecurity的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>      <span class="hljs-comment">// 配置类</span><br><span class="hljs-meta">@EnableWebSecurity</span>  <span class="hljs-comment">// 开启web环境下的权限控制功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebAppSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="找不到springSecurityFilterChain"><a href="#找不到springSecurityFilterChain" class="headerlink" title="找不到springSecurityFilterChain"></a>找不到springSecurityFilterChain</h3><p>此时启动项目，在Tomcat Localhost Log下会报错</p><p><img src="/img/atcrowdfunding.assets/image-20220119141025713.png" alt="image-20220119141025713"></p><h4 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h4><p>Web 组件加载顺序：Listener→Filter→Servlet </p><ul><li><p>Spring IOC 容器：ContextLoaderListener 创建 </p></li><li><p>SpringMVC IOC 容器：DispatcherServlet 创建 </p></li><li><p>springSecurityFilterChain：从 IOC 容器中找到对应的 bean</p></li></ul><p><img src="/img/atcrowdfunding.assets/image-20220119143542626.png" alt="image-20220119143542626"></p><p>在ContextLoaderListener 初始化后，springSecurityFilterChain会在spring的IOC容器中找bean，但spring的IOC并未扫描springSecurity的配置类，就没有创建bean</p><h4 id="解决方案一：合并IOC容器"><a href="#解决方案一：合并IOC容器" class="headerlink" title="解决方案一：合并IOC容器"></a>解决方案一：合并IOC容器</h4><p>将Spring和SpringMVC的IOC容器合二为一</p><p>将spring的IOC容器注释掉，初始化时就不会在spring的IOC中找bean，而是放弃，在第一次请求时找SpringMVC中的bean</p><ul><li><p>web.xml中注释掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--  将spring的IOC容器和SringMVC的IOC容器合二为一  --&gt;</span><br>    <span class="hljs-comment">&lt;!--配置监听加载文件--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;context-param&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;param-value&gt;classpath:spring-persist-*.xml&lt;/param-value&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/context-param&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &amp;lt;!&amp;ndash;ContextLoaderListener加入容器&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;listener&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/listener&gt;--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在SpringMVC配置加载文件时，将spring的IOC扫描的bean加载进去</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringMVC的配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="解决方案二：修改源码"><a href="#解决方案二：修改源码" class="headerlink" title="解决方案二：修改源码"></a>解决方案二：修改源码</h4><p>先扫描SpringMVC的IOC容器，而不是spring的IOC容器，此处并未采用</p><h3 id="放行资源"><a href="#放行资源" class="headerlink" title="放行资源"></a>放行资源</h3><p>对登录页和静态资源放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity security)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    security<br>            .authorizeRequests()<br>            .antMatchers(<span class="hljs-string">&quot;/admin/to/login/page.html&quot;</span>)   <span class="hljs-comment">// 对登录页放行</span><br>            .permitAll()                                            <span class="hljs-comment">//无条件访问</span><br>            .antMatchers(                                           <span class="hljs-comment">// 对静态资源放行</span><br>                    <span class="hljs-string">&quot;/bootstrap/**&quot;</span><br>                    , <span class="hljs-string">&quot;/crowd/**&quot;</span><br>                    , <span class="hljs-string">&quot;/css/**&quot;</span><br>                    , <span class="hljs-string">&quot;/fonts/**&quot;</span><br>                    , <span class="hljs-string">&quot;/img/**&quot;</span><br>                    , <span class="hljs-string">&quot;/jquery/**&quot;</span><br>                    , <span class="hljs-string">&quot;/layer/**&quot;</span><br>                    , <span class="hljs-string">&quot;/script/**&quot;</span><br>                    , <span class="hljs-string">&quot;/ztree/**&quot;</span>)<br>            .permitAll()<br>            .anyRequest()                                           <span class="hljs-comment">// 其他未设置的全部请求</span><br>            .authenticated();                                       <span class="hljs-comment">// 需要认证</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登录配置"><a href="#登录配置" class="headerlink" title="登录配置"></a>登录配置</h3><ul><li><p>修改登录页的表单提交路径</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;admin/security/login.html&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-signin&quot;</span> role=<span class="hljs-string">&quot;form&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>在security下在配置表单登录功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.formLogin()                                            <span class="hljs-comment">// 开启表单登录</span><br>.loginPage(<span class="hljs-string">&quot;/admin/to/login/page.html&quot;</span>)                 <span class="hljs-comment">// 登录页</span><br>.loginProcessingUrl(<span class="hljs-string">&quot;/admin/security/login.html&quot;</span>)       <span class="hljs-comment">// 登录请求的地址</span><br>.defaultSuccessUrl(<span class="hljs-string">&quot;/admin/to/main/page.html&quot;</span>)          <span class="hljs-comment">// 登录成功后前往的地址</span><br>.usernameParameter(<span class="hljs-string">&quot;loginAcct&quot;</span>)                         <span class="hljs-comment">// 账号请求参数的名称</span><br>.passwordParameter(<span class="hljs-string">&quot;loginPswd&quot;</span>)                         <span class="hljs-comment">// 密码请求参数的名称</span><br>.and()<br>.csrf()                                                 <span class="hljs-comment">// 为了方便，本项目禁用跨站请求伪造功能</span><br>.disable();<br></code></pre></td></tr></table></figure><p>注意禁用 CSRF 功能，实际开发时还是不要禁用</p></li><li><p>创建用户配置模拟登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    builder<br>            .inMemoryAuthentication()<br>            .withUser(<span class="hljs-string">&quot;tom&quot;</span>)<br>            .password(<span class="hljs-string">&quot;123&quot;</span>)<br>            .roles(<span class="hljs-string">&quot;ADMIN&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意在spring-web-mvc.xml中<strong>将拦截器注释掉</strong>，不然在访问main页面时会被拦截器拦截重新登录</p></li></ul><h3 id="退出登录配置"><a href="#退出登录配置" class="headerlink" title="退出登录配置"></a>退出登录配置</h3><ul><li><p>在退出按钮设置请求地址</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;li&gt;&lt;a href=<span class="hljs-string">&quot;admin/security/logout.html&quot;</span>&gt;&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-off&quot;</span>&gt;&lt;/i&gt; 退出系统&lt;/a&gt;&lt;/li&gt;<br></code></pre></td></tr></table></figure></li><li><p>开启退出登录功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.logout()                                               <span class="hljs-comment">// 开启登录退出功能</span><br>.logoutUrl(<span class="hljs-string">&quot;/admin/security/logout.html&quot;</span>)                <span class="hljs-comment">// 退出登录请求的地址</span><br>.logoutSuccessUrl(<span class="hljs-string">&quot;/admin/to/login/page.html&quot;</span>)          <span class="hljs-comment">// 退出成功后跳转的页面</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="使用数据库登录"><a href="#使用数据库登录" class="headerlink" title="使用数据库登录"></a>使用数据库登录</h3><h4 id="目标-23"><a href="#目标-23" class="headerlink" title="目标"></a>目标</h4><p>使用SpringSecurity通过查找数据库，对用户的账号密码校验，和赋予用户的权限</p><h4 id="思路-23"><a href="#思路-23" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220119161956847.png" alt="image-20220119161956847"></p><h4 id="完善查询语句"><a href="#完善查询语句" class="headerlink" title="完善查询语句"></a>完善查询语句</h4><ul><li><p>通过adminId查找权限操作</p><ul><li><p>authService接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getAssignAuthByAdminId</span><span class="hljs-params">(Integer adminId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> authMapper.selectAssignAuthByAdminId(adminId);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;selectAssignAuthByAdminId&quot; resultType<span class="hljs-operator">=</span>&quot;String&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> t_auth.name<br>    <span class="hljs-keyword">from</span> t_auth<br>             <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> inner_role_auth <span class="hljs-keyword">on</span> inner_role_auth.auth_id <span class="hljs-operator">=</span> t_auth.id<br>             <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> inner_admin_role <span class="hljs-keyword">on</span> inner_admin_role.role_id <span class="hljs-operator">=</span> inner_role_auth.role_id<br>    <span class="hljs-keyword">where</span> admin_id <span class="hljs-operator">=</span> #&#123;adminId&#125;<br>      <span class="hljs-keyword">AND</span> t_auth.`name` <span class="hljs-operator">!=</span> &quot;&quot; <span class="hljs-keyword">AND</span> t_auth.`name` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>通过username查找admin</p><ul><li><p>使用QBC查询，AdminService接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Admin <span class="hljs-title">getAdminByLoginAcct</span><span class="hljs-params">(String username)</span> </span>&#123;<br>    AdminExample adminExample = <span class="hljs-keyword">new</span> AdminExample();<br>    AdminExample.Criteria criteria = adminExample.createCriteria();<br>    criteria.andLoginAcctLike(username);<br>    List&lt;Admin&gt; admins = adminMapper.selectByExample(adminExample);<br>    Admin admin = admins.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> admin;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="创建SecurityAdmin"><a href="#创建SecurityAdmin" class="headerlink" title="创建SecurityAdmin"></a>创建SecurityAdmin</h4><p>SecurityAdmin封装了admin的信息和所拥有的权限，此时继承SpringSecurity提供的User类，并调用User的有参构造函数进行构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为了能方便地获取到原始地Admin对象，因此创建一个SecurityAdmin类，继承User。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityAdmin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-comment">// 原始的Admin对象，包含Admin的所有属性</span><br>    <span class="hljs-keyword">private</span> Admin originalAdmin;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecurityAdmin</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            // 传入原始的admin</span></span><br><span class="hljs-params"><span class="hljs-function">            Admin originalAdmin,</span></span><br><span class="hljs-params"><span class="hljs-function">            // 创建角色，权限的集合</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;GrantedAuthority&gt; authorities)</span> </span>&#123;<br>        <span class="hljs-comment">// 调用父类的构造器</span><br>        <span class="hljs-keyword">super</span>(originalAdmin.getLoginAcct(), originalAdmin.getUserPswd(), authorities);<br>        <span class="hljs-keyword">this</span>.originalAdmin = originalAdmin;<br>    &#125;<br><br>    <span class="hljs-comment">// 对外提供获取原始的Admin对象的get方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Admin <span class="hljs-title">getOriginalAdmin</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> originalAdmin;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现UserDetailsService接口"><a href="#实现UserDetailsService接口" class="headerlink" title="实现UserDetailsService接口"></a>实现UserDetailsService接口</h4><p>使用CrowdUserDetailsServiceImpl来实现UserDetailsService接口，将用户和权限封装进SecurityAdmin中</p><p>此时CrowdUserDetailsServiceImpl放在impl包下，CrowdUserDetails放在api包下，（并没有放在config包下），需要再实现CrowdUserDetails</p><p><strong>注意</strong>：在进行角色存入时，需要添加ROLE_前缀表示存入的是角色，而不是权限</p><p>CrowdUserDetails接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CrowdUserDetailsService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>CrowdUserDetailsServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdUserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CrowdUserDetailsService</span>, <span class="hljs-title">UserDetailsService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AdminService adminService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RoleService roleService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthService authService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 通过用户名得到Admin对象</span><br>        Admin admin = adminService.getAdminByLoginAcct(username);<br><br>        <span class="hljs-comment">// 通过AdminId得到角色List</span><br>        List&lt;Role&gt; roleList = roleService.getAssignedRole(admin.getId());<br><br>        <span class="hljs-comment">// 通过AdminId得到权限name地List</span><br>        List&lt;String&gt; authNameList = authService.getAssignAuthByAdminId(admin.getId());<br><br>        <span class="hljs-comment">// 创建List用来存放GrantedAuthority（权限信息）</span><br>        ArrayList&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 向List存放角色信息，注意角色必须要手动加上 “ROLE_” 前缀</span><br>        <span class="hljs-keyword">for</span> (Role role : roleList) &#123;<br>            String roleName = <span class="hljs-string">&quot;ROLE_&quot;</span> + rolerole.getName();<br>            SimpleGrantedAuthority simpleGrantedAuthority = <span class="hljs-keyword">new</span> SimpleGrantedAuthority(roleName);<br>            authorities.add(simpleGrantedAuthority);<br>        &#125;<br><br>        <span class="hljs-comment">// 向List存放权限信息</span><br>        <span class="hljs-keyword">for</span> (String authority : authNameList) &#123;<br>            SimpleGrantedAuthority simpleGrantedAuthority = <span class="hljs-keyword">new</span> SimpleGrantedAuthority(authority);<br>            authorities.add(simpleGrantedAuthority);<br>        &#125;<br><br>        <span class="hljs-comment">// 将Admin对象和权限信息存入SecurityAdmin中</span><br>        SecurityAdmin securityAdmin = <span class="hljs-keyword">new</span> SecurityAdmin(admin, authorities);<br><br>        <span class="hljs-comment">// 返回封装好的SecurityAdmin对象</span><br>        <span class="hljs-keyword">return</span> securityAdmin;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="再配置类中使用数据库登录"><a href="#再配置类中使用数据库登录" class="headerlink" title="再配置类中使用数据库登录"></a>再配置类中使用数据库登录</h4><p>先装配UserDetailsService，修改配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    builder<br>            .userDetailsService(userDetailsService);<span class="hljs-comment">//使用数据库登录</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用盐值加密"><a href="#使用盐值加密" class="headerlink" title="使用盐值加密"></a>使用盐值加密</h3><ul><li><p>将BCryptPasswordEncoder注入到容器，可以再配置文件中配置，也可以使用@Bean注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BCryptPasswordEncoder <span class="hljs-title">BCryptPasswordEncoder</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置使用盐值加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    builder<br>            .userDetailsService(userDetailsService)    <span class="hljs-comment">// 使用数据库登录</span><br>            .passwordEncoder(BCryptPasswordEncoder()); <span class="hljs-comment">// 使用盐值加密</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改保存管理员的方法（saveAdmin），不使用MD5加密，而是用盐值加密</p><p>先注入自动装配（此时我们已将容器合并，在spring容器中不需要再配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;<br></code></pre></td></tr></table></figure><p>再使用BCryptPasswordEncoder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.取出密码进行md5加密</span><br>String password=admin.getUserPswd();<br><span class="hljs-comment">// 使用盐值加密代替md5加密</span><br>String encode = bCryptPasswordEncoder.encode(password);<br>admin.setUserPswd(encode);<br></code></pre></td></tr></table></figure></li></ul><h3 id="页面显示用户名"><a href="#页面显示用户名" class="headerlink" title="页面显示用户名"></a>页面显示用户名</h3><ul><li><p>导入springSecurity标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;security&quot;</span> uri=<span class="hljs-string">&quot;http://www.springframework.org/security/tags&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>通过封装的princinal显示信息</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;<br>    &lt;!-- ，springSeurity将在登录成功后，将登录成功的User以principal存入，就是前面返回的originalAdmin，从originalAdmin属性可以获取Admin的所有信息  --&gt;<br>    &lt;security:authentication property=<span class="hljs-string">&quot;principal.originalAdmin.userName&quot;</span>&gt;&lt;/security:authentication&gt;<br>&lt;/i&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="密码擦除"><a href="#密码擦除" class="headerlink" title="密码擦除"></a>密码擦除</h3><ul><li><p>由于SecurityAdmin的父类，User已经在登陆后封装进principal时，将password设置为空，在页面无法显示Credentials信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eraseCredentials</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.password = <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但在SecurityAdmin的originalAdmin中还存在password的信息，因此将originalAdmin中的password设置为空（此处设置不会影响登录，登录时的密码验证时通过父类User来匹配的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 擦除originalAdmin中的密码，即将originalAdmin设置为空</span><br>originalAdmin.setUserPswd(<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="角色访问控制"><a href="#角色访问控制" class="headerlink" title="角色访问控制"></a>角色访问控制</h3><ul><li><p>方法一：可以在配置类中设置访问时要求的角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">security<br>.antMatchers(<span class="hljs-string">&quot;/admin/get/page.html&quot;</span>)        <span class="hljs-comment">// 针对分页显示Admin数据设定访问控制</span><br>.hasRole(<span class="hljs-string">&quot;经理&quot;</span>)                                        <span class="hljs-comment">// 要求具备经理角色</span><br></code></pre></td></tr></table></figure><p>此时在没有权限的时候，会报403异常，此时在SpringSecurity配置类中配置异常处理机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">security<br>.exceptionHandling()<br>.accessDeniedHandler(<span class="hljs-keyword">new</span> AccessDeniedHandler() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        request.setAttribute(<span class="hljs-string">&quot;exception&quot;</span>,<span class="hljs-keyword">new</span> Exception(CrowdConstant.MESSAGE_ACCESS_DENIED));<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/system-error.jsp&quot;</span>).forward(request,response);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>SpringSecurity异常不会被SpringMVC捕捉</strong>（因此403需要自己在SpringSecurity配置），层次对应关系如下</p><p><img src="/img/atcrowdfunding.assets/image-20220120145713618.png" alt="image-20220120145713618"></p></li><li><p>方法二：通过注解在Handler方法上设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 拥有部长的角色才可以访问</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAnyRole(&#x27;部长&#x27;)&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/role/get/page/info.json&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;PageInfo&lt;Role&gt;&gt; getPageInfo()&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>此时需要在配置类中加入注解，以上注解才生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>                                     <span class="hljs-comment">// 配置类</span><br><span class="hljs-meta">@EnableWebSecurity</span>                                 <span class="hljs-comment">// 开启web环境下的权限控制功能</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="hljs-comment">// 开启此功能才可以使用注解来设置权限信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebAppSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在访问没有权限的资源时，SpringMVC会抛出异常，但没有对应的异常处理机制，因此配置异常处理机制，捕获一个大的Exception</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 处理springSecurity抛出的异常</span><br><span class="hljs-meta">@ExceptionHandler(value = &#123;Exception.class&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">resolveException</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        Exception exception,</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpServletResponse response</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    String viewName = <span class="hljs-string">&quot;system-error&quot;</span>;<br>    <span class="hljs-keyword">return</span> conmonResolver(exception, request, response, viewName);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="权限访问控制"><a href="#权限访问控制" class="headerlink" title="权限访问控制"></a>权限访问控制</h3><ul><li><p>在方法上加入权限，即拥有此权限才可以访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:save&#x27;)&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;admin/save.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveAdmin</span><span class="hljs-params">(Admin admin)</span></span>&#123;<br>   ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在配置类中设置，则/admin/get/page.html需要经理角色或者user:get才可以访问（如果OR 为 ADN 则需要角色和权限同时满足）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">security<br>.antMatchers(<span class="hljs-string">&quot;/admin/get/page.html&quot;</span>)        <span class="hljs-comment">// 针对分页显示Admin数据设定访问控制</span><br>.access(<span class="hljs-string">&quot;hasAnyRole(&#x27;经理&#x27;) OR hasAuthority(&#x27;user:get&#x27;) &quot;</span>) <span class="hljs-comment">// 要求具备经理角色和user:get权限</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="页面元素的权限控制"><a href="#页面元素的权限控制" class="headerlink" title="页面元素的权限控制"></a>页面元素的权限控制</h3><ul><li><p>需要在jsp中引入SpringSecurity标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;security&quot;</span> uri=<span class="hljs-string">&quot;http://www.springframework.org/security/tags&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>此时security标签中对应的权限或者角色才可以显示给用户</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;security:authorize access=<span class="hljs-string">&quot;hasRole(&#x27;经理&#x27;)&quot;</span>&gt;<br>          ...<br>&lt;security:authorize access=<span class="hljs-string">&quot;hasAuthority(&#x27;role:delete&#x27;)&quot;</span>&gt;<br>          ...<br>&lt;/security:authorize&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="会员环境搭建"><a href="#会员环境搭建" class="headerlink" title="会员环境搭建"></a>会员环境搭建</h1><h2 id="总目标"><a href="#总目标" class="headerlink" title="总目标"></a>总目标</h2><p>会员登录注册 、发起众筹项目 、展示众筹项目 、支持众筹项目 、订单、支付功能</p><h2 id="分布式架构思路图"><a href="#分布式架构思路图" class="headerlink" title="分布式架构思路图"></a>分布式架构思路图</h2><p><img src="/img/atcrowdfunding.assets/image-20220122162213047.png" alt="image-20220122162213047"></p><h2 id="创建工程模块"><a href="#创建工程模块" class="headerlink" title="创建工程模块"></a>创建工程模块</h2><p>IDEA在Project Structure中就可以导入以前的模块</p><p><img src="/img/atcrowdfunding.assets/image-20220125215945354.png" alt="image-20220125215945354"></p><p>导入后效果</p><p><img src="/img/atcrowdfunding.assets/image-20220122184737974.png" alt="image-20220122184737974"></p><p>父工程打包方式为<strong>pom</strong>，其他工程打包为<strong>jar</strong></p><ul><li><p>端口号约定</p><p>atcrowdfunding08-member-eureka  1000 </p><p>atcrowdfunding10-member-mysql-provider 2000 </p><p>atcrowdfunding11-member-redis-provider 3000 </p><p>atcrowdfunding12-member-authentication-consumer 4000 </p><p>atcrowdfunding13-member-project-consumer 5000 </p><p>atcrowdfunding14-member-order-consumer 7000 </p><p>atcrowdfunding15-member-pay-consumer 8000 </p><p>atcrowdfunding16-member-zuul 80</p></li><li><p>父工程导入依赖，进行版本控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在parent工程进行依赖管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 导入SpringCloud需要的依赖信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringBoot依赖信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot整合MyBatis的依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--druid依赖信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Eureka模块"><a href="#Eureka模块" class="headerlink" title="Eureka模块"></a>Eureka模块</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">// 开启eureka功能</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-eureka</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>         <span class="hljs-comment"># 自己就是注册中心，所以不需要“从注册中心取回信息”</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment"># 自己就是注册中心，所以自己不注册自己</span><br>    <span class="hljs-attr">service-url:</span>                  <span class="hljs-comment"># 客户端访问 Eureka 时使用的地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="实体类模块"><a href="#实体类模块" class="headerlink" title="实体类模块"></a>实体类模块</h3><h4 id="实体类的划分"><a href="#实体类的划分" class="headerlink" title="实体类的划分"></a>实体类的划分</h4><ul><li><p>VO（View Object） 视图对象 </p><p>用途 1：接收<strong>浏览器</strong>发送过来的数据 </p><p>用途 2：把数据发送给<strong>浏览器</strong>去显示</p></li><li><p>PO （Persistent Object） 持久化对象 </p><p>用途 1：将数据封装到 PO 对象存入数据库 </p><p>用途 2：将数据库数据查询出来存入 PO 对象 </p><p>所以 PO 对象是和数据库表对应，一个数据库表对应一个 PO 对象</p></li><li><p>DO（Data Object） 数据对象 </p><p>用途 1：从 Redis 查询得到数据封装为 DO 对象 </p><p>用途 2：从 ElasticSearch 查询得到数据封装为 DO 对象 </p><p>用途 3：从 Solr 查询得到数据封装为 DO 对象 </p><p>……</p><p>从中间件或其他第三方接口查询到的数据封装为 DO 对象</p></li><li><p>DTO（Data Transfer Object ）数据传输对象</p><p>用途 1：从 Consumer 发送数据到 Provider </p><p>用途 2：Provider 返回数据给 Consumer</p></li><li><p>示例</p><p><img src="/img/atcrowdfunding.assets/image-20220122181840968.png" alt="image-20220122181840968"></p><p>使用 org.springframework.beans.BeanUtils.copyProperties(Object, Object)在不同实体类之间复制属性。</p></li></ul><h4 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h4><p>本项目只用到VO,PO</p><p>创建com.atguigu.crowd.entity.po ，com.atguigu.crowd.entity.vo包</p><h4 id="使用lombok插件"><a href="#使用lombok插件" class="headerlink" title="使用lombok插件"></a>使用lombok插件</h4><p>lombok在.class文件时才会自动创建，IDEA中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Mysql工程"><a href="#Mysql工程" class="headerlink" title="Mysql工程"></a>Mysql工程</h3><h4 id="逆向工程-3"><a href="#逆向工程-3" class="headerlink" title="逆向工程"></a>逆向工程</h4><ul><li><p>创建数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_member ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>loginacct <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, <br>userpswd <span class="hljs-type">char</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, <br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>), <br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>), <br>authstatus <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) comment <span class="hljs-string">&#x27;实名认证状态 0 - 未实名认证， 1 - 实名认证申 请中， 2 - 已实名认证&#x27;</span>,<br> usertype <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) comment <span class="hljs-string">&#x27; 0 - 个人， 1 - 企业&#x27;</span>, <br>realname <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>), <br>cardnum <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br> accttype <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) comment <span class="hljs-string">&#x27;0 - 企业， 1 - 个体， 2 - 个人， 3 - 政府&#x27;</span>, <br><span class="hljs-keyword">primary</span> key (id) );<br></code></pre></td></tr></table></figure></li><li><p>逆向工程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库表名与需要的实体类对应映射的指定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_member&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;MemberPO&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>生成的实体类中使用lombok</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemberPO</span> </span>&#123;<br></code></pre></td></tr></table></figure></li><li><p>将各自文件归入各自的包</p></li></ul><h4 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h4><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- druid连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!-- MyBatis依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!-- mysql驱动 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!-- eureka客户端依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!-- web环境（为了能对外暴露接口） --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!-- 测试 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!-- 实体类依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding09-member-entity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>       <span class="hljs-comment">&lt;!--依赖entity--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding04-admin-entity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding05-common-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动类</p><p>注意<strong>扫描mapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(basePackages = &quot;com.atguigu.crowd.mapper&quot;)</span>  <span class="hljs-comment">// 扫描mapper接口所在的包</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">2000</span><br><span class="hljs-attr">eureka:</span>                       <span class="hljs-comment"># 注册eureka</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span>                 <span class="hljs-comment"># 配置数据源</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mydb</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">...</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/project_crowd?serverTimezone=UTC</span> <span class="hljs-comment"># 注意配置时区</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-mysql</span> <span class="hljs-comment"># 客户端名</span><br><span class="hljs-attr">mybatis:</span>                      <span class="hljs-comment"># mybatis配置</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mybatis/mapper/*.xml</span><br><span class="hljs-attr">logging:</span>                      <span class="hljs-comment"># 打印sql日志</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.atguigu.crowd.mapper:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-attr">com.atguigu.crowd.test:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = CrowdMainClass.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MemberPOMapper memberPOMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        Connection connection = dataSource.getConnection();<br>        System.out.println(connection.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mybatisTest</span><span class="hljs-params">()</span> </span>&#123;<br>        BCryptPasswordEncoder passwordEncoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        String source = <span class="hljs-string">&quot;123123&quot;</span>;<br>        String encode = passwordEncoder.encode(source);<br>        MemberPO memberPO = <span class="hljs-keyword">new</span> MemberPO(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;jack&quot;</span>, encode, <span class="hljs-string">&quot; 杰 克 &quot;</span>, <span class="hljs-string">&quot;jack@qq.com&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;杰克&quot;</span>, <span class="hljs-string">&quot;123123&quot;</span>, <span class="hljs-number">2</span>);<br>        memberPOMapper.insert(memberPO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Redis工程"><a href="#Redis工程" class="headerlink" title="Redis工程"></a>Redis工程</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- redis依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- eureka客户端依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- web环境（为了能对外暴露接口） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 实体类依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding09-member-entity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 工具类依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding05-common-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span><br><span class="hljs-attr">eureka:</span>                       <span class="hljs-comment"># redis也是eureka的客户端</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-redis</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.130</span><br></code></pre></td></tr></table></figure></li><li><p>测试连接redis</p><p>先启动redis服务，测试类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = CrowdMainClass.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">redisConnectTest</span><span class="hljs-params">()</span></span>&#123;<br>        ValueOperations&lt;String, String&gt; stringStringValueOperations = redisTemplate.opsForValue();<br>        stringStringValueOperations.set(<span class="hljs-string">&quot;k2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>暴露接口</p><p>在api工程创建接口，通过fegin连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;atguigu-crowd-redis&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RedisRemoteService</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/set/redis/key/value/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">setRedisKeyValueRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;value&quot;)</span> String value</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/set/redis/key/value/with/timeout/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">setRedisKeyValueWithTimeoutRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;value&quot;)</span> String value,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;time&quot;)</span> <span class="hljs-keyword">long</span> time,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;timeUnit&quot;)</span> TimeUnit timeunit</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/get/redis/value/by/key/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">getRedisValueByKeyRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/remove/redis/key/by/key/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">RemoveRedisKeyByKeyRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>provider的handler，提供设置值，超时时间，获取值，删除key的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisProviderHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/set/redis/key/value/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">setRedisKeyValueRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;value&quot;)</span> String value</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;String, String&gt; opsForValue = redisTemplate.opsForValue();<br>            opsForValue.set(key, value);<br>            <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            exception.printStackTrace();<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/set/redis/key/value/with/timeout/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">setRedisKeyValueWithTimeoutRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;value&quot;)</span> String value,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;time&quot;)</span> <span class="hljs-keyword">long</span> time,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;timeUnit&quot;)</span> TimeUnit timeunit</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;String, String&gt; opsForValue = redisTemplate.opsForValue();<br>            opsForValue.set(key, value,time,timeunit);<br>            <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            exception.printStackTrace();<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/get/redis/value/by/key/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">getRedisValueByKeyRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;String, String&gt; opsForValue = redisTemplate.opsForValue();<br>            String keyValue = opsForValue.get(key);<br>            <span class="hljs-keyword">return</span> ResultEntity.successWithData(keyValue);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            exception.printStackTrace();<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/remove/redis/key/by/key/remote&quot;)</span><br>    <span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">RemoveRedisKeyByKeyRemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.delete(key);<br>            <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            exception.printStackTrace();<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Auth工程"><a href="#Auth工程" class="headerlink" title="Auth工程"></a>Auth工程</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 依赖api包，api依赖了entity和until，不用再次依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding17-member-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">4000</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><span class="hljs-comment"># 配置视图解析器</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-auth</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个controller返回主页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PortalHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">PortalPage</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;portal&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>引入主界面 portal.html</p><p>修改为<strong>UTF-8编码</strong>，不然会出现乱码，<strong>引入thymeleaf名称空间</strong>，设置<strong>base标签</strong>，获取相对路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  设置base标签，相对路径来获取静态资源  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/font-awesome.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/carousel.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入静态资源</p><p>注意包名一定要为<strong>static</strong>，springboot默认<strong>static</strong>为静态资源</p><p><img src="/img/atcrowdfunding.assets/image-20220125194456081.png" alt="image-20220125194456081"></p></li></ul><h3 id="Zuul工程"><a href="#Zuul工程" class="headerlink" title="Zuul工程"></a>Zuul工程</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>主启动类（<strong>注意开启zuul</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开启zuul</span><br><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-zuul</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">ignored-services:</span> <span class="hljs-string">&quot;*&quot;</span>              <span class="hljs-comment"># 忽略原本微服务名称</span><br>  <span class="hljs-attr">sensitive-headers:</span> <span class="hljs-string">&quot;*&quot;</span>             <span class="hljs-comment"># 在zuul向其他微服务重定向时保持原本的请求体和响应头信息</span><br>  <span class="hljs-attr">routes:</span>                            <span class="hljs-comment"># 自定义路由规则</span><br>    <span class="hljs-attr">crowd-portal:</span>                    <span class="hljs-comment"># 自定义路由规则名称</span><br>      <span class="hljs-attr">service-id:</span> <span class="hljs-string">atguigu-crowd-auth</span> <span class="hljs-comment"># 微服务名称</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/**</span>                      <span class="hljs-comment"># /**表示多层路径，/*表示单层路径（此时就无法访问静态资源）</span><br></code></pre></td></tr></table></figure></li><li><p>测试时注意将<strong>eureka和对应的auth服务启动</strong>，不然会报错500</p></li></ul><h1 id="会员登录和注册"><a href="#会员登录和注册" class="headerlink" title="会员登录和注册"></a>会员登录和注册</h1><h2 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h2><h3 id="短信发送"><a href="#短信发送" class="headerlink" title="短信发送"></a>短信发送</h3><h4 id="目标-24"><a href="#目标-24" class="headerlink" title="目标"></a>目标</h4><ul><li>将验证码发送到用户手机上</li><li>将验证码存入redis中</li></ul><h4 id="思路-24"><a href="#思路-24" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220126094955775.png" alt="image-20220126094955775"></p><h4 id="前端-13"><a href="#前端-13" class="headerlink" title="前端"></a>前端</h4><ul><li><p>配置viewcontroller，跳转注册页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdWebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>      <span class="hljs-comment">// 转发请求的url路径和视图名</span><br>        String registerUrl = <span class="hljs-string">&quot;/auth/to/member/reg/page&quot;</span>;<br>        String registerViewName = <span class="hljs-string">&quot;member-reg&quot;</span>;<br>   <br>        <span class="hljs-comment">// 前往注册页面</span><br>        registry.addViewController(registerUrl).setViewName(registerViewName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主页面修改超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;auth/to/member/reg/page.html&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改注册页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keys&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/font-awesome.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/login.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery/jquery-2.1.1.min.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layer/layer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>为获取验证码绑定单击事件</p><p>此时需要添加给input添加name属性，button添加id属性和type类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputSuccess4&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入验证码&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:10px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon glyphicon-comment form-control-feedback&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span>&gt;</span> 获取验证码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单击发送ajax请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">&quot;#sendBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> phoneNum = $.trim($(<span class="hljs-string">&quot;[name=phoneNum]&quot;</span>).val());<br>            $.ajax(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/auth/member/send/short/message.json&quot;</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-string">&quot;phoneNum&quot;</span>:phoneNum<br>                &#125;,<br>                <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>                <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>                    <span class="hljs-keyword">var</span> result = response.result;<br>                    <span class="hljs-keyword">if</span> (result == <span class="hljs-string">&quot;SUCCESS&quot;</span>)&#123;<br>                        layer.msg(<span class="hljs-string">&quot;发送成功！&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        layer.msg(<span class="hljs-string">&quot;发送失败 请重试！&quot;</span>);<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>                    layer.msg(response.status + <span class="hljs-string">&quot; &quot;</span> + response.statusText);<br>                &#125;<br>            &#125;);<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="后端-12"><a href="#后端-12" class="headerlink" title="后端"></a>后端</h4><ul><li><p>封装发送短信的工具方法</p><p>需要在阿里云上购买短信API，此处我使用的是不需要导入依赖的短信API，使用JDK8即可使用</p><p><img src="/img/atcrowdfunding.assets/image-20220126134323200.png" alt="image-20220126134323200"></p><p>封装方法时返回ResultEntity，并设置返回信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> host    请求地址 支持http 和 https 及 WEBSOCKET</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path    后缀</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> appcode 用来吊第三方API的appcode（购买后可以查看）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> phone   短信接收的手机号码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sign    签名ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> skin    模板ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultEntity&lt;String&gt; <span class="hljs-title">sendShortMessage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        String host,</span></span><br><span class="hljs-params"><span class="hljs-function">        String path,</span></span><br><span class="hljs-params"><span class="hljs-function">        String appcode,</span></span><br><span class="hljs-params"><span class="hljs-function">        String phone,</span></span><br><span class="hljs-params"><span class="hljs-function">        String sign,</span></span><br><span class="hljs-params"><span class="hljs-function">        String skin)</span> </span>&#123;<br>    <span class="hljs-comment">// 生成验证码</span><br>    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-keyword">int</span> random = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">10</span>);<br>        stringBuilder.append(random);<br>    &#125;<br>    String param = stringBuilder.toString();<br>    String urlSend = host + path + <span class="hljs-string">&quot;?param=&quot;</span> + param + <span class="hljs-string">&quot;&amp;phone=&quot;</span> + phone + <span class="hljs-string">&quot;&amp;sign=&quot;</span> + sign + <span class="hljs-string">&quot;&amp;skin=&quot;</span> + skin;   <br>    <span class="hljs-keyword">try</span> &#123;<br>        URL url = <span class="hljs-keyword">new</span> URL(urlSend);<br>        HttpURLConnection httpURLCon = (HttpURLConnection) url.openConnection();<br>        httpURLCon.setRequestProperty(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;APPCODE &quot;</span> + appcode);<span class="hljs-comment">// 格式Authorization:APPCODE (中间是英文空格)</span><br>        <span class="hljs-keyword">int</span> httpCode = httpURLCon.getResponseCode();<br>        <span class="hljs-keyword">if</span> (httpCode == <span class="hljs-number">200</span>) &#123;<br>            String json = read(httpURLCon.getInputStream());<br>            System.out.println(<span class="hljs-string">&quot;正常请求计费(其他均不计费)&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;获取返回的json:&quot;</span>);<br>            System.out.print(json);<br>            <span class="hljs-keyword">return</span> ResultEntity.successWithData(param);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Map&lt;String, List&lt;String&gt;&gt; map = httpURLCon.getHeaderFields();<br>            String error = map.get(<span class="hljs-string">&quot;X-Ca-Error-Message&quot;</span>).get(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (httpCode == <span class="hljs-number">400</span> &amp;&amp; error.equals(<span class="hljs-string">&quot;Invalid AppCode `not exists`&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;AppCode错误 &quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (httpCode == <span class="hljs-number">400</span> &amp;&amp; error.equals(<span class="hljs-string">&quot;Invalid Url&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;请求的 Method、Path 或者环境错误&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (httpCode == <span class="hljs-number">400</span> &amp;&amp; error.equals(<span class="hljs-string">&quot;Invalid Param Location&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;参数错误&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (httpCode == <span class="hljs-number">403</span> &amp;&amp; error.equals(<span class="hljs-string">&quot;Unauthorized&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;服务未被授权（或URL和Path不正确）&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (httpCode == <span class="hljs-number">403</span> &amp;&amp; error.equals(<span class="hljs-string">&quot;Quota Exhausted&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;套餐包次数用完 &quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;参数名错误 或 其他错误&quot;</span> + error);<br>            &#125;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;URL格式错误&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;URL地址错误&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// 打开注释查看详细报错异常信息</span><br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;套餐包次数用完&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 读取返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">read</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>    BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(is));<br>    String line = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>        line = <span class="hljs-keyword">new</span> String(line.getBytes(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        sb.append(line);<br>    &#125;<br>    br.close();<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用yml配置文件设置发送短信需要用到的固定参数</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用@ConfigurationProperties需要的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span>                                          <span class="hljs-comment">// 需要注入IOC容器</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;short.message&quot;)</span> <span class="hljs-comment">// 在yml配置文件中对应的前缀</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShortMessageProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> String path;<br>    <span class="hljs-keyword">private</span> String appcode;<br>    <span class="hljs-keyword">private</span> String sign;<br>    <span class="hljs-keyword">private</span> String skin;<br>&#125;<br></code></pre></td></tr></table></figure><p>yml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">short</span>:<br>  message:<br>    host: https:<span class="hljs-comment">//fsmsn.market.alicloudapi.com</span><br>    path: /fsms132<br>    appcode: 1d96cd2b0d044fde8fc7c5c828dd370d<br>    sign: <span class="hljs-number">175622</span><br>    skin: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>此时可以使用IOC中的ShortMessageProperties对象</p></li><li><p>handler方法调用工具方法，并存入redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemberHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShortMessageProperties shortMessageProperties;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisRemoteService redisRemoteService;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/auth/member/send/short/message.json&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;phoneNum&quot;)</span> String phoneNum)</span> </span>&#123;<br>        <span class="hljs-comment">// 发送验证码到phoneNum手机</span><br>        ResultEntity&lt;String&gt; sendShortMessage = CrowdUtils.sendShortMessage(<br>                shortMessageProperties.getHost(),<br>                shortMessageProperties.getPath(),<br>                shortMessageProperties.getAppcode(),<br>                phoneNum,<br>                shortMessageProperties.getSign(),<br>                shortMessageProperties.getSkin());<br>        <span class="hljs-comment">// 判断短信是否发送成功</span><br>        <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(sendShortMessage.getResult())) &#123;<br>            <span class="hljs-comment">// 如果发送成功，将验证码存入redis</span><br>            String code = sendShortMessage.getData();<br>            <span class="hljs-comment">// 拼接存入redis的key值</span><br>            String key = CrowdConstant.REDIS_CODE_PREFIX + phoneNum;<br>            ResultEntity&lt;String&gt; saveCodeResultEntity = redisRemoteService.setRedisKeyValueWithTimeoutRemote(key, code, <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>            <span class="hljs-comment">// 判断redis中是否保存成功</span><br>            <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(saveCodeResultEntity.getResult())) &#123;<br>                <span class="hljs-comment">// 保存成功则发送消息即可</span><br>                <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 失败直接返回保存的对象</span><br>                <span class="hljs-keyword">return</span> saveCodeResultEntity;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> sendShortMessage;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主启动类，注意需要启动fegin功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启用fegin客户端功能</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行时需要同时启动redis和eureka服务</p></li></ul><h3 id="执行注册"><a href="#执行注册" class="headerlink" title="执行注册"></a>执行注册</h3><h4 id="目标-25"><a href="#目标-25" class="headerlink" title="目标"></a>目标</h4><p>如果验证码和各项信息能够通过。就将Member存入数据库。</p><h4 id="思路-25"><a href="#思路-25" class="headerlink" title="思路"></a>思路</h4><p><img src="/img/atcrowdfunding.assets/image-20220126144351250.png" alt="image-20220126144351250"></p><h4 id="前端-14"><a href="#前端-14" class="headerlink" title="前端"></a>前端</h4><ul><li><p>在页面添加name属性（注意和MemberVO对象属性保持一致），修改表单提交地址和请求方式，此处实例部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/auth/do/member/register.html&quot;</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginacct&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputSuccess4&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入登录账号&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user form-control-feedback&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span>&gt;</span> 获取验证码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="后端-13"><a href="#后端-13" class="headerlink" title="后端"></a>后端</h4><h5 id="mysql-provider工程实现保存操作"><a href="#mysql-provider工程实现保存操作" class="headerlink" title="mysql-provider工程实现保存操作"></a>mysql-provider工程实现保存操作</h5><ul><li><p>先将loginacct字段设置为unique</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_member <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> INDEX(loginacct);<br></code></pre></td></tr></table></figure></li><li><p>handler方法</p><p><strong>注意一定要用@RequestBody</strong>，在分布式架构中，Ribbon以json形式传输数据，在这里不会像SpringMVC一样自动寻找set方法配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/member/remote&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveMember</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> MemberPO memberPO)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        memberService.saveMember(memberPO);<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> DuplicateKeyException)&#123;<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(CrowdConstant.MESSAGE_LOGIN_ACCT_ALREADY_IN_USE);<br>        &#125;<br>        <span class="hljs-comment">// 3.如果捕获到异常则返回失败的结果</span><br>        <span class="hljs-keyword">return</span> ResultEntity.failed(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>saveMember接口实现</p><p>此时将事务只读设置为<strong>false</strong>，只有查询是只读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(</span><br><span class="hljs-meta">        propagation = Propagation.REQUIRES_NEW,</span><br><span class="hljs-meta">        rollbackFor = Exception.class,</span><br><span class="hljs-meta">        readOnly = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMember</span><span class="hljs-params">(MemberPO memberPO)</span> </span>&#123;<br>    memberPOMapper.insertSelective(memberPO);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="api工程"><a href="#api工程" class="headerlink" title="api工程"></a>api工程</h5><ul><li><p>使用fegin调用，注意方法必须和provider中调用的一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;atguigu-crowd-mysql&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MysqlRemoteService</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/get/memberpo/by/login/acct/remote&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;MemberPO&gt; <span class="hljs-title">getMemberPOByLoginAcctRemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;loginacct&quot;)</span> String loginacct)</span></span>;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/save/member/remote&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveMember</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> MemberPO memberPO)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="authentication-consumer工程"><a href="#authentication-consumer工程" class="headerlink" title="authentication-consumer工程"></a>authentication-consumer工程</h5><ul><li><p>创建与视图交互的MemberVO对象，注意和表单的name属性值相等，才可自动注入到MemberVO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemberVO</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String loginacct;<br><br>    <span class="hljs-keyword">private</span> String userpswd;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">private</span> String phoneNum;<br><br>    <span class="hljs-keyword">private</span> String code;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ShortMessageProperties shortMessageProperties;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisRemoteService redisRemoteService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MysqlRemoteService mysqlRemoteService;<br><br><span class="hljs-meta">@RequestMapping(&quot;/auth/do/member/register.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">register</span><span class="hljs-params">(MemberVO memberVO, ModelMap modelMap)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.获取用户手机号</span><br>    String phoneNum = memberVO.getPhoneNum();<br><br>    <span class="hljs-comment">// 2.拼redis中存储</span><br>    String redisCodeKey = CrowdConstant.REDIS_CODE_PREFIX + phoneNum;<br><br>    <span class="hljs-comment">// 3.从redis读取key对应的value</span><br>    ResultEntity&lt;String&gt; redisValueByKeyRemote = redisRemoteService.getRedisValueByKeyRemote(redisCodeKey);<br><br>    <span class="hljs-comment">// 4.检查查询操作是否有效</span><br>    <span class="hljs-comment">// 未找到验证码</span><br>    <span class="hljs-keyword">if</span> (ResultEntity.FAILED.equals(redisValueByKeyRemote.getResult())) &#123;<br>        modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, redisValueByKeyRemote.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-reg&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取redis中的验证码</span><br>    String redisCode = redisValueByKeyRemote.getData();<br><br>    <span class="hljs-comment">// redis中验证码为空</span><br>    <span class="hljs-keyword">if</span> (redisCode == <span class="hljs-keyword">null</span>) &#123;<br>        modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_CODE_NOT_EXISTS);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-reg&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// redis中验证码不为空</span><br>    <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(redisValueByKeyRemote.getResult())) &#123;<br>        <span class="hljs-comment">// 5.如果从redis能够查询到value则比较表单验证码和redis验证码</span><br>        String formCode = memberVO.getCode();<br><br>        <span class="hljs-comment">// 验证码不一致</span><br>        <span class="hljs-keyword">if</span> (!Objects.equals(formCode, redisCode)) &#123;<br>            modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_CODE_INVALID);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-reg&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 验证码一致</span><br>        <span class="hljs-keyword">if</span> (Objects.equals(formCode, redisCode)) &#123;<br>            <span class="hljs-comment">// 6.如果验证码一致，则从redis中删除</span><br>            redisRemoteService.RemoveRedisKeyByKeyRemote(redisCode);<br><br>            <span class="hljs-comment">// 7.执行密码加密</span><br>            String userpswd = memberVO.getUserpswd();<br>            BCryptPasswordEncoder bCryptPasswordEncoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>            String passWord = bCryptPasswordEncoder.encode(userpswd);<br>            memberVO.setUserpswd(passWord);<br><br>            <span class="hljs-comment">// 8.执行保存，使用BeanUtil工具类进行属性拷贝</span><br>            MemberPO memberPO = <span class="hljs-keyword">new</span> MemberPO();<br>            BeanUtils.copyProperties(memberVO, memberPO);<br>            ResultEntity&lt;String&gt; saveMemberResultEntity = mysqlRemoteService.saveMember(memberPO);<br><br>            <span class="hljs-comment">// 保存失败</span><br>            <span class="hljs-keyword">if</span> (ResultEntity.FAILED.equals(saveMemberResultEntity.getResult())) &#123;<br>                modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, saveMemberResultEntity.getMessage());<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-reg&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 使用重定向避免重复提交表单</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/auth/to/member/login/page&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>view-controller跳转登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdWebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 转发请求的url路径和视图名</span><br>        String registerUrl = <span class="hljs-string">&quot;/auth/to/member/reg/page&quot;</span>;<br>        String registerViewName = <span class="hljs-string">&quot;member-reg&quot;</span>;<br>        <span class="hljs-comment">// 登录请求的url路径和视图名</span><br>        String loginUrl = <span class="hljs-string">&quot;/auth/to/member/login/page&quot;</span>;<br>        String loginViewName = <span class="hljs-string">&quot;member-login&quot;</span>;<br><br>        <span class="hljs-comment">// 前往注册页面</span><br>        registry.addViewController(registerUrl).setViewName(registerViewName);<br>        <span class="hljs-comment">// 前往登录页面</span><br>        registry.addViewController(loginUrl).setViewName(loginViewName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>由于第一次请求redis需要建立缓存和连接，如果按照默认ribbon的工作时间来操作，第一次请求可能会导致超时，所以在yml配置文件中配置ribbon工作时间，可以避免 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="会员登录"><a href="#会员登录" class="headerlink" title="会员登录"></a>会员登录</h2><h3 id="目标-26"><a href="#目标-26" class="headerlink" title="目标"></a>目标</h3><p>在用户输入账号密码后，在数据库中进行查询信息，有就跳转页面，没有需要回显错误消息。</p><h3 id="思路-26"><a href="#思路-26" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220126172226037.png" alt="image-20220126172226037"></p><h3 id="前端-15"><a href="#前端-15" class="headerlink" title="前端"></a>前端</h3><ul><li><p>登录页完善表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/auth/member/do/login.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-log-in&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;message&#125;&quot;</span>&gt;</span>登陆失败时显示的提示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.message&#125;&quot;</span>&gt;</span>未登录时访问受限的提示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginacct&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputSuccess4&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入登录账号&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user form-control-feedback&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group has-success has-feedback&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginpswd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputSuccess4&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入登录密码&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:10px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-lock form-control-feedback&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:right;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;reg.html&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/auth/to/member/reg/page.html&#125;&quot;</span>&gt;</span>我要注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;member.html&quot;</span> &gt;</span> 登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>主页面回显用户名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> [[$&#123;session.loginMember.username&#125;]]<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="后端-14"><a href="#后端-14" class="headerlink" title="后端"></a>后端</h3><h4 id="authentication-consumer工程-1"><a href="#authentication-consumer工程-1" class="headerlink" title="authentication-consumer工程"></a>authentication-consumer工程</h4><ul><li><p>创建登录后，回显的MemberLoginVO实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemberLoginVO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer Id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/auth/member/do/login.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLogin</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;loginacct&quot;)</span> String loginacct,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;loginpswd&quot;)</span> String userpswdForm,</span></span><br><span class="hljs-params"><span class="hljs-function">        ModelMap modelMap,</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpSession session)</span> </span>&#123;<br>    <span class="hljs-comment">// 根据loginacct查找对象</span><br>    ResultEntity&lt;MemberPO&gt; memberPOResultEntity = mysqlRemoteService.getMemberPOByLoginAcctRemote(loginacct);<br><br>    <span class="hljs-comment">// 如果没有对象</span><br>    <span class="hljs-keyword">if</span> (CrowdConstant.MESSAGE_LOGIN_FAILED.equals(memberPOResultEntity.getResult())) &#123;<br>        modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, memberPOResultEntity.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-login&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 有对象则取出对象</span><br>        MemberPO memberPO = memberPOResultEntity.getData();<br><br>        <span class="hljs-comment">// 如果取出对象为空</span><br>        <span class="hljs-keyword">if</span> (memberPO == <span class="hljs-keyword">null</span>) &#123;<br>            modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_LOGIN_FAILED);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 取出对象不为空，将密码进行比较</span><br>        <span class="hljs-comment">// 注意此时是密码保存是使用的盐值加密，每次加密后的值都不相同，所以不能直接使用==判断，而是用matches方法</span><br>        String userpswdDb = memberPO.getUserpswd();<br>        BCryptPasswordEncoder bCryptPasswordEncoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        <span class="hljs-keyword">boolean</span> matches = bCryptPasswordEncoder.matches(userpswdForm, userpswdDb);<br>        <span class="hljs-keyword">if</span> (matches) &#123;<br>            <span class="hljs-comment">// 密码正确时，将数据存入封装到MemberLoginVO，并保存到session中</span><br>            MemberLoginVO memberLoginVO = <span class="hljs-keyword">new</span> MemberLoginVO(memberPO.getId(), memberPO.getUsername(), memberPO.getEmail());<br>            session.setAttribute(CrowdConstant.ATTR_NAME_LOGIN_MEMBER, memberLoginVO);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/auth/to/member/center/page&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_LOGIN_FAILED);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;member-login&quot;</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置view-controller，完成重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 主页面请求的url路径和视图名</span><br>String centerUrl = <span class="hljs-string">&quot;/auth/to/member/center/page&quot;</span>;<br>String centerViewName = <span class="hljs-string">&quot;member-center&quot;</span>;<br><br> <span class="hljs-comment">// 前往主页面</span><br>registry.addViewController(centerUrl).setViewName(centerViewName);<br></code></pre></td></tr></table></figure></li></ul><h4 id="mysql-provider工程"><a href="#mysql-provider工程" class="headerlink" title="mysql-provider工程"></a>mysql-provider工程</h4><ul><li><p>Mysql工程中handler的实现，提供接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/memberpo/by/login/acct/remote&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;MemberPO&gt; <span class="hljs-title">getMemberPOByLoginAcctRemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;loginacct&quot;)</span> String loginacct)</span> </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 1.调用本地 Service 完成查询</span><br>           MemberPO memberPO = memberService.getMemberPOByLoginAcct(loginacct);<br>           <span class="hljs-comment">// 2.如果没有抛异常，那么就返回成功的结果</span><br>           <span class="hljs-keyword">return</span> ResultEntity.successWithData(memberPO);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>           <span class="hljs-comment">// 3.如果捕获到异常则返回失败的结果</span><br>           <span class="hljs-keyword">return</span> ResultEntity.failed(e.getMessage());<br>       &#125;<br></code></pre></td></tr></table></figure></li><li><p>Mysql工程中service方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MemberPO <span class="hljs-title">getMemberPOByLoginAcct</span><span class="hljs-params">(String loginacct)</span> </span>&#123;<br>    MemberPOExample memberPOExample = <span class="hljs-keyword">new</span> MemberPOExample();<br>    MemberPOExample.Criteria criteria = memberPOExample.createCriteria();<br>    criteria.andLoginacctEqualTo(loginacct);<br>    List&lt;MemberPO&gt; memberPOList = memberPOMapper.selectByExample(memberPOExample);<br>    <span class="hljs-keyword">if</span>(memberPOList == <span class="hljs-keyword">null</span> || memberPOList.size() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> memberPOList.get(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="api工程-1"><a href="#api工程-1" class="headerlink" title="api工程"></a>api工程</h4><ul><li><p>API工程中使用fegin调用Mysql工程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;atguigu-crowd-mysql&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MysqlRemoteService</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/get/memberpo/by/login/acct/remote&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;MemberPO&gt; <span class="hljs-title">getMemberPOByLoginAcctRemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;loginacct&quot;)</span> String loginacct)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="退出登录-1"><a href="#退出登录-1" class="headerlink" title="退出登录"></a>退出登录</h2><h3 id="目标-27"><a href="#目标-27" class="headerlink" title="目标"></a>目标</h3><p>点击退出登录，返回到登录页面</p><h3 id="思路-27"><a href="#思路-27" class="headerlink" title="思路"></a>思路</h3><p>点击登录后，清除session</p><h3 id="前端-16"><a href="#前端-16" class="headerlink" title="前端"></a>前端</h3><p>修改超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/auth/member/logout.html&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-off&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 退出系统<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="后端-15"><a href="#后端-15" class="headerlink" title="后端"></a>后端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/auth/member/logout.html&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLoginOut</span><span class="hljs-params">(HttpSession session)</span></span>&#123;<br>    session.invalidate();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost/&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录检查-1"><a href="#登录检查-1" class="headerlink" title="登录检查"></a>登录检查</h2><h3 id="目标-28"><a href="#目标-28" class="headerlink" title="目标"></a>目标</h3><p>把项目中必须登录才能访问的功能保护起来，如果没有登录就访问则跳转到登录页面。</p><h3 id="思路-28"><a href="#思路-28" class="headerlink" title="思路"></a>思路</h3><h4 id="总思路"><a href="#总思路" class="headerlink" title="总思路"></a>总思路</h4><p>使用<strong>网关的filter</strong>功能实现</p><p><img src="/img/atcrowdfunding.assets/image-20220127123516561.png" alt="image-20220127123516561"></p><h4 id="session问题"><a href="#session问题" class="headerlink" title="session问题"></a>session问题</h4><p>在分布式架构中，不同工程在不同的tomcat上，在登录时存入的session和在其他工程之间是<strong>不互通的</strong>。</p><p><img src="/img/atcrowdfunding.assets/image-20220127094643289.png" alt="image-20220127094643289"></p><p>需要使用<strong>SpringSession</strong>，会将session存入redis中，工作原理如下</p><p><img src="/img/atcrowdfunding.assets/image-20220127113122282.png" alt="image-20220127113122282"></p><h3 id="后端-16"><a href="#后端-16" class="headerlink" title="后端"></a>后端</h3><h4 id="解决session共享"><a href="#解决session共享" class="headerlink" title="解决session共享"></a>解决session共享</h4><ul><li><p>在<strong>zuul</strong>和<strong>authentication</strong>工程导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入 springboot&amp;redis 整合场景 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- 引入 springboot&amp;springsession 整合场景 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<strong>zuul</strong>和<strong>authentication</strong>工程的yml配置文件中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">redis:</span>    <span class="hljs-comment"># 配置redis的地址</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.130</span><br><span class="hljs-attr">session:</span>  <span class="hljs-comment"># session存储的类型</span><br>  <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="放行静态资源"><a href="#放行静态资源" class="headerlink" title="放行静态资源"></a>放行静态资源</h4><p>创建工具类，放行静态资源和登录页以及登录请求，定义判断是否为静态资源的方法（使用截取的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessPassResources</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;String&gt; PASS_RES_SET = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();       <span class="hljs-comment">// 放行的路径</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/&quot;</span>);<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/auth/to/member/reg/page&quot;</span>);<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/auth/to/member/login/page&quot;</span>);<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/auth/member/logout&quot;</span>);<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/auth/member/do/login&quot;</span>);<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/auth/do/member/register&quot;</span>);<br>        PASS_RES_SET.add(<span class="hljs-string">&quot;/auth/member/send/short/message.json&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;String&gt; STATIC_RES_SET = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();    <span class="hljs-comment">// 放行的静态资源</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;bootstrap&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;css&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;fonts&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;img&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;jquery&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;layer&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;script&quot;</span>);<br>        STATIC_RES_SET.add(<span class="hljs-string">&quot;ztree&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judgeCurrentServletPathWhetherStaticResource</span><span class="hljs-params">(String servletPath)</span></span>&#123;<br><br>        <span class="hljs-comment">// 字符串无效的情况</span><br>        <span class="hljs-keyword">if</span> (servletPath == <span class="hljs-keyword">null</span> || servletPath.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(CrowdConstant.MESSAGE_STRING_INVALIDATE);<br>        &#125;<br><br>        <span class="hljs-comment">// 以”/“截取字符串</span><br>        String[] split = servletPath.split(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">// 获取的字符数组中第一个/的左边为空字符串，考虑到他的索引为0，所以我们需要一级路径判断，取索引为1的字符串</span><br>        String splitFirst = split[<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// 判断是否在静态资源中</span><br>        <span class="hljs-keyword">return</span> STATIC_RES_SET.contains(splitFirst);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zuul工程"><a href="#zuul工程" class="headerlink" title="zuul工程"></a>zuul工程</h4><ul><li><p>引入工具类依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 依赖工具类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding05-common-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建zuulFilter过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdAccessFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ZuulFilter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">filterType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// pre表示在微服务前拦截</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pre&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">filterOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 只有一个filter不设置次序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 使用ThreadLocal线程本地化技术获取request</span><br>        RequestContext currentContext = RequestContext.getCurrentContext();<br>        HttpServletRequest request = currentContext.getRequest();<br><br>        <span class="hljs-comment">// 根据request获取请求路径</span><br>        String servletPath = request.getServletPath();<br><br>        <span class="hljs-comment">// 判断路径是否需要放行</span><br>        <span class="hljs-keyword">boolean</span> containPath = AccessPassResources.PASS_RES_SET.contains(servletPath);<br><br>        <span class="hljs-comment">// 如果路径在放行的set集合中，返回false放行</span><br>        <span class="hljs-keyword">if</span> (containPath)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断路径是否为静态资源</span><br>        <span class="hljs-keyword">boolean</span> currentServletPathWhetherStaticResource = AccessPassResources.judgeCurrentServletPathWhetherStaticResource(servletPath);<br><br>        <span class="hljs-comment">// 为静态资源则，返回false放行，反之则返回true执行run方法</span><br>        <span class="hljs-keyword">return</span> !currentServletPathWhetherStaticResource;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ZuulException </span>&#123;<br>        <span class="hljs-comment">// 使用ThreadLocal线程本地化技术获取request</span><br>        RequestContext currentContext = RequestContext.getCurrentContext();<br>        HttpServletRequest request = currentContext.getRequest();<br><br>        <span class="hljs-comment">// 从request中获取session对象</span><br>        HttpSession session = request.getSession();<br><br>       <span class="hljs-comment">// 从session中取出保存的登录对象</span><br>        Object loginMember =  session.getAttribute(CrowdConstant.ATTR_NAME_LOGIN_MEMBER);<br><br>        <span class="hljs-comment">// 如果没有登录对象</span><br>        <span class="hljs-keyword">if</span> (loginMember == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 从 currentContext 对象中获取 Response 对象</span><br>            HttpServletResponse response = currentContext.getResponse();<br><br>            <span class="hljs-comment">// 将提示消息存入session域</span><br>            session.setAttribute(CrowdConstant.ATTR_NAME_LOGIN_MEMBER,CrowdConstant.MESSAGE_ACCESS_FORBIDEN);<br><br>            <span class="hljs-comment">// 重定向到登录页面</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 直接重定向登录页面，而不是登录请求</span><br>                response.sendRedirect(<span class="hljs-string">&quot;/auth/to/member/login/page&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意yml配置文件设置，设置<strong>sensitive-headers: “*”</strong> 防止在重定向后无法保存原来的请求体和请求体（session信息）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">ignored-services:</span> <span class="hljs-string">&quot;*&quot;</span>              <span class="hljs-comment"># 忽略原本微服务名称</span><br>  <span class="hljs-attr">sensitive-headers:</span> <span class="hljs-string">&quot;*&quot;</span>             <span class="hljs-comment"># 在zuul向其他微服务重定向时保持原本的请求体和响应头信息</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="找不到MemberLoginVO"><a href="#找不到MemberLoginVO" class="headerlink" title="找不到MemberLoginVO"></a>找不到MemberLoginVO</h4><p>zuul工程<strong>注意依赖entity</strong>，不然会报错找不到MemberLoginVO</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 依赖entity类解决序列化bug --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding09-member-entity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="重定向问题"><a href="#重定向问题" class="headerlink" title="重定向问题"></a>重定向问题</h4><p>分布式架构工程的端口不一致，相当于2个不同网站，在访问时会有session域不同步的问题，所以<strong>重定向统一修改问通过网关的80端口访问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost/...&quot;</span>;<br></code></pre></td></tr></table></figure><p>此时需要修改MemberHandler中的重定向的地址，以后请求通过网关访问时，会拦截且统一保存session</p><h3 id="前端-17"><a href="#前端-17" class="headerlink" title="前端"></a>前端</h3><p>注意在登录页面回显zuul存入session的信息，此时的错误是在session中取得</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.message&#125;&quot;</span>&gt;</span>zuulfilter过滤后显示的登录提示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="发起项目"><a href="#发起项目" class="headerlink" title="发起项目"></a>发起项目</h1><h2 id="OSS存储"><a href="#OSS存储" class="headerlink" title="OSS存储"></a>OSS存储</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>创建bucket，注意<strong>一定要设置为公共读</strong></p><p><img src="/img/atcrowdfunding.assets/image-20220128135845767.png" alt="image-20220128135845767"></p></li><li><p>创建目录</p></li></ul><p><img src="/img/atcrowdfunding.assets/image-20220128135554258.png" alt="image-20220128135554258"></p><ul><li><p>上传文件</p><p><img src="/img/atcrowdfunding.assets/image-20220128135734986.png" alt="image-20220128135734986"></p></li></ul><h3 id="Java-程序调用OSS服务接口"><a href="#Java-程序调用OSS服务接口" class="headerlink" title="Java 程序调用OSS服务接口"></a>Java 程序调用OSS服务接口</h3><p><img src="/img/atcrowdfunding.assets/image-20220128140158931.png" alt="image-20220128140158931"></p><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>访问密钥 AccessKey（AK）相当于登录密码，只是使用场景不同。AccessKey 用于程序方式调 用云服务 API，而登录密码用于登录控制台。如果您不需要调用 API，那么就不需要创建 AccessKey。 您可以使用 AccessKey 构造一个 API 请求（或者使用云服务 SDK）来操作资源。AccessKey 包 括 AccessKeyId 和 AccessKeySecret。 </p><p>AccessKeyId 用于标识用户，相当于账号。 </p><p>AccessKeySecret 是用来验证用户的密钥。AccessKeySecret 必须保密。</p><p><strong>禁止使用主账号AK</strong>，因为主账号AK泄露会威胁您所有资源的安全。请使用子账号（RAM 用户）AK 进行操作，可有效降低 AK 泄露的风险。</p><h4 id="创建子账号-AK"><a href="#创建子账号-AK" class="headerlink" title="创建子账号 AK"></a>创建子账号 AK</h4><ol><li><p>点击头像 -&gt; 点击AccessKey管理</p></li><li><p><img src="/img/atcrowdfunding.assets/image-20220128140433997.png" alt="image-20220128140433997"></p></li><li><p>创建用户</p><p><img src="/img/atcrowdfunding.assets/image-20220128140812596-16433501395251.png" alt="image-20220128140812596"></p><p>创建后注意记住<strong>AccessKey secret</strong>或者<strong>下载CSV文件</strong>，后边需要连接，填写验证码，即可</p></li><li><p>添加权限</p><p><img src="/img/atcrowdfunding.assets/image-20220128141218285.png" alt="image-20220128141218285"></p></li><li><p>授权权限</p><p><img src="/img/atcrowdfunding.assets/image-20220128141332996.png" alt="image-20220128141332996"></p><p>确定之后，就创建好了子账号</p></li><li><p>点击授权可以查看</p><p><img src="/img/atcrowdfunding.assets/image-20220128142652701.png" alt="image-20220128142652701"></p></li></ol><h4 id="将OSS引入项目"><a href="#将OSS引入项目" class="headerlink" title="将OSS引入项目"></a>将OSS引入项目</h4><ul><li><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding09-member-entity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建OSSproperties类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OSSProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String endPoint;<br><br>    <span class="hljs-keyword">private</span> String bucketName;<br><br>    <span class="hljs-keyword">private</span> String accessKeyId;<br><br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br><br>    <span class="hljs-keyword">private</span> String bucketDomain;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件</p><p>注意配置OSSproperties需要的属性<strong>aliyun.oss</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-project</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>  <span class="hljs-attr">redis:</span> <span class="hljs-comment"># 配置redis的地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.130</span><br>  <span class="hljs-attr">session:</span> <span class="hljs-comment"># session存储的类型</span><br>    <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">access-key-id:</span>    <span class="hljs-comment"># 你创建子账户的AccessKey ID</span><br>    <span class="hljs-attr">access-key-secret:</span>  <span class="hljs-comment"># 你创建子账户的AccessKey secret</span><br>    <span class="hljs-attr">bucket-domain:</span> <span class="hljs-string">project-atcrowdfunding.oss-cn-chengdu.aliyuncs.com</span> <span class="hljs-comment"># bucket中查找外网访问域名</span><br>    <span class="hljs-attr">bucket-name:</span> <span class="hljs-string">project-atcrowdfunding</span><br>    <span class="hljs-attr">end-point:</span> <span class="hljs-string">oss-cn-chengdu.aliyuncs.com</span><br></code></pre></td></tr></table></figure></li><li><p>在<strong>CrowdUtil</strong>类中添加上传工具静态方法</p><p>先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>uploadFileToOSS方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultEntity&lt;String&gt; <span class="hljs-title">uploadFileToOSS</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        String endPoint,</span></span><br><span class="hljs-params"><span class="hljs-function">        String accessKeyId,</span></span><br><span class="hljs-params"><span class="hljs-function">        String accessKeySecret,</span></span><br><span class="hljs-params"><span class="hljs-function">        InputStream inputStream,</span></span><br><span class="hljs-params"><span class="hljs-function">        String bucketName,</span></span><br><span class="hljs-params"><span class="hljs-function">        String bucketDomain,</span></span><br><span class="hljs-params"><span class="hljs-function">        String originalName )</span></span>&#123;<br>  <br>    <span class="hljs-comment">// 创建OSSClient实例</span><br>    OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endPoint,accessKeyId,accessKeySecret);<br>  <br>    <span class="hljs-comment">// 生成上传文件的目录，按照日期来划分目录</span><br>    String folderName = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>).format(<span class="hljs-keyword">new</span> Date());<br>  <br>    <span class="hljs-comment">// 生成上传文件在OSS服务器上保存的文件名,通过uuid生成随机uuid，将其中的“-”删去（替换成空字符串）</span><br>    String fileMainName = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>  <br>    <span class="hljs-comment">// 从原始文件名中获取文件扩展名</span><br>    String extensionName = originalName.substring(originalName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>  <br>    <span class="hljs-comment">// 使用目录、文件主体名称、文件扩展名拼接得到对象名称</span><br>    String objectName = folderName + <span class="hljs-string">&quot;/&quot;</span> + fileMainName + extensionName;<br>  <br>  <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 调用OSS客户端对象的方法上传文件并获取响应结果数据</span><br>        PutObjectResult putObjectResult = ossClient.putObject(bucketName,objectName,inputStream);<br>  <br>        <span class="hljs-comment">// 从响应结果中获取具体的响应消息</span><br>        ResponseMessage responseMessage = putObjectResult.getResponse();<br>  <br>        <span class="hljs-comment">// 根据响应状态判断是否成功</span><br>        <span class="hljs-keyword">if</span> (responseMessage == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 拼接访问刚刚上传的文件的路径</span><br>            String ossFileAccessPath = bucketDomain + <span class="hljs-string">&quot;/&quot;</span> + objectName;<br>  <br>            <span class="hljs-comment">// 返回成功，并带上访问路径</span><br>            <span class="hljs-keyword">return</span> ResultEntity.successWithData(ossFileAccessPath);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 获取响应状态码</span><br>            <span class="hljs-keyword">int</span> statusCode = responseMessage.getStatusCode();<br>            <span class="hljs-comment">// 没有成功 获取错误消息</span><br>            String errorMessage = responseMessage.getErrorResponseAsString();<br>  <br>            <span class="hljs-keyword">return</span> ResultEntity.failed(<span class="hljs-string">&quot;当前响应状态码=&quot;</span> + statusCode + <span class="hljs-string">&quot; 错误消息=&quot;</span> + errorMessage);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(e.getMessage());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 关闭OSSClient</span><br>        ossClient.shutdown();<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="目标-29"><a href="#目标-29" class="headerlink" title="目标"></a>目标</h2><p>将各个表单页面提交的数据汇总到一起保存到数据库。</p><h2 id="思路-29"><a href="#思路-29" class="headerlink" title="思路"></a>思路</h2><p><img src="/img/atcrowdfunding.assets/image-20220128160654661.png" alt="image-20220128160654661"></p><h2 id="后端-17"><a href="#后端-17" class="headerlink" title="后端"></a>后端</h2><h3 id="逆向工程-4"><a href="#逆向工程-4" class="headerlink" title="逆向工程"></a>逆向工程</h3><ul><li><p>创建发起项目需要的数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 分类表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_type ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;分类名称&#x27;</span>, <br>remark <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;分类介绍&#x27;</span>,<br> <span class="hljs-keyword">primary</span> key (id) );<br> <br># 项目分类中间表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_project_type ( <br>id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>projectid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br>typeid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br><span class="hljs-keyword">primary</span> key (id) );<br><br># 标签表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_tag ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>pid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br> name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br> <span class="hljs-keyword">primary</span> key (id) );<br> <br># 项目标签中间表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_project_tag(<br> id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>projectid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br>tagid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br><span class="hljs-keyword">primary</span> key (id) );<br><br>#项目表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_project ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>project_name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;项目名称&#x27;</span>,<br>project_description <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;项目描述&#x27;</span>,<br>money <span class="hljs-type">bigint</span> (<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;筹集金额&#x27;</span>, <br><span class="hljs-keyword">day</span> <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;筹集天数&#x27;</span>,<br>status <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) comment <span class="hljs-string">&#x27;0-即将开始，1-众筹中，2-众筹成功，3-众筹失败 &#x27;</span>,<br>deploydate <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;项目发起时间&#x27;</span>,<br>supportmoney <span class="hljs-type">bigint</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;已筹集到的金额&#x27;</span>, <br>supporter <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;支持人数&#x27;</span>, <br>completion <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) comment <span class="hljs-string">&#x27;百分比完成度&#x27;</span>, <br>memberid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;发起人的会员 id&#x27;</span>, <br>createdate <span class="hljs-type">varchar</span>(<span class="hljs-number">19</span>) comment <span class="hljs-string">&#x27;项目创建时间&#x27;</span>, <br>follower <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;关注人数&#x27;</span>, <br>header_picture_path <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;头图路径&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (id) );<br><br># 项目表项目详情图片表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_project_item_pic ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>projectid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br>item_pic_path <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>), <br><span class="hljs-keyword">primary</span> key (id) );<br><br># 项目发起人信息表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_member_launch_info( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>memberid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;会员 id&#x27;</span>, <br>description_simple <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;简单介绍&#x27;</span>, <br>description_detail <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;详细介绍&#x27;</span>, <br>phone_num <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;联系电话&#x27;</span>, <br>service_num <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;客服电话&#x27;</span>, <br><span class="hljs-keyword">primary</span> key (id) );<br><br># 回报信息表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_return ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, <br>projectid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>), <br>type <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) comment <span class="hljs-string">&#x27;0 - 实物回报， 1 虚拟物品回报&#x27;</span>, <br>supportmoney <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;支持金额&#x27;</span>, <br>content <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;回报内容&#x27;</span>, <br>count <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;回报产品限额，“0”为不限回报数量&#x27;</span>, <br>signalpurchase <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;是否设置单笔限购&#x27;</span>, <br>purchase <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;具体限购数量&#x27;</span>, <br>freight <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;运费，“0”为包邮&#x27;</span>, <br>invoice <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) comment <span class="hljs-string">&#x27;0 - 不开发票， 1 - 开发票&#x27;</span>, <br>returndate <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;项目结束后多少天向支持者发送回报&#x27;</span>, <br>describ_pic_path <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) comment <span class="hljs-string">&#x27;说明图片路径&#x27;</span>, <br><span class="hljs-keyword">primary</span> key (id) );<br><br># 发起人确认信息表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_member_confirm_info ( <br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment, memberid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;会员 id&#x27;</span>, <br>paynum <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) comment <span class="hljs-string">&#x27;易付宝企业账号&#x27;</span>, <br>cardnum <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) comment <span class="hljs-string">&#x27;法人身份证号&#x27;</span>, <br><span class="hljs-keyword">primary</span> key (id) );<br></code></pre></td></tr></table></figure></li><li><p>逆向工程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库表名与需要的实体类对应映射的指定 --&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库表名字和我们的 entity 类对应的映射指定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_type&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;TypePO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_tag&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;TagPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_project&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;ProjectPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_project_item_pic&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;ProjectItemPicPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_member_launch_info&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;MemberLaunchInfoPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_return&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;ReturnPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_member_confirm_info&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;MemberConfirmInfoPO&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将实体类放在entity包中，接口和xml文件放在mysql-provider工程对应的包中</p></li></ul><h3 id="创建VO对象"><a href="#创建VO对象" class="headerlink" title="创建VO对象"></a>创建VO对象</h3><p>可通过尚筹网资料获取VO对象</p><p><img src="/img/atcrowdfunding.assets/image-20220128124209699.png" alt="image-20220128124209699"></p><h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><h4 id="我的众筹页面跳转"><a href="#我的众筹页面跳转" class="headerlink" title="我的众筹页面跳转"></a>我的众筹页面跳转</h4><ul><li><p>在auth工程的wen配置类添加,跳转到众筹页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 众筹页面请求的url路径和视图名</span><br>String crowdUrl = <span class="hljs-string">&quot;/member/my/crowd&quot;</span>;<br>String crowdViewName = <span class="hljs-string">&quot;member-crowd&quot;</span>;<br><span class="hljs-comment">// 前往众筹页面</span><br>registry.addViewController(crowdUrl).setViewName(crowdViewName);<br></code></pre></td></tr></table></figure></li></ul><h4 id="发起众筹页面跳转"><a href="#发起众筹页面跳转" class="headerlink" title="发起众筹页面跳转"></a>发起众筹页面跳转</h4><ul><li><p>在zuul的yml配置文件中配置访问project工程的path</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">crowd-project:</span>                              <span class="hljs-comment"># 自定义路由规则名称</span><br>  <span class="hljs-attr">service-id:</span> <span class="hljs-string">atguigu-crowd-project</span>         <span class="hljs-comment"># 微服务名称</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/project/**</span>                         <span class="hljs-comment"># auth已经通过/**访问，此时需要加个/project</span><br></code></pre></td></tr></table></figure></li><li><p>前端通过 Zuul 访问具体功能才能够保持 Cookie，进而保持 Session 一致，此时在project中创建web配置，设置view-controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>  <span class="hljs-comment">// 重定向跳转页面</span><br>        registry.addViewController(<span class="hljs-string">&quot;/agree/portal/page&quot;</span>).setViewName(<span class="hljs-string">&quot;project-agree&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/launch/project/page&quot;</span>).setViewName(<span class="hljs-string">&quot;project-launch&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/return/project/page&quot;</span>).setViewName(<span class="hljs-string">&quot;project-return&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="接收发起项目表单数据"><a href="#接收发起项目表单数据" class="headerlink" title="接收发起项目表单数据"></a>接收发起项目表单数据</h3><ul><li><p>表单提交地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;projectForm&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/project/create/project/information&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProjectConsumerHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OSSProperties ossProperties;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/create/project/information&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveProjectBasicInfo</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            // 接收表单的部分信息</span></span><br><span class="hljs-params"><span class="hljs-function">            ProjectVO projectVO,</span></span><br><span class="hljs-params"><span class="hljs-function">            // 接收上传的头图</span></span><br><span class="hljs-params"><span class="hljs-function">            MultipartFile headerPicture,</span></span><br><span class="hljs-params"><span class="hljs-function">            // 接收项目详情图片</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;MultipartFile&gt; detailPictureList,</span></span><br><span class="hljs-params"><span class="hljs-function">            // 将收集的一部分数据的ProjectVO保存到session</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpSession session,</span></span><br><span class="hljs-params"><span class="hljs-function">            // 将错误信息保存到ModelMap中</span></span><br><span class="hljs-params"><span class="hljs-function">            ModelMap modelMap</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        <span class="hljs-comment">// 如果头图为空，返回错误信息</span><br>        <span class="hljs-keyword">if</span> (headerPicture.isEmpty()) &#123;<br>            <span class="hljs-comment">// 返回错误消息</span><br>            modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_HEADER_PIC_EMPTY);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;project-launch&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 将头图上传到OSS上</span><br><br>        ResultEntity&lt;String&gt; resultEntity = CrowdUtils.uploadFileToOSS(<br>                ossProperties.getEndPoint(),<br>                ossProperties.getAccessKeyId(),<br>                ossProperties.getAccessKeySecret(),<br>                headerPicture.getInputStream(),<br>                ossProperties.getBucketName(),<br>                ossProperties.getBucketDomain(),<br>                headerPicture.getOriginalFilename()<br>        );<br><br>        <span class="hljs-keyword">if</span> (ResultEntity.FAILED.equals(resultEntity.getResult())) &#123;<br>            <span class="hljs-comment">// 上传失败则显示错误信息</span><br>            modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_HEADER_PIC_UPLOAD_FAILED);<br>            <span class="hljs-comment">// 返回上一页面</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;project-launch&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 上传成功将信息保存到projectVO中</span><br>        String data = resultEntity.getData();<br>        projectVO.setHeaderPicturePath(data);<br><br><br>        <span class="hljs-comment">// 将详情图片上传到OSS</span><br>        <span class="hljs-comment">// 创建存放图片地址的list集合</span><br>        List&lt;String&gt; detailPicturePathList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 判断详情图片是否为空</span><br>        <span class="hljs-keyword">if</span> (detailPictureList == <span class="hljs-keyword">null</span> || detailPictureList.isEmpty()) &#123;<br>            <span class="hljs-comment">// 上传失败则显示错误信息</span><br>            modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_DETAIL_PIC_EMPTY);<br>            <span class="hljs-comment">// 返回上一页面</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;project-launch&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 图片不为空，遍历详情图片</span><br>        <span class="hljs-keyword">for</span> (MultipartFile detailPicture : detailPictureList) &#123;<br>            <span class="hljs-comment">// 判断当前图片是否有效</span><br>            <span class="hljs-keyword">if</span> (detailPicture == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 上传失败则显示错误信息</span><br>                modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_DETAIL_PIC_EMPTY);<br>                <span class="hljs-comment">// 返回上一页面</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;project-launch&quot;</span>;<br>            &#125;<br><br>            ResultEntity&lt;String&gt; detailPictureResultEntity = CrowdUtils.uploadFileToOSS(<br>                    ossProperties.getEndPoint(),<br>                    ossProperties.getAccessKeyId(),<br>                    ossProperties.getAccessKeySecret(),<br>                    detailPicture.getInputStream(),<br>                    ossProperties.getBucketName(),<br>                    ossProperties.getBucketDomain(),<br>                    detailPicture.getOriginalFilename()<br>            );<br><br>            <span class="hljs-keyword">if</span> (ResultEntity.FAILED.equals(detailPictureResultEntity.getResult())) &#123;<br>                <span class="hljs-comment">// 上传失败则显示错误信息</span><br>                modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_DETAIL_PIC_UPLOAD_FAILED);<br>                <span class="hljs-comment">// 返回上一页面</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;project-launch&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 保存成功将路径存入list</span><br>            String pictureResultEntityData = detailPictureResultEntity.getData();<br>            detailPicturePathList.add(pictureResultEntityData);<br>        &#125;<br><br>        <span class="hljs-comment">// 将图片路径list集合保存在projectVO中</span><br>        projectVO.setDetailPicturePathList(detailPicturePathList);<br><br>        <span class="hljs-comment">// 将projectVO对象存入session域</span><br>        session.setAttribute(CrowdConstant.ATTR_NAME_TEMPLE_PROJECT, projectVO);<br><br>        <span class="hljs-comment">// 以网关的路径来重定向到return页面，才能保持session信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost/project/return/project/page&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="收集回报信息"><a href="#收集回报信息" class="headerlink" title="收集回报信息"></a>收集回报信息</h3><ul><li><p>前端流程</p><p><img src="/img/atcrowdfunding.assets/image-20220129210206479.png" alt="image-20220129210206479"></p></li><li><p>ajax请求保存照片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/create/upload/return/picture.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">uploadReturnPicture</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;returnPicture&quot;)</span> MultipartFile returnPicture)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 判断是否是有效上传</span><br>    <span class="hljs-keyword">boolean</span> pictureIsEmpty = returnPicture.isEmpty();<br>    <span class="hljs-keyword">if</span> (pictureIsEmpty)&#123;<br>        <span class="hljs-comment">// 如果上传文件为空</span><br>        ResultEntity.failed(CrowdConstant.MESSAGE_RETURN_PIC_EMPTY);<br>    &#125;<br><br>    <span class="hljs-comment">// 执行文件上传</span><br>    ResultEntity&lt;String&gt; returnPictureEntity = CrowdUtils.uploadFileToOSS(<br>            ossProperties.getEndPoint(),<br>            ossProperties.getAccessKeyId(),<br>            ossProperties.getAccessKeySecret(),<br>            returnPicture.getInputStream(),<br>            ossProperties.getBucketName(),<br>            ossProperties.getBucketDomain(),<br>            returnPicture.getOriginalFilename()<br>    );<br></code></pre></td></tr></table></figure></li><li><p>保存回报表单信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/create/save/return.json&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveReturn</span><span class="hljs-params">(ReturnVO returnVO, HttpSession session)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 从session中取出刚才保存的projectVO，需要进行强转</span><br>        ProjectVO projectVO = (ProjectVO) session.getAttribute(CrowdConstant.ATTR_NAME_TEMPLE_PROJECT);<br><br>        <span class="hljs-comment">// 判断return数据是否为空</span><br>        <span class="hljs-keyword">if</span> (returnVO == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(CrowdConstant.MESSAGE_TEMPLE_PROJECT_MISSING);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取projectVO中的renturnVO</span><br>        List&lt;ReturnVO&gt; returnVOList = projectVO.getReturnVOList();<br><br>        <span class="hljs-comment">// 如果returnVOList为空</span><br>        <span class="hljs-keyword">if</span> (returnVOList == <span class="hljs-keyword">null</span> || returnVOList.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 初始化List</span><br>            returnVOList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            projectVO.setReturnVOList(returnVOList);<br>        &#125;<br><br>        <span class="hljs-comment">// returnVOList不为空,将值追加进去</span><br>        returnVOList.add(returnVO);<br><br>        <span class="hljs-comment">// 重新把projectVO存入session中</span><br>        session.setAttribute(CrowdConstant.ATTR_NAME_TEMPLE_PROJECT, projectVO);<br><br>        <span class="hljs-comment">// 返回结果集</span><br>        <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-comment">// 返回失败的结果集</span><br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="点击下一步跳转"><a href="#点击下一步跳转" class="headerlink" title="点击下一步跳转"></a>点击下一步跳转</h3><ul><li><p>修改超链接标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/project/create/confirm/page&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning btn-lg&quot;</span>&gt;</span>下一步<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置view-controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.addViewController(<span class="hljs-string">&quot;/create/confirm/page&quot;</span>).setViewName(<span class="hljs-string">&quot;project-confirm&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>修改project-confirm页面</p></li></ul><h3 id="点击提交按钮确认表单"><a href="#点击提交按钮确认表单" class="headerlink" title="点击提交按钮确认表单"></a>点击提交按钮确认表单</h3><ul><li><p>在project-confirm页面修改表单提交信息，绑定提交单击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;confirmForm&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/project/create/confirm&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">     $(<span class="hljs-string">&quot;#submitBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">     $(<span class="hljs-string">&quot;#confirmForm&quot;</span>).submit();</span><br><span class="javascript">     &#125;);</span><br><span class="javascript">   &#125;);</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submitBtn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning btn-lg&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>收集表单数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/create/confirm&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveConfirm</span><span class="hljs-params">(MemberConfirmInfoVO memberConfirmInfoVO, HttpSession session, ModelMap modelMap)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 从session域读取之前的projectVO</span><br>    ProjectVO projectVO = (ProjectVO) session.getAttribute(CrowdConstant.ATTR_NAME_TEMPLE_PROJECT);<br><br>    <span class="hljs-comment">// 判断是否为空</span><br>    <span class="hljs-keyword">if</span> (projectVO == <span class="hljs-keyword">null</span>) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(CrowdConstant.MESSAGE_TEMPLE_PROJECT_MISSING);<br>    &#125;<br><br>    <span class="hljs-comment">// 将确认的信息保存在projectVO中</span><br>    projectVO.setMemberConfirmInfoVO(memberConfirmInfoVO);<br><br>    <span class="hljs-comment">// 从session域读取当前访问的用户</span><br>    MemberLoginVO memberLoginVO = (MemberLoginVO) session.getAttribute(CrowdConstant.ATTR_NAME_LOGIN_MEMBER);<br><br>    <span class="hljs-comment">// 从中取出保存进去的id值，进而保存在数据库中</span><br>    Integer memberLoginVOId = memberLoginVO.getId();<br><br>    <span class="hljs-comment">// 调用mysql的方法将projectVO保存到数据库中</span><br>    ResultEntity resultEntity = mysqlRemoteService.saveProjectVORemote(projectVO , memberLoginVOId);<br><br>    <span class="hljs-comment">// 保存失败，将错误信息保存到modelMap中</span><br>    <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(resultEntity.getResult())) &#123;<br>        modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE,resultEntity.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;project-confirm&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 保存好后将session域清空</span><br>    session.removeAttribute(CrowdConstant.MESSAGE_TEMPLE_PROJECT_MISSING);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost/projetc/create/success/page&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>声明mysql的fegin接口，注意<strong>实体类一定要使用@RequestBody</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/projectvo/remote&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity <span class="hljs-title">saveProjectVORemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ProjectVO projectVO,<span class="hljs-meta">@RequestParam(&quot;memberLoginVOId&quot;)</span> Integer memberLoginVOId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>在ProjectConsumerHandler的主启动类开启fegin代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="把项目信息保存到数据库"><a href="#把项目信息保存到数据库" class="headerlink" title="把项目信息保存到数据库"></a>把项目信息保存到数据库</h3><ul><li><p>mysql-provider工程ProjectProviderHandler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/projectvo/remote&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveProjectVORemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ProjectVO projectVO, <span class="hljs-meta">@RequestParam(&quot;memberLoginVOId&quot;)</span> Integer memberLoginVOId)</span> </span>&#123;<br>  <br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// 调用service方法进行保存</span><br>          projectService.saveProject(projectVO, memberLoginVOId);<br>  <br>          <span class="hljs-comment">// 返回结果</span><br>          <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>      &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>          exception.printStackTrace();<br>          <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>保存信息ProjectService接口的实现</p><p>注意需要修改projectPOMapper.xml文件的insertSelective方法添加 <strong>useGeneratedKeys=”true” keyProperty=”id”</strong>,来获取projectId</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProjectServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProjectService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ReturnPOMapper returnPOMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MemberConfirmInfoPOMapper memberConfirmInfoPOMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MemberLaunchInfoPOMapper memberLaunchInfoPOMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProjectPOMapper projectPOMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProjectItemPicPOMapper projectItemPicPOMapper;<br><br>    <span class="hljs-meta">@Transactional(readOnly = false, rollbackFor = Exception.class, propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveProject</span><span class="hljs-params">(ProjectVO projectVO, Integer memberLoginVOId)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 一：保存projectPO信息</span><br>        <span class="hljs-comment">// 1.创建projectPO对象</span><br>        ProjectPO projectPO = <span class="hljs-keyword">new</span> ProjectPO();<br>        <span class="hljs-comment">// 2.将projectVO的值赋值给projectPO</span><br>        BeanUtils.copyProperties(projectVO, projectPO);<br>        <span class="hljs-comment">// 3.把memberID设置到projectPO中</span><br>        projectPO.setMemberid(memberLoginVOId);<br>        <span class="hljs-comment">// 4.生成创建的时间</span><br>        String createdate = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="hljs-keyword">new</span> Date());<br>        projectPO.setCreatedate(createdate);<br>        <span class="hljs-comment">// 5.status设置为0，表示即将开始</span><br>        projectPO.setStatus(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 6.保存projectPO对象,为了获取projectPO的id属性，需要修改xml配置文件添加 useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</span><br>        projectPOMapper.insertSelective(projectPO);<br>        <span class="hljs-comment">// 7.获取id属性</span><br>        Integer projectId = projectPO.getId();<br><br>        <span class="hljs-comment">// 二： 保存项目分类的关联的相关信息</span><br>        <span class="hljs-comment">// 1.从projectVO中获取typeIdList</span><br>        List&lt;Integer&gt; typeIdList = projectVO.getTypeIdList();<br>        <span class="hljs-comment">// 2.保存typeIdList</span><br>        projectPOMapper.insertTypeRelationship(typeIdList, projectId);<br><br>        <span class="hljs-comment">// 三：保存项目标签的关联的相关信息</span><br>        <span class="hljs-comment">// 1.从projectVO中获取typeIdList</span><br>        List&lt;Integer&gt; tagIdList = projectVO.getTagIdList();<br>        <span class="hljs-comment">// 2.保存tagIdList</span><br>        projectPOMapper.insertTagRelationship(tagIdList, projectId);<br><br>        <span class="hljs-comment">// 四：保存详情图片路径</span><br>        <span class="hljs-comment">// 1.从projectVO中获取detailPicturePathList</span><br>        List&lt;String&gt; detailPicturePathList = projectVO.getDetailPicturePathList();<br>        <span class="hljs-comment">// 2.保存detailPicturePathList</span><br>        projectItemPicPOMapper.insertPathList(projectId, detailPicturePathList);<br><br>        <span class="hljs-comment">// 五：保存项目发起人信息</span><br>        MemberLauchInfoVO memberLauchInfoVO = projectVO.getMemberLauchInfoVO();<br>        MemberLaunchInfoPO memberLaunchInfoPO = <span class="hljs-keyword">new</span> MemberLaunchInfoPO();<br>        BeanUtils.copyProperties(memberLauchInfoVO, memberLaunchInfoPO);<br>        memberLaunchInfoPO.setMemberid(projectId);<br>        memberLaunchInfoPOMapper.insert(memberLaunchInfoPO);<br><br>        <span class="hljs-comment">// 六：保存项目回报信息</span><br>        List&lt;ReturnVO&gt; returnVOList = projectVO.getReturnVOList();<br>        ArrayList&lt;ReturnPO&gt; returnPOList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (ReturnVO returnVO : returnVOList) &#123;<br>            ReturnPO returnPO = <span class="hljs-keyword">new</span> ReturnPO();<br>            BeanUtils.copyProperties(returnVO , returnPO);<br>            returnPOList.add(returnPO);<br>        &#125;<br>        returnPOMapper.insertReturnPOBatch(returnPOList , projectId);<br><br>        <span class="hljs-comment">// 七：保存项目确认信息</span><br>        MemberConfirmInfoVO memberConfirmInfoVO = projectVO.getMemberConfirmInfoVO();<br>        MemberConfirmInfoPO memberConfirmInfoPO = <span class="hljs-keyword">new</span> MemberConfirmInfoPO();<br>        BeanUtils.copyProperties(memberConfirmInfoVO, memberConfirmInfoPO);<br>        memberConfirmInfoPO.setMemberid(projectId);<br>        memberConfirmInfoPOMapper.insert(memberConfirmInfoPO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对应需要添加的sql语句</p><ul><li><p>ProjectPOMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertTypeRelationship</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;typeIdList&quot;)</span> List&lt;Integer&gt; typeIdList, <span class="hljs-meta">@Param(&quot;projectId&quot;)</span> Integer projectId)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertTagRelationship</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tagIdList&quot;)</span> List&lt;Integer&gt; tagIdList, <span class="hljs-meta">@Param(&quot;projectId&quot;)</span> Integer projectId)</span></span>;<br></code></pre></td></tr></table></figure><p>ProjectPOMapper.xml文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;insertTypeRelationship&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_project_type(`projectid`,`typeid`) <span class="hljs-keyword">values</span><br>    <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;typeIdList&quot; item<span class="hljs-operator">=</span>&quot;typeId&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span><br>        (#&#123;projectId&#125; , #&#123;typeId&#125;)<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;insertTagRelationship&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_project_tag(`projectid`,`tagid`) <span class="hljs-keyword">values</span><br>    <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;tagIdList&quot; item<span class="hljs-operator">=</span>&quot;tagId&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span><br>        (#&#123;projectId&#125; , #&#123;tagId&#125;)<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ProjectItemPicPOMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertPathList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;projectId&quot;)</span> Integer projectId,<span class="hljs-meta">@Param(&quot;detailPicturePathList&quot;)</span> List&lt;String&gt; detailPicturePathList)</span></span>;<br></code></pre></td></tr></table></figure><p>ProjectItemPicPOMapper.xml文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;insertPathList&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_project_item_pic(projectid, item_pic_path) <span class="hljs-keyword">values</span><br>    <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;detailPicturePathList&quot; item<span class="hljs-operator">=</span>&quot;detailPath&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span><br>        (#&#123;projectId&#125; , #&#123;detailPath&#125;)<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ReturnPOMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertReturnPOBatch</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;returnPOList&quot;)</span> ArrayList&lt;ReturnPO&gt; returnPOList,<span class="hljs-meta">@Param(&quot;projectId&quot;)</span> Integer projectId)</span></span>;<br></code></pre></td></tr></table></figure><p>ReturnPOMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertReturnPOBatch&quot;</span>&gt;</span><br>    insert into t_return (<br>          projectid,<br>          type,<br>          supportmoney,<br>          content,<br>          count,<br>          signalpurchase,<br>          purchase,<br>          freight,<br>          invoice,<br>          returndate,<br>          describ_pic_path)<br>          values<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;returnPOList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;returnPO&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>  (<br>   #&#123;projectId&#125;,<br>   #&#123;returnPO.type&#125;,<br>   #&#123;returnPO.supportmoney&#125;,<br>   #&#123;returnPO.content&#125;,<br>   #&#123;returnPO.count&#125;,<br>   #&#123;returnPO.signalpurchase&#125;,<br>   #&#123;returnPO.purchase&#125;,<br>   #&#123;returnPO.freight&#125;,<br>   #&#123;returnPO.invoice&#125;,<br>   #&#123;returnPO.returndate&#125;,<br>   #&#123;returnPO.describPicPath&#125;<br>  )<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="前端-18"><a href="#前端-18" class="headerlink" title="前端"></a>前端</h2><ul><li><p>member-center页面添加超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group-item &quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:pointer;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/member/my/crowd&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration: none&quot;</span>&gt;</span>我的众筹<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-chevron-right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>member-crowd页面添加跳转地址，前面要写上域名（如果没有配置域名写 localhost 一样），确保通过Zuul 访问具体功能。 </p><p>因为必须通过 Zuul 访问具体功能才能够保持 Cookie，进而保持 Session 一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://localhost/project/agree/portal/page&#x27;&quot;</span>&gt;</span><br>    发起众筹<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>project-agree页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-footer&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning btn-lg&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;project/launch/project/page&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;http://localhost/project/launch/project/page&#125;&quot;</span>&gt;</span>阅读并同意协议<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="展示项目"><a href="#展示项目" class="headerlink" title="展示项目"></a>展示项目</h1><h2 id="目标-30"><a href="#目标-30" class="headerlink" title="目标"></a>目标</h2><p>在主页面上加载保存在数据库中真实的数据，按分类显示。</p><h2 id="思路-30"><a href="#思路-30" class="headerlink" title="思路"></a>思路</h2><p><img src="/img/atcrowdfunding.assets/image-20220130132931473.png" alt="image-20220130132931473"></p><h2 id="后端-18"><a href="#后端-18" class="headerlink" title="后端"></a>后端</h2><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><ul><li><p>PortalTypeVO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PortalTypeVO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String remark;<br><br>    <span class="hljs-keyword">private</span> List&lt;PortalProjectVO&gt; portalProjectVOList;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>PortalProjectVO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PortalProjectVO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer projectId;<br>    <span class="hljs-keyword">private</span> String projectName;<br>    <span class="hljs-keyword">private</span> String headerPicturePath;<br>    <span class="hljs-keyword">private</span> Integer money;<br>    <span class="hljs-keyword">private</span> String deployDate;<br>    <span class="hljs-keyword">private</span> Integer percentage;<br>    <span class="hljs-keyword">private</span> Integer supporter;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sql语句查询显示信息"><a href="#sql语句查询显示信息" class="headerlink" title="sql语句查询显示信息"></a>sql语句查询显示信息</h3><ul><li><p>ProjectPOMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;PortalTypeVO&gt; <span class="hljs-title">selectPortalTypeVOList</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>ProjectPOMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadPortalProjectListResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.crowd.entity.vo.PortalTypeVO&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 查询type中的属性值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;remark&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;remark&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过id查询project的信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;portalProjectVOList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectPortalProjectVOList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPortalTypeVOList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;loadPortalProjectListResultMap&quot;</span>&gt;</span><br>    select id, name, remark<br>    from t_type<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPortalProjectVOList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.crowd.entity.vo.PortalProjectVO&quot;</span>&gt;</span><br>        select t_project.id                                  projectId,<br>               t_project.project_name                        projectName,<br>               t_project.header_picture_path                 headerPicturePath,<br>               t_project.money                               money,<br>               t_project.deploydate                          deployDate,<br>               (t_project.supporter / t_project.money) * 100 percentage,<br>               t_project.supporter                           supporter<br>        from t_project<br>                 LEFT JOIN t_project_type on t_project.id = t_project_type.projectid<br>        where t_project_type.typeid = #&#123;id&#125;<br>        ORDER BY t_project.id DESC LIMIT 0,4;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Service接口和实现"><a href="#Service接口和实现" class="headerlink" title="Service接口和实现"></a>Service接口和实现</h3><ul><li><p>ProjectService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;PortalTypeVO&gt; <span class="hljs-title">selectPortalTypeVOList</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>ProjectServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;PortalTypeVO&gt; <span class="hljs-title">selectPortalTypeVOList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> projectPOMapper.selectPortalTypeVOList();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Mysql工程handler方法"><a href="#Mysql工程handler方法" class="headerlink" title="Mysql工程handler方法"></a>Mysql工程handler方法</h3><ul><li><p>调用service方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/portal/type/project/data/remote&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;List&lt;PortalTypeVO&gt;&gt; getPortalTypeVOList() &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        List&lt;PortalTypeVO&gt; portalTypeVOList = projectService.selectPortalTypeVOList();<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithData(portalTypeVOList);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="api工程-2"><a href="#api工程-2" class="headerlink" title="api工程"></a>api工程</h3><ul><li><p>暴露接口，注意和mysql工程中一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/portal/type/project/data/remote&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;List&lt;PortalTypeVO&gt;&gt; getPortalTypeVOList();<br></code></pre></td></tr></table></figure></li></ul><h3 id="处理页面请求handler"><a href="#处理页面请求handler" class="headerlink" title="处理页面请求handler"></a>处理页面请求handler</h3><ul><li><p>将数据存入model中，显示到页面上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">PortalPage</span><span class="hljs-params">(Model model)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 调用远程mysql工程方法</span><br>    ResultEntity&lt;List&lt;PortalTypeVO&gt;&gt; portalTypeVOListEntity = mysqlRemoteService.getPortalTypeVOList();<br><br>    <span class="hljs-comment">// 判断是否查询成功</span><br>    <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(portalTypeVOListEntity.getResult())) &#123;<br>        <span class="hljs-comment">// 将数据存入model用于前端显示</span><br>        List&lt;PortalTypeVO&gt; portalTypeVOList = portalTypeVOListEntity.getData();<br>        model.addAttribute(CrowdConstant.ATTR_NAME_PORTAL_TYPE_LIST, portalTypeVOList);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;portal&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="前端-19"><a href="#前端-19" class="headerlink" title="前端"></a>前端</h2><ul><li><p>根据modal中的数据，显示页面信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#strings.isEmpty(portal_data)&#125;&quot;</span>&gt;</span>未能找到分类信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #strings.isEmpty(portal_data)&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;type : $&#123;portal_data&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box ui-draggable&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mainBox&quot;</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mHd&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;path&quot;</span>&gt;</span><br>                              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;projects.html&quot;</span>&gt;</span>更多...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>                              <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;type.name&#125;&quot;</span>&gt;</span>科技<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;type.remark&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#FFF;&quot;</span>&gt;</span>开启智慧未来<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>                          <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mBd&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-top:10px;&quot;</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#strings.isEmpty(type.portalProjectVOList)&#125;&quot;</span>&gt;</span>未能找到当前分类的项目信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #strings.isEmpty(type.portalProjectVOList)&#125;&quot;</span>&gt;</span><br>                                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;project : $&#123;type.portalProjectVOList&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span><br>                                      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>                                          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;300x200&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;$&#123;project.headerPicturePath&#125;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/product-1.jpg&quot;</span> /&gt;</span><br>                                          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption&quot;</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;break&quot;</span>&gt;</span><br>                                                  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;project.html&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://localhost/project/get/project/detail/&#x27; + $&#123;project.projectId&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;project.projectName&#125;&quot;</span>&gt;</span>活性富氢净水直饮机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-screenshot&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;目标金额&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> $<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;project.money&#125;&quot;</span>&gt;</span>20,000<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:right;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;截至日期&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-calendar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;project.deployDate&#125;&quot;</span>&gt;</span>2017-20-20 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 4px;&quot;</span>&gt;</span><br>                                                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-success&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span> <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">th:aria-valuenow</span>=<span class="hljs-string">&quot;$&#123;project.percentage&#125;&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">th:style</span>=<span class="hljs-string">&quot;&#x27;width:&#x27;+$&#123;project.percentage&#125; + &#x27;%&#x27;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 40%&quot;</span>&gt;</span><br>                                                      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;project.percentage&#125; + &#x27;%&#x27;&quot;</span> &gt;</span>40% <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:right;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-star-empty&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;支持人数&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;project.supporter&#125;&quot;</span> &gt;</span>12345<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="显示项目详情"><a href="#显示项目详情" class="headerlink" title="显示项目详情"></a>显示项目详情</h1><h2 id="目标-31"><a href="#目标-31" class="headerlink" title="目标"></a>目标</h2><p>点击项目，显示项目详情</p><h2 id="思路-31"><a href="#思路-31" class="headerlink" title="思路"></a>思路</h2><p><img src="/img/atcrowdfunding.assets/image-20220130223635495.png" alt="image-20220130223635495"></p><h2 id="后端-19"><a href="#后端-19" class="headerlink" title="后端"></a>后端</h2><h3 id="创建实体类-1"><a href="#创建实体类-1" class="headerlink" title="创建实体类"></a>创建实体类</h3><ul><li><p>DetailProjectVO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetailProjectVO</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer projectId;<br>    <span class="hljs-keyword">private</span> String projectName;<br>    <span class="hljs-keyword">private</span> String projectDesc;<br>    <span class="hljs-keyword">private</span> Integer followerCount;<br>    <span class="hljs-keyword">private</span> Integer day;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> String statusText;<br>    <span class="hljs-keyword">private</span> Integer money;<br>    <span class="hljs-keyword">private</span> Integer supportMoney;<br>    <span class="hljs-keyword">private</span> Integer percentage;<br>    <span class="hljs-keyword">private</span> String deployDate;<br>    <span class="hljs-keyword">private</span> Integer lastDay;<br>    <span class="hljs-keyword">private</span> Integer supporterCount;<br>    <span class="hljs-keyword">private</span> String headerPicturePath;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; detailPicturePathList;<br>    <span class="hljs-keyword">private</span> List&lt;DetailReturnVO&gt; detailReturnVOList;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>DetailReturnVO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  每一个项目的回报信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetailReturnVO</span> </span>&#123;<br><br>    <span class="hljs-comment">// 回报主键信息</span><br>    <span class="hljs-keyword">private</span> Integer returnId;<br><br>    <span class="hljs-comment">// 当前栏位需要支持的金额</span><br>    <span class="hljs-keyword">private</span> Integer supportMoney;<br><br>    <span class="hljs-comment">// 是否限购，0时无限额，1时有限额</span><br>    <span class="hljs-keyword">private</span> Integer signalPurchase;<br><br>    <span class="hljs-comment">// 具体的限额数量</span><br>    <span class="hljs-keyword">private</span> Integer purchase;<br><br>    <span class="hljs-comment">// 当前栏位的支持者数量</span><br>    <span class="hljs-keyword">private</span> Integer supporterCount;<br><br>    <span class="hljs-comment">// 运费 0时表示包邮</span><br>    <span class="hljs-keyword">private</span> Integer freight;<br><br>    <span class="hljs-comment">// 众筹成功多少天后发货</span><br>    <span class="hljs-keyword">private</span> Integer returnDate;<br><br>    <span class="hljs-comment">// 回报的详细内容</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sql语句查找详情信息"><a href="#sql语句查找详情信息" class="headerlink" title="sql语句查找详情信息"></a>sql语句查找详情信息</h3><ul><li><p>ProjectPOMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">DetailProjectVO <span class="hljs-title">selectDetailProjectVO</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer projectId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>ProjectPOMapper.xml，多张表进行查询使用collection</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadProjectDetailResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.crowd.entity.vo.DetailProjectVO&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;projectId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;projectName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;project_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;projectDesc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;project_description&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;money&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;money&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;day&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;day&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;percentage&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;percentage&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;followerCount&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;follower&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;headerPicturePath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;header_picture_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;supporterCount&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;supporter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;supportMoney&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;supportmoney&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deployDate&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;deploydate&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;detailPicturePathList&quot;</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectDetailPicturePathList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;detailReturnVOList&quot;</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectDetailReturnVOList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectDetailReturnVOList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.crowd.entity.vo.DetailReturnVO&quot;</span>&gt;</span><br>    select<br>        id returnId,<br>        supportmoney supportMoney,<br>        content,<br>        signalpurchase signalPurchase,<br>        purchase,<br>        freight,<br>        returndate returnDate<br>    from t_return where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectDetailPicturePathList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span><br>    select item_pic_path from t_project_item_pic where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectDetailProjectVO&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;loadProjectDetailResultMap&quot;</span>&gt;</span><br>    select id,<br>           project_name,<br>           project_description,<br>           money,<br>           day,<br>           status ,<br>           deploydate,<br>           supportmoney,<br>           supporter,<br>          (supportmoney/money)*100 percentage,<br>           follower,<br>           header_picture_path<br>    from t_project where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Service接口和实现-1"><a href="#Service接口和实现-1" class="headerlink" title="Service接口和实现"></a>Service接口和实现</h3><ul><li><p>ProjectService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">DetailProjectVO <span class="hljs-title">selectDetailProjectVO</span><span class="hljs-params">(Integer projectId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>ProjectServiceImpl，注意<strong>计算剩余天数和设置状态内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DetailProjectVO <span class="hljs-title">selectDetailProjectVO</span><span class="hljs-params">(Integer projectId)</span> </span>&#123;<br>    DetailProjectVO detailProjectVO = projectPOMapper.selectDetailProjectVO(projectId);<br><br>    <span class="hljs-comment">// 根据status设置当前筹集的状态</span><br>    Integer status = detailProjectVO.getStatus();<br>    <span class="hljs-keyword">switch</span> (status) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            detailProjectVO.setStatusText(<span class="hljs-string">&quot;即将开始&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            detailProjectVO.setStatusText(<span class="hljs-string">&quot;众筹中&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            detailProjectVO.setStatusText(<span class="hljs-string">&quot;众筹成功&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            detailProjectVO.setStatusText(<span class="hljs-string">&quot;众筹失败&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用LocalDate计算众筹还剩余多少时间</span><br>    <span class="hljs-comment">// 获取当前是当年的第多少天</span><br>    LocalDate todayDate = LocalDate.now();<br>    Integer todayDateDayOfYear = todayDate.getDayOfYear();<br><br>    <span class="hljs-comment">// 获取众筹开始的时间</span><br>    String deployDate = detailProjectVO.getDeployDate();<br><br>    <span class="hljs-comment">// 转化为LocalDate类型,取出的deployDate不能为空，不然会空指针</span><br>    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    LocalDate date = LocalDate.parse(deployDate, formatter);<br>    <span class="hljs-comment">// 获取在当年的第多少天</span><br>    Integer deployDateOfYear= date.getDayOfYear();<br><br>    <span class="hljs-comment">// 获取筹集持续时间</span><br>    Integer day = detailProjectVO.getDay();<br><br>    <span class="hljs-comment">// 计算众筹的剩余时间</span><br>    Integer lastDay = day - (todayDateDayOfYear - deployDateOfYear);<br><br>    <span class="hljs-comment">// 设置lastDay剩余时间</span><br>    detailProjectVO.setLastDay(lastDay);<br>    <span class="hljs-keyword">return</span> detailProjectVO;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Mysql工程handler方法-1"><a href="#Mysql工程handler方法-1" class="headerlink" title="Mysql工程handler方法"></a>Mysql工程handler方法</h3><ul><li><p>调用接口返回信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/detail/project/remote/&#123;projectId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;DetailProjectVO&gt; <span class="hljs-title">getDetailProjectVORemote</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;projectId&quot;)</span> Integer projectId)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        DetailProjectVO detailProjectVO = projectService.selectDetailProjectVO(projectId);<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithData(detailProjectVO);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="api工程-3"><a href="#api工程-3" class="headerlink" title="api工程"></a>api工程</h3><ul><li><p>暴露接口，注意和mysql-provider中一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/detail/project/remote/&#123;projectId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;DetailProjectVO&gt; <span class="hljs-title">getDetailProjectVORemote</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;projectId&quot;)</span> Integer projectId)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="处理页面请求handler-1"><a href="#处理页面请求handler-1" class="headerlink" title="处理页面请求handler"></a>处理页面请求handler</h3><ul><li><p>路径上获取参数注意使用@PathVariable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/detail/project/remote/&#123;projectId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;DetailProjectVO&gt; <span class="hljs-title">getDetailProjectVORemote</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;projectId&quot;)</span> Integer projectId)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        DetailProjectVO detailProjectVO = projectService.selectDetailProjectVO(projectId);<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithData(detailProjectVO);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="前端-20"><a href="#前端-20" class="headerlink" title="前端"></a>前端</h2><ul><li><p>修改portal页面的a标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;project.html&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;http://localhost/project/get/project/detail/&#125; + $&#123;project.projectId&#125;&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;project.projectName&#125;&quot;</span>&gt;</span>活性富氢净水直饮机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>遍历detailProviderVO对象，显示在页面上，注意修改登录和退出登录的超链接地址</p></li></ul><h1 id="订单功能"><a href="#订单功能" class="headerlink" title="订单功能"></a>订单功能</h1><h2 id="搭建订单环境"><a href="#搭建订单环境" class="headerlink" title="搭建订单环境"></a>搭建订单环境</h2><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 依赖api包，api依赖了entity和until，不用再次依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding17-member-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用@ConfigurationProperties需要的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 springboot&amp;redis 整合场景 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 springboot&amp;springsession 整合场景 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>application配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-order</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>  <span class="hljs-attr">redis:</span> <span class="hljs-comment"># 配置redis的地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.130</span><br>  <span class="hljs-attr">session:</span> <span class="hljs-comment"># session存储的类型</span><br>    <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="逆向工程-5"><a href="#逆向工程-5" class="headerlink" title="逆向工程"></a>逆向工程</h2><ul><li><p>创建数据表</p><p><img src="/img/atcrowdfunding.assets/image-20220201142508777.png" alt="image-20220201142508777"></p><p>订单表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `project_crowd`.`t_order` ( <br>`id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br> `order_num` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;订单号&#x27;</span>, <br>`pay_order_num` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;支付宝流水号&#x27;</span>, <br>`order_amount` <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>) COMMENT <span class="hljs-string">&#x27;订单金额&#x27;</span>, <br>`invoice` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;是否开发票（0 不开，1 开）&#x27;</span>, <br>`invoice_title` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;发票抬头&#x27;</span>, <br>`order_remark` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;订单备注&#x27;</span>, <br>`address_id` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;收货地址 id&#x27;</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <br>);<br></code></pre></td></tr></table></figure><p>收货地址表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `project_crowd`.`t_address` ( <br>`id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>`receive_name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;收件人&#x27;</span>, <br>`phone_num` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;手机号&#x27;</span>,<br> `address` <span class="hljs-type">CHAR</span>(<span class="hljs-number">200</span>) COMMENT <span class="hljs-string">&#x27;收货地址&#x27;</span>, <br>`member_id` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;用户 id&#x27;</span>, <br><span class="hljs-keyword">PRIMARY</span> KEY (`id`) <br>);<br></code></pre></td></tr></table></figure><p>项目信息表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `project_crowd`.`t_order_project` ( <br>`id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br> `project_name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">200</span>) COMMENT <span class="hljs-string">&#x27;项目名称&#x27;</span>, <br>`launch_name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>) COMMENT <span class="hljs-string">&#x27;发起人&#x27;</span>,<br> `return_content` <span class="hljs-type">CHAR</span>(<span class="hljs-number">200</span>) COMMENT <span class="hljs-string">&#x27;回报内容&#x27;</span>, <br>`return_count` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;回报数量&#x27;</span>,<br> `support_price` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;支持单价&#x27;</span>, <br>`freight` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;配送费用&#x27;</span>,<br> `order_id` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;订单表的主键&#x27;</span>, <br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br> );<br></code></pre></td></tr></table></figure></li><li><p>逆向工程生成也对应的实体类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库表名与需要的实体类对应映射的指定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_order&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;OrderPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_address&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;AddressPO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_order_project&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;OrderProjectPO&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将各自文件移动到各自包中</p></li></ul><h2 id="确认回报内容"><a href="#确认回报内容" class="headerlink" title="确认回报内容"></a>确认回报内容</h2><h3 id="目标-32"><a href="#目标-32" class="headerlink" title="目标"></a>目标</h3><p>确认回报信息，填写回报数量，并结算，保存在VO对象中</p><h3 id="思路-32"><a href="#思路-32" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220201150803980.png" alt="image-20220201150803980"></p><h3 id="后端-20"><a href="#后端-20" class="headerlink" title="后端"></a>后端</h3><h4 id="创建实体类-2"><a href="#创建实体类-2" class="headerlink" title="创建实体类"></a>创建实体类</h4><p>创建VO对象与页面相对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderProjectVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String orderNum;<br><br>    <span class="hljs-keyword">private</span> String payOrderNum;<br><br>    <span class="hljs-keyword">private</span> Double orderAmount;<br> <br>    <span class="hljs-keyword">private</span> Integer invoice;<br><br>    <span class="hljs-keyword">private</span> String invoiceTitle;<br><br>    <span class="hljs-keyword">private</span> String orderRemark;<br><br>    <span class="hljs-keyword">private</span> String addressId;<br><br>    <span class="hljs-keyword">private</span> Integer signalPurchase;<br><br>    <span class="hljs-keyword">private</span> Integer purchase;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="sql语句查找VO对象相关字段"><a href="#sql语句查找VO对象相关字段" class="headerlink" title="sql语句查找VO对象相关字段"></a>sql语句查找VO对象相关字段</h4><ul><li><p>OrderPOMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">OrderProjectVO <span class="hljs-title">selectOrderProjectVO</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;returnId&quot;)</span> Integer returnId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>OrderPOMapper.xml中查询语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectOrderProjectVO&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.crowd.entity.vo.OrderProjectVO&quot;</span>&gt;</span><br>    select project_name          projectName,<br>           content               returnContent,<br>           description_simple    launchName,<br>           t_return.supportmoney supportPrice,<br>           freight               freight,<br>           count                 returnCount,<br>           signalpurchase        signalPurchase,<br>           purchase              purchase<br>    from t_project<br>             left join t_member_launch_info on t_project.memberid = t_member_launch_info.memberid<br>             left join t_return on t_project.id = t_return.projectid<br>    where t_return.id = #&#123;returnId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Service接口的实现"><a href="#Service接口的实现" class="headerlink" title="Service接口的实现"></a>Service接口的实现</h4><ul><li><p>OrderService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderService</span> </span>&#123;<br><br>    <span class="hljs-function">OrderProjectVO <span class="hljs-title">selectOrderProjectVO</span><span class="hljs-params">(Integer returnId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>OrderServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional(readOnly = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderPOMapper orderPOMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderProjectPOMapper orderProjectPOMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressPOMapper addressPOMapper;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OrderProjectVO <span class="hljs-title">selectOrderProjectVO</span><span class="hljs-params">(Integer returnId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> orderPOMapper.selectOrderProjectVO(returnId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Mysql工程handler方法-2"><a href="#Mysql工程handler方法-2" class="headerlink" title="Mysql工程handler方法"></a>Mysql工程handler方法</h4><ul><li><p>注意和api中的方法名一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderProviderHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/get/order/projectvo/remote&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;OrderProjectVO&gt; <span class="hljs-title">getOrderProjectVORemote</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestParam(&quot;returnId&quot;)</span> Integer returnId,</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpSession session)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            OrderProjectVO orderProjectVO = orderService.selectOrderProjectVO(returnId);<br>            <span class="hljs-keyword">return</span> ResultEntity.successWithData(orderProjectVO);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            exception.printStackTrace();<br>            <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="api工程-4"><a href="#api工程-4" class="headerlink" title="api工程"></a>api工程</h4><ul><li><p>暴露接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/order/projectvo/remote&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;OrderProjectVO&gt; <span class="hljs-title">getOrderProjectVORemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;returnId&quot;)</span> Integer returnId)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="order工程"><a href="#order工程" class="headerlink" title="order工程"></a>order工程</h4><h5 id="处理页面请求的handler"><a href="#处理页面请求的handler" class="headerlink" title="处理页面请求的handler"></a>处理页面请求的handler</h5><ul><li><p>使用**@PathVariable<strong>接收参数，注意将数据存入</strong>session**中方便使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MysqlRemoteService mysqlRemoteService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/confirm/return/info/&#123;returnId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showReturnConfirmInfo</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable(&quot;returnId&quot;)</span> Integer returnId,</span></span><br><span class="hljs-params"><span class="hljs-function">            HttpSession session</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span> </span>&#123;<br>        ResultEntity&lt;OrderProjectVO&gt; orderProjectVOResultEntity = mysqlRemoteService.getOrderProjectVORemote(returnId);<br><br>        <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(orderProjectVOResultEntity.getResult())) &#123;<br>            session.setAttribute(CrowdConstant.ATTR_NAME_ORDER_PROJECT, orderProjectVOResultEntity.getData());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;confirm_return&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h5><ul><li><p>开启fegin代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class , args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="前端-21"><a href="#前端-21" class="headerlink" title="前端"></a>前端</h3><ul><li><p>修改详情页的“支持”超链接</p><p>带上<strong>returnId</strong>方便查询，注意通过<strong>网关配置的路由路径访问</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning btn-lg&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://localhost/order/confirm/return/info/&#x27;+ $&#123;return.returnId&#125;&quot;</span>&gt;</span><br>    支持<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>回显数据在confirm_return.html页面，注意页面上显示用户名和退出登录的路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.projectName&#125;&quot;</span>&gt;</span>活性富氢净水直饮机<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.launchName&#125;&quot;</span>&gt;</span>深圳市博实永道电子商务有限公司<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.returnContent&#125;&quot;</span>&gt;</span><br>        每满1750人抽取一台活性富氢净水直饮机，至少抽取一台。抽取名额（小数点后一位四舍五入）=参与人数÷1750人，由苏宁官方抽取。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;returnCountInput&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:60px;&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.returnCount&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#F60&quot;</span>&gt;</span>￥[[$&#123;session.orderProjectVO.supportPrice&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.freight&#125; == 0&quot;</span>&gt;</span>免运费<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.freight&#125; &gt; 0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.orderProjectVO.freight&#125;&quot;</span>&gt;</span>运费<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>输入订单数时判断是否大于限购数和计算总金额的js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">var</span> signalPurchase = [[$&#123;session.orderProjectVO.signalPurchase&#125;]];<br><br>    <span class="hljs-keyword">var</span> purchase = [[$&#123;session.orderProjectVO.purchase&#125;]];<br><br>    <span class="hljs-keyword">var</span> freight = [[$&#123;session.orderProjectVO.freight&#125;]]<br><br>    <span class="hljs-keyword">var</span> supportPrice = [[$&#123;session.orderProjectVO.supportPrice&#125;]]<br><br>    $(<span class="hljs-string">&#x27;#myTab a&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>        e.preventDefault()<br>        $(<span class="hljs-built_in">this</span>).tab(<span class="hljs-string">&#x27;show&#x27;</span>)<br>    &#125;);<br><br>    <span class="hljs-comment">// 自动修正总价的功能</span><br>    <span class="hljs-comment">// 当id=returnCountInput的标签发送改动时触发</span><br>    $(<span class="hljs-string">&quot;#returnCountInput&quot;</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> returnCount = $.trim($(<span class="hljs-built_in">this</span>).val());<br><br>        <span class="hljs-keyword">if</span> (returnCount == <span class="hljs-literal">null</span> || returnCount == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            alert(<span class="hljs-string">&quot;请输入有效数据!&quot;</span>)<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 限购时不能超过限购数量</span><br>        <span class="hljs-keyword">if</span> (signalPurchase == <span class="hljs-number">1</span> &amp;&amp; returnCount &gt;= purchase) &#123;<br>            alert(<span class="hljs-string">&quot;不能超过限购数量!&quot;</span>);<br>            $(<span class="hljs-built_in">this</span>).val(<span class="hljs-built_in">this</span>.defaultValue);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 满足以上条件后，计算总价</span><br>        $(<span class="hljs-string">&quot;#totalAmount&quot;</span>).text(freight +(supportPrice * returnCount));<br>    &#125;);<br><br>    $(<span class="hljs-string">&quot;#submitBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> returnCount = $(<span class="hljs-string">&quot;#returnCountInput&quot;</span>).val();<br>        <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/order/confirm/order/&quot;</span> + returnCount;<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="确认订单"><a href="#确认订单" class="headerlink" title="确认订单"></a>确认订单</h2><h3 id="目标-33"><a href="#目标-33" class="headerlink" title="目标"></a>目标</h3><p>点击结算，显示用户地址信息，没有即新增，显示订单的信息和总金额。</p><h3 id="思路-33"><a href="#思路-33" class="headerlink" title="思路"></a>思路</h3><p><img src="/img/atcrowdfunding.assets/image-20220202105918540.png" alt="image-20220202105918540"></p><h3 id="后端-21"><a href="#后端-21" class="headerlink" title="后端"></a>后端</h3><h4 id="创建实体类-3"><a href="#创建实体类-3" class="headerlink" title="创建实体类"></a>创建实体类</h4><ul><li><p>创建Address实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddressVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String receiveName;<br><br>    <span class="hljs-keyword">private</span> String phoneNum;<br><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">private</span> Integer memberId;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Service接口实现"><a href="#Service接口实现" class="headerlink" title="Service接口实现"></a>Service接口实现</h4><ul><li><p>OrderService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;AddressVO&gt; <span class="hljs-title">selectAddressVO</span><span class="hljs-params">(Integer memberLoginVOId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>OrderServiceImpl实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;AddressVO&gt; <span class="hljs-title">selectAddressVO</span><span class="hljs-params">(Integer memberLoginVOId)</span> </span>&#123;<br>       AddressPOExample addressPOExample = <span class="hljs-keyword">new</span> AddressPOExample();<br>       AddressPOExample.Criteria criteria = addressPOExample.createCriteria();<br>       criteria.andMemberIdEqualTo(memberLoginVOId);<br>       ArrayList&lt;AddressVO&gt; addressVOList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       List&lt;AddressPO&gt; addressPOList = addressPOMapper.selectByExample(addressPOExample);<br>       <span class="hljs-keyword">for</span> (AddressPO addressPO : addressPOList) &#123;<br>           AddressVO addressVO = <span class="hljs-keyword">new</span> AddressVO();<br>           BeanUtils.copyProperties(addressPO, addressVO);<br>           addressVOList.add(addressVO);<br>       &#125;<br>       <span class="hljs-keyword">return</span> addressVOList;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="mysql工程handler方法"><a href="#mysql工程handler方法" class="headerlink" title="mysql工程handler方法"></a>mysql工程handler方法</h4><ul><li><p>使用@RequestParam接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/order/addressvo/remote&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;List&lt;AddressVO&gt;&gt; getAddressVORemote(<span class="hljs-meta">@RequestParam(&quot;memberLoginVOId&quot;)</span> Integer memberLoginVOId) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        List&lt;AddressVO&gt; addressPOList = orderService.selectAddressVO(memberLoginVOId);<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithData(addressPOList);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="api工程-5"><a href="#api工程-5" class="headerlink" title="api工程"></a>api工程</h4><ul><li><p>暴露接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/order/addressvo/remote&quot;)</span><br><span class="hljs-keyword">public</span> ResultEntity&lt;List&lt;AddressVO&gt;&gt; getAddressVORemote(<span class="hljs-meta">@RequestParam(&quot;memberLoginVOId&quot;)</span> Integer memberLoginVOId);<br></code></pre></td></tr></table></figure></li></ul><h4 id="order工程-1"><a href="#order工程-1" class="headerlink" title="order工程"></a>order工程</h4><ul><li><p>handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/confirm/order/&#123;returnCount&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showConfirmOrderInfo</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@PathVariable(&quot;returnCount&quot;)</span> Integer returnCount,</span></span><br><span class="hljs-params"><span class="hljs-function">        HttpSession session</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br>    <span class="hljs-comment">// 从session中取出对象</span><br>    OrderProjectVO orderProjectVO = (OrderProjectVO) session.getAttribute(CrowdConstant.ATTR_NAME_ORDER_PROJECT);<br><br>    <span class="hljs-comment">// 将接收的returnCount赋值进去，保存到session域</span><br>    orderProjectVO.setReturnCount(returnCount);<br>    session.setAttribute(CrowdConstant.ATTR_NAME_ORDER_PROJECT, orderProjectVO);<br><br>    <span class="hljs-comment">// 从session域中获取发起人的id值</span><br>    MemberLoginVO memberLoginVO = (MemberLoginVO) session.getAttribute(CrowdConstant.ATTR_NAME_LOGIN_MEMBER);<br>        Integer memberLoginVOId = memberLoginVO.getId();<br><br>        <span class="hljs-comment">// 根据memberLoginVOId查找地址信息</span><br>        ResultEntity&lt;List&lt;AddressVO&gt;&gt; addressVOListEntity = mysqlRemoteService.getAddressVORemote(memberLoginVOId);<br><br>        <span class="hljs-keyword">if</span> (ResultEntity.SUCCESS.equals(addressVOListEntity.getResult())) &#123;<br>            <span class="hljs-comment">// 将地址信息保存到session中</span><br>            session.setAttribute(CrowdConstant.ATTR_NAME_ORDER_ADDRESS, addressVOListEntity.getData());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;confirm_order&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="前端-22"><a href="#前端-22" class="headerlink" title="前端"></a>前端</h3><ul><li><p>confirm-return点击结算发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#submitBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> returnCount = $(<span class="hljs-string">&quot;#returnCountInput&quot;</span>).val();<br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/order/confirm/order/&quot;</span> + returnCount;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>将session域中的数据显示在页面上</p></li></ul><h2 id="新增地址"><a href="#新增地址" class="headerlink" title="新增地址"></a>新增地址</h2><h3 id="目标-34"><a href="#目标-34" class="headerlink" title="目标"></a>目标</h3><p>提交表单，将新增地址保存在数据库，显示在页面上。</p><h3 id="思路-34"><a href="#思路-34" class="headerlink" title="思路"></a>思路</h3><p>使用重定向，并没有使用ajax</p><p><img src="/img/atcrowdfunding.assets/image-20220202160450970.png" alt="image-20220202160450970"></p><h3 id="后端-22"><a href="#后端-22" class="headerlink" title="后端"></a>后端</h3><h4 id="order工程-2"><a href="#order工程-2" class="headerlink" title="order工程"></a>order工程</h4><ul><li><p>使用实体类接收提交的表单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/address&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveAddressVO</span><span class="hljs-params">(AddressVO addressVO, HttpSession session)</span> </span>&#123;<br>    <span class="hljs-comment">// 调用远程接口保存address</span><br>    ResultEntity&lt;String&gt; resultEntity = mysqlRemoteService.saveAddressVORemote(addressVO);<br><br>    <span class="hljs-comment">// 从session域中获取returnCount重定向页面</span><br>    OrderProjectVO orderProjectVO = (OrderProjectVO) session.getAttribute(CrowdConstant.ATTR_NAME_ORDER_PROJECT);<br>    Integer returnCount = orderProjectVO.getReturnCount();<br><br>    <span class="hljs-comment">// 重定向页面</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost/order/confirm/order/&quot;</span> + returnCount;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="api工程-6"><a href="#api工程-6" class="headerlink" title="api工程"></a>api工程</h4><ul><li><p>暴露接口，注意<strong>实体类使用@RequestBody</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/order/addressvo/remote&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveAddressVORemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AddressVO addressVO)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="远程mysql工程handler"><a href="#远程mysql工程handler" class="headerlink" title="远程mysql工程handler"></a>远程mysql工程handler</h4><ul><li><p>和api中接口一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/order/addressvo/remote&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultEntity&lt;String&gt; <span class="hljs-title">saveAddressVORemote</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AddressVO addressVO)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        orderService.insertAddressVO(addressVO);<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Service实现-5"><a href="#Service实现-5" class="headerlink" title="Service实现"></a>Service实现</h4><ul><li><p>OrderServiceji接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertAddressVO</span><span class="hljs-params">(AddressVO addressVO)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>OrderServiceImpl实现类，注意<strong>事务</strong>设置为只读，开启异常回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = false, rollbackFor = Exception.class, propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertAddressVO</span><span class="hljs-params">(AddressVO addressVO)</span> </span>&#123;<br>    AddressPO addressPO = <span class="hljs-keyword">new</span> AddressPO();<br>    BeanUtils.copyProperties(addressVO, addressPO);<br>    addressPOMapper.insert(addressPO);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="前端-23"><a href="#前端-23" class="headerlink" title="前端"></a>前端</h3><ul><li><p>提交地址表单，注意设置memberId在<strong>隐藏域</strong>中，方便插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/order/save/address&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberId&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;session.loginMember.id&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>收货人（*）<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;receiveName&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请填写收货人姓名&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>手机（*）<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请填写11位手机号码&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>地址（*）<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:400px;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请填写收货地址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>确认配送信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>点击已了解，设置立即付款的disable为空，跳转支付</p><p><img src="/img/atcrowdfunding.assets/image-20220202161302826.png" alt="image-20220202161302826"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;knowRiskAndRuleCheckbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 我已了解风险和规则<br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#knowRiskAndRuleCheckbox&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> currentStatus = <span class="hljs-built_in">this</span>.checked;<br>      <span class="hljs-keyword">if</span> (currentStatus) &#123;<br>          $(<span class="hljs-string">&quot;#payBtn&quot;</span>).prop(<span class="hljs-string">&quot;disabled&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          $(<span class="hljs-string">&quot;#payBtn&quot;</span>).prop(<span class="hljs-string">&quot;disabled&quot;</span>,<span class="hljs-string">&quot;disabled&quot;</span>);<br>      &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure></li></ul><h1 id="支付功能"><a href="#支付功能" class="headerlink" title="支付功能"></a>支付功能</h1><h2 id="使用支付宝接口"><a href="#使用支付宝接口" class="headerlink" title="使用支付宝接口"></a>使用支付宝接口</h2><h3 id="电脑网站支付"><a href="#电脑网站支付" class="headerlink" title="电脑网站支付"></a>电脑网站支付</h3><ul><li><p>进入<a href="https://opendocs.alipay.com/home">文档首页</a></p></li><li><p>应用过程</p><p><img src="/img/atcrowdfunding.assets/image-20220201102440433.png" alt="image-20220201102440433"></p><p>开发工程中使用开放平台提供的沙箱环境进行调试，沙箱环境中的应用已经创建好了，不需要执行创建流程。功能开发完成，项目上线时再创建应用。</p></li></ul><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><ul><li><p>对称加密</p><p>明文→加密→密文 </p><p>密文→解密→明文 </p><p>对称加密只需要公钥即可。</p></li><li><p>非对称加密</p><p><img src="/img/atcrowdfunding.assets/image-20220201102627368.png" alt="image-20220201102627368"></p><p>私钥加密的密文必须使用公钥解密。 </p><p>公钥加密的密文必须使用私钥解密。</p><p>私钥和公钥<strong>成对</strong>出现。</p></li><li><p>调用支付宝所使用的密钥</p><p>在支付宝开放平台的应用中设置商户公钥 ，在支付宝开放平台的应用中获取支付宝的公钥。</p><p><img src="/img/atcrowdfunding.assets/image-20220201102850329.png" alt="image-20220201102850329"></p><p>此时我们需要生成商户的私钥和支付宝公钥。</p></li><li><p>使用在线生成工具</p><p><img src="/img/atcrowdfunding.assets/image-20220201103212236.png" alt="image-20220201103212236"></p><p>生成密钥</p><p><img src="/img/atcrowdfunding.assets/image-20220201103351721.png" alt="image-20220201103351721"></p></li></ul><h3 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h3><ul><li><p>网站支付流程</p><p><img src="/img/atcrowdfunding.assets/image-20220201103658790.png" alt="image-20220201103658790"></p></li></ul><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><ul><li><p>项目发布方式</p><p><img src="/img/atcrowdfunding.assets/image-20220201103935122.png" alt="image-20220201103935122"></p></li><li><p>常规的上网方式：内网可以访问外网，而外网无法访问内网。此时内网穿透可以使外网访问内网。</p><p><img src="/img/atcrowdfunding.assets/image-20220201103949663.png" alt="image-20220201103949663"></p></li><li><p>此时我们是在<strong>内开</strong>发的，如果不使用内网穿透，支付宝就无法调用我们的项目，也无法发送请求给我们。</p></li></ul><h4 id="使用natapp"><a href="#使用natapp" class="headerlink" title="使用natapp"></a>使用natapp</h4><p>将内网外网通过natapp隧道打通,让内网的数据让外网可以获取。</p><ul><li><p>登录<a href="https://natapp.cn/">natapp官网</a>-&gt;注册-&gt;登录-&gt;实名认证</p></li><li><p>下载客户端</p></li><li><p><strong>购买免费隧道</strong></p><p><img src="/img/atcrowdfunding.assets/image-20220201104429958.png" alt="image-20220201104429958"></p><p><img src="/img/atcrowdfunding.assets/image-20220201104625717.png" alt="image-20220201104625717"></p></li><li><p>配置config.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#将本文件放置于 natapp 同级目录 程序将读取 [default] 段 </span><br><span class="hljs-comment">#在命令行参数模式如 natapp -authtoken=xxx 等相同参数将会覆盖掉此配置 </span><br><span class="hljs-comment">#命令行参数 -config= 可以指定任意 config.ini 文件 </span><br><span class="hljs-section">[default]</span> <br>authtoken= <span class="hljs-comment">#对应一条隧道的 authtoken </span><br>clienttoken= <span class="hljs-comment">#对应客户端的clienttoken,将会忽略 authtoken,若无请留 空, </span><br><span class="hljs-attr">log</span>=stdout <span class="hljs-comment">#log 日志文件,可指定本地文件, none=不做记录,stdout= 直接屏幕输出 ,默认为 none </span><br><span class="hljs-attr">loglevel</span>=DEBUG <span class="hljs-comment">#日志等级 DEBUG, INFO, WARNING, ERROR 默认为 DEBUG </span><br>http_proxy= <span class="hljs-comment">#代理设置 如 http://10.123.10.10:3128 非代理上网用 户请务必留空</span><br></code></pre></td></tr></table></figure></li><li><p>启动natapp</p><p><img src="/img/atcrowdfunding.assets/image-20220201111639472.png" alt="image-20220201111639472"></p><p>注意<strong>域名会变化</strong></p></li></ul><h3 id="使用沙箱环境"><a href="#使用沙箱环境" class="headerlink" title="使用沙箱环境"></a>使用沙箱环境</h3><p>由于在测试中使用，所以此时使用支付宝提供的沙箱测试。</p><p>进入支付宝开发者后，登录认证即可使用</p><p><img src="/img/atcrowdfunding.assets/image-20220203114809656.png" alt="image-20220203114809656"></p><ul><li><p>公钥和私钥</p><p>可以自定义自己生成的私钥和公钥，也可以使用默认提供的</p><p><img src="/img/atcrowdfunding.assets/image-20220203122257079.png" alt="image-20220203122257079"></p></li></ul><p><img src="/img/atcrowdfunding.assets/image-20220203122139762.png" alt="image-20220203122139762"></p><p>应用私钥和支付宝公钥后续调用支付宝时需要使用</p><h2 id="搭建order工程环境"><a href="#搭建order工程环境" class="headerlink" title="搭建order工程环境"></a>搭建order工程环境</h2><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 依赖api包，api依赖了entity和until，不用再次依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.crowd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding17-member-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用@ConfigurationProperties需要的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 springboot&amp;redis 整合场景 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 springboot&amp;springsession 整合场景 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    调用支付宝sdk    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.49.ALL<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>主启动类，注意<strong>开启Fegin</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrowdMainClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CrowdMainClass.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>application.yml配置文件,使用8000端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">atguigu-crowd-pay</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>  <span class="hljs-attr">redis:</span> <span class="hljs-comment"># 配置redis的地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.130</span><br>  <span class="hljs-attr">session:</span> <span class="hljs-comment"># session存储的类型</span><br>    <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1000/eureka/</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure></li><li><p>在zuul注册路由访问</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">ignored-services:</span> <span class="hljs-string">&quot;*&quot;</span>                         <span class="hljs-comment"># 忽略原本微服务名称</span><br>  <span class="hljs-attr">sensitive-headers:</span> <span class="hljs-string">&quot;*&quot;</span>                        <span class="hljs-comment"># 在zuul向其他微服务重定向时保持原本的请求体和响应头信息</span><br>    <span class="hljs-attr">crowd-pay:</span>                                  <span class="hljs-comment"># 自定义路由规则名称</span><br>      <span class="hljs-attr">service-id:</span> <span class="hljs-string">atguigu-crowd-pay</span>             <span class="hljs-comment"># 微服务名称</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/pay/**</span>                             <span class="hljs-comment"># auth已经通过/**访问，此时需要加个/pay</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="目标-35"><a href="#目标-35" class="headerlink" title="目标"></a>目标</h2><p>点击支持后，跳转到支付页面，支付后保存支付的信息到数据库。</p><h2 id="思路-35"><a href="#思路-35" class="headerlink" title="思路"></a>思路</h2><p><img src="/img/atcrowdfunding.assets/image-20220203124942748.png" alt="image-20220203124942748"></p><h2 id="前端-24"><a href="#前端-24" class="headerlink" title="前端"></a>前端</h2><ul><li><p>点击支持，提交表单</p><p>此时由于数据在多张表单，此时我们使用一个空表单，将数据全部收集在一个表单中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--建立空表单用于提交支付信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;summaryForm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/pay/generate/order&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>绑定支持单击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 支付按钮的单击响应事件</span><br>$(<span class="hljs-string">&quot;#payBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 收集要提交给表单的数据</span><br>    <span class="hljs-keyword">var</span> addressId = $(<span class="hljs-string">&quot;[name=addressId]:checked&quot;</span>).val();<br>    <span class="hljs-keyword">var</span> invoice = $(<span class="hljs-string">&quot;[name=invoiceRadio]:checked&quot;</span>).val();<br>    <span class="hljs-keyword">var</span> invoiceTitle = $.trim($(<span class="hljs-string">&quot;[name=invoiceTitle]&quot;</span>).val());<br>    <span class="hljs-keyword">var</span> remark = $.trim($(<span class="hljs-string">&quot;[name=remark]&quot;</span>).val());<br>    <span class="hljs-comment">// 提交表单</span><br>    $(<span class="hljs-string">&quot;#summaryForm&quot;</span>)<br>        .append(<span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;addressId&#x27; value=&#x27;&quot;</span>+ addressId +<span class="hljs-string">&quot;&#x27; /&gt;&quot;</span>)<br>        .append(<span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;invoice&#x27; value=&#x27;&quot;</span>+ invoice +<span class="hljs-string">&quot;&#x27; /&gt;&quot;</span>)<br>        .append(<span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;invoiceTitle&#x27; value=&#x27;&quot;</span>+ invoiceTitle +<span class="hljs-string">&quot;&#x27; /&gt;&quot;</span>)<br>        .append(<span class="hljs-string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;orderRemark&#x27; value=&#x27;&quot;</span>+ remark +<span class="hljs-string">&quot;&#x27; /&gt;&quot;</span>)<br>        .submit();<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="后端-23"><a href="#后端-23" class="headerlink" title="后端"></a>后端</h2><h3 id="创建实体类-4"><a href="#创建实体类-4" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>订单中VO对象的关系（<strong>级联</strong>关系）<img src="/img/atcrowdfunding.assets/image-20220203130239841.png" alt="image-20220203130239841"></p><ul><li><p>创建orderVO接收表单所有数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">// 主键</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">// 订单号</span><br>    <span class="hljs-keyword">private</span> String orderNum;<br><br>    <span class="hljs-comment">// 支付宝流水单号</span><br>    <span class="hljs-keyword">private</span> String payOrderNum;<br><br>    <span class="hljs-comment">// 订单金额</span><br>    <span class="hljs-keyword">private</span> Double orderAmount;<br><br>    <span class="hljs-comment">// 是否开发票</span><br>    <span class="hljs-keyword">private</span> Integer invoice;<br><br>    <span class="hljs-comment">// 发票抬头</span><br>    <span class="hljs-keyword">private</span> String invoiceTitle;<br><br>    <span class="hljs-comment">// 备注</span><br>    <span class="hljs-keyword">private</span> String orderRemark;<br><br>    <span class="hljs-keyword">private</span> String addressId;<br><br>    <span class="hljs-keyword">private</span> OrderProjectVO orderProjectVO;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="创建配置类-1"><a href="#创建配置类-1" class="headerlink" title="创建配置类"></a>创建配置类</h3><ul><li><p>配置调用支付宝时需要使用的参数，注意绑定配置文件中的前缀为ali.pay</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;ali.pay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String appId;<br>    <span class="hljs-keyword">private</span> String merchantPrivateKey;<br>    <span class="hljs-keyword">private</span> String alipayPublicKey;<br>    <span class="hljs-keyword">private</span> String notifyUrl;<br>    <span class="hljs-keyword">private</span> String returnUrl;<br>    <span class="hljs-keyword">private</span> String signType;<br>    <span class="hljs-keyword">private</span> String charset;<br>    <span class="hljs-keyword">private</span> String gatewayUrl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yml配置文件配置参数值</p><p><strong>merchantPrivateKey</strong>填写沙箱中的<strong>应用私钥</strong></p><p><strong>alipayPublicKey</strong>填写沙箱中的<strong>支付宝公钥</strong></p><p><strong>returnUrl</strong>是浏览器访问，所以通过网关调用我们的handler处理</p><p><strong>notifyUrl</strong>是支付宝调用我们返回值，此时需要<strong>内网穿透</strong>才可以访问我们，所以需要<strong>启动natapp</strong>填写<strong>内网穿透url</strong></p><p><strong>gatewayUrl</strong>沙箱提供的支付宝网关</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">ali:</span><br>  <span class="hljs-attr">pay:</span><br>    <span class="hljs-attr">appId:</span> <span class="hljs-number">2021000119607739</span><span class="hljs-comment"># 沙箱提供的appId</span><br>    <span class="hljs-attr">merchantPrivateKey:</span> <span class="hljs-string">...</span><br>    <span class="hljs-attr">alipayPublicKey:</span> <span class="hljs-string">...</span><br>    <span class="hljs-attr">notifyUrl:</span> <span class="hljs-string">http://56x6a9.natappfree.cc/pay/notify</span>     <span class="hljs-comment"># 支付宝需要访问我们，所以内网穿透启动后填写</span><br>    <span class="hljs-attr">returnUrl:</span> <span class="hljs-string">http://localhost/pay/return</span>                <span class="hljs-comment"># return时浏览器访问，所以可以通过zuul访问</span><br>    <span class="hljs-attr">signType:</span> <span class="hljs-string">RSA2</span><br>    <span class="hljs-attr">charset:</span> <span class="hljs-string">utf-8</span>                                        <span class="hljs-comment"># 字符集编码</span><br>    <span class="hljs-attr">gatewayUrl:</span> <span class="hljs-string">https://openapi.alipaydev.com/gateway.do</span>  <span class="hljs-comment"># 支付宝网关</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="handler方法处理支付请求"><a href="#handler方法处理支付请求" class="headerlink" title="handler方法处理支付请求"></a>handler方法处理支付请求</h3><ul><li><p>点击支持后处理请求，获取表单数据封装对象，并保存到<strong>session</strong>中，方便支付宝返回信息后再次封装对象，最后调用封装的方法给支付宝发送请求（注意存入和取出session保存在redis中的对象时，该对象需要<strong>序列化</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PayProperties payProperties;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MysqlRemoteService mysqlRemoteService;<br><br>    Logger logger = LoggerFactory.getLogger(PayHandler.class);<br><br>    <span class="hljs-comment">// 必须加上@ResponseBody，让当前方法的返回值成为响应体，当前方法在页面上显示支付宝支付界面</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/generate/order&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generateOrder</span><span class="hljs-params">(OrderVO orderVO, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException, UnsupportedEncodingException </span>&#123;<br>        <span class="hljs-comment">// 从seesion域中获取OrderProjectVO对象</span><br>        OrderProjectVO orderProjectVO = (OrderProjectVO) session.getAttribute(CrowdConstant.ATTR_NAME_ORDER_PROJECT);<br>        <span class="hljs-comment">// 将OrderProjectVO和OrderVO组合</span><br>        orderVO.setOrderProjectVO(orderProjectVO);<br><br>        <span class="hljs-comment">// 设置订单号</span><br>        <span class="hljs-comment">// 当前的时间</span><br>        String nowTime = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>).format(<span class="hljs-keyword">new</span> Date());<br>        <span class="hljs-comment">// UUID生成用户名</span><br>        String user = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).toUpperCase();<br>        <span class="hljs-comment">// 拼接订单号</span><br>        String orderNum = nowTime + user;<br>        <span class="hljs-comment">// 将订单号设置到OrderVO中</span><br>        orderVO.setOrderNum(orderNum);<br><br>        <span class="hljs-comment">// 计算总金额</span><br>        Double orderAmount = (<span class="hljs-keyword">double</span>) (orderProjectVO.getFreight() + orderProjectVO.getReturnCount() * orderProjectVO.getSupportPrice());<br>        orderVO.setOrderAmount(orderAmount);<br><br>        <span class="hljs-comment">// 先将orderVO保存到session域</span><br>        session.setAttribute(CrowdConstant.ATTR_NAME_ORDER, orderVO);<br><br>        <span class="hljs-comment">// 调用专门封装好的方法给支付宝接口发送请求</span><br>        <span class="hljs-keyword">return</span> sendRequestToAliPay(orderNum, orderAmount, orderProjectVO.getProjectName(), orderProjectVO.getReturnContent());<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>封装的发送请求方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送请求给支付宝</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNum    订单号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderAmount 总金额</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> subject     商品的描述，可以使用项目名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> body        商品的描述，这里可以使用回报描述</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回到页面上显示支付宝页面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> AlipayApiException</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> UnsupportedEncodingException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">sendRequestToAliPay</span><span class="hljs-params">(String orderNum, Double orderAmount, String subject, String body)</span> <span class="hljs-keyword">throws</span> AlipayApiException, UnsupportedEncodingException </span>&#123;<br><br>    <span class="hljs-comment">//获得初始化的AlipayClient</span><br>    AlipayClient alipayClient = <span class="hljs-keyword">new</span> DefaultAlipayClient(<br>            payProperties.getGatewayUrl(),<br>            payProperties.getAppId(),<br>            payProperties.getMerchantPrivateKey(),<br>            <span class="hljs-string">&quot;json&quot;</span>,<br>            payProperties.getCharset(),<br>            payProperties.getAlipayPublicKey(),<br>            payProperties.getSignType());<br><br>    <span class="hljs-comment">//设置请求参数</span><br>    AlipayTradePagePayRequest alipayRequest = <span class="hljs-keyword">new</span> AlipayTradePagePayRequest();<br>    alipayRequest.setReturnUrl(payProperties.getReturnUrl());<br>    alipayRequest.setNotifyUrl(payProperties.getNotifyUrl());<br><br><br>    alipayRequest.setBizContent(<span class="hljs-string">&quot;&#123;\&quot;out_trade_no\&quot;:\&quot;&quot;</span> + orderNum + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>            + <span class="hljs-string">&quot;\&quot;total_amount\&quot;:\&quot;&quot;</span> + orderAmount + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>            + <span class="hljs-string">&quot;\&quot;subject\&quot;:\&quot;&quot;</span> + subject + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>            + <span class="hljs-string">&quot;\&quot;body\&quot;:\&quot;&quot;</span> + body + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>            + <span class="hljs-string">&quot;\&quot;product_code\&quot;:\&quot;FAST_INSTANT_TRADE_PAY\&quot;&#125;&quot;</span>);<br><br>    <span class="hljs-comment">//若想给BizContent增加其他可选请求参数，以增加自定义超时时间参数timeout_express来举例说明</span><br>    <span class="hljs-comment">//alipayRequest.setBizContent(&quot;&#123;\&quot;out_trade_no\&quot;:\&quot;&quot;+ out_trade_no +&quot;\&quot;,&quot;</span><br>    <span class="hljs-comment">//    + &quot;\&quot;total_amount\&quot;:\&quot;&quot;+ total_amount +&quot;\&quot;,&quot;</span><br>    <span class="hljs-comment">//    + &quot;\&quot;subject\&quot;:\&quot;&quot;+ subject +&quot;\&quot;,&quot;</span><br>    <span class="hljs-comment">//    + &quot;\&quot;body\&quot;:\&quot;&quot;+ body +&quot;\&quot;,&quot;</span><br>    <span class="hljs-comment">//    + &quot;\&quot;timeout_express\&quot;:\&quot;10m\&quot;,&quot;</span><br>    <span class="hljs-comment">//    + &quot;\&quot;product_code\&quot;:\&quot;FAST_INSTANT_TRADE_PAY\&quot;&#125;&quot;);</span><br>    <span class="hljs-comment">//请求参数可查阅【电脑网站支付的API文档-alipay.trade.page.pay-请求参数】章节</span><br><br>    <span class="hljs-comment">// 返回</span><br>    <span class="hljs-keyword">return</span> alipayClient.pageExecute(alipayRequest).getBody();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>支付宝返回调用方法，/return请求后，获取支付宝返回信息，封装进对象后，将数据保存到数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/return&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">returnUrlMethod</span><span class="hljs-params">(HttpServletRequest request, HttpSession session)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException, AlipayApiException </span>&#123;<br>       <span class="hljs-comment">//获取支付宝GET过来反馈信息</span><br>       Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>       Map&lt;String, String[]&gt; requestParams = request.getParameterMap();<br>       <span class="hljs-keyword">for</span> (Iterator&lt;String&gt; iter = requestParams.keySet().iterator(); iter.hasNext(); ) &#123;<br>           String name = iter.next();<br>           String[] values = requestParams.get(name);<br>           String valueStr = <span class="hljs-string">&quot;&quot;</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>               valueStr = (i == values.length - <span class="hljs-number">1</span>) ? valueStr + values[i]<br>                       : valueStr + values[i] + <span class="hljs-string">&quot;,&quot;</span>;<br>           &#125;<br>           <span class="hljs-comment">//乱码解决，这段代码在出现乱码时使用</span><br>           <span class="hljs-comment">//valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);</span><br>           params.put(name, valueStr);<br>       &#125;<br><br>       <span class="hljs-keyword">boolean</span> signVerified = AlipaySignature.rsaCheckV1(<br>               params,<br>               payProperties.getAlipayPublicKey(),<br>               payProperties.getCharset(),<br>               payProperties.getSignType()); <span class="hljs-comment">//调用SDK验证签名</span><br><br>       <span class="hljs-comment">//——请在这里编写您的程序（以下代码仅作参考）——</span><br>       <span class="hljs-keyword">if</span> (signVerified) &#123;<br>           <span class="hljs-comment">//商户订单号</span><br>           String orderNum = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;out_trade_no&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>           <span class="hljs-comment">//支付宝交易号</span><br>           String payOrderNum = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;trade_no&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>           <span class="hljs-comment">//付款金额</span><br>           String orderAmount = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;total_amount&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>           <span class="hljs-comment">// 将数据保存到数据库</span><br>           OrderVO orderVO = (OrderVO) session.getAttribute(CrowdConstant.ATTR_NAME_ORDER);<br><br>           <span class="hljs-comment">// 设置订单号和支付宝交易号</span><br>           orderVO.setOrderNum(orderNum);<br>           orderVO.setPayOrderNum(payOrderNum);<br><br>           <span class="hljs-comment">// 调用接口执行保存</span><br>           ResultEntity&lt;String&gt; resultEntity = mysqlRemoteService.saveOrderVO(orderVO);<br><br>           logger.info(<span class="hljs-string">&quot;保存结果&quot;</span> + resultEntity.getResult());<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;trade_no:&quot;</span> + orderNum + <span class="hljs-string">&quot;&lt;br/&gt;out_trade_no:&quot;</span> + payOrderNum + <span class="hljs-string">&quot;&lt;br/&gt;total_amount:&quot;</span> + orderAmount;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;验签失败&quot;</span>;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/notify&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyUrlMethod</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException, UnsupportedEncodingException </span>&#123;<br>       <span class="hljs-comment">//获取支付宝POST过来反馈信息</span><br>       Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>       Map&lt;String, String[]&gt; requestParams = request.getParameterMap();<br>       <span class="hljs-keyword">for</span> (Iterator&lt;String&gt; iter = requestParams.keySet().iterator(); iter.hasNext(); ) &#123;<br>           String name = (String) iter.next();<br>           String[] values = (String[]) requestParams.get(name);<br>           String valueStr = <span class="hljs-string">&quot;&quot;</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>               valueStr = (i == values.length - <span class="hljs-number">1</span>) ? valueStr + values[i]<br>                       : valueStr + values[i] + <span class="hljs-string">&quot;,&quot;</span>;<br>           &#125;<br>           <span class="hljs-comment">//乱码解决，这段代码在出现乱码时使用</span><br>           valueStr = <span class="hljs-keyword">new</span> String(valueStr.getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>           params.put(name, valueStr);<br>       &#125;<br><br>       <span class="hljs-keyword">boolean</span> signVerified = AlipaySignature.rsaCheckV1(<br>               params,<br>               payProperties.getAlipayPublicKey(),<br>               payProperties.getCharset(),<br>               payProperties.getSignType()); <span class="hljs-comment">//调用SDK验证签名</span><br>       <span class="hljs-comment">//调用SDK验证签名</span><br><br>       <span class="hljs-comment">//——请在这里编写您的程序（以下代码仅作参考）——</span><br><br><span class="hljs-comment">/* 实际验证过程建议商户务必添加以下校验：</span><br><span class="hljs-comment">1、需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号，</span><br><span class="hljs-comment">2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额），</span><br><span class="hljs-comment">3、校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方（有的时候，一个商户可能有多个seller_id/seller_email）</span><br><span class="hljs-comment">4、验证app_id是否为该商户本身。</span><br><span class="hljs-comment">*/</span><br>       <span class="hljs-keyword">if</span> (signVerified) &#123;<span class="hljs-comment">//验证成功</span><br>           <span class="hljs-comment">//商户订单号</span><br>           String out_trade_no = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;out_trade_no&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>           <span class="hljs-comment">//支付宝交易号</span><br>           String trade_no = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;trade_no&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>           <span class="hljs-comment">//交易状态</span><br>           String trade_status = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;trade_status&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>           logger.info(<span class="hljs-string">&quot;验证成功!&quot;</span>);<br>           logger.info(<span class="hljs-string">&quot;out_trade_no&quot;</span> + out_trade_no);<br>           logger.info(<span class="hljs-string">&quot;trade_no&quot;</span> + trade_no);<br>           logger.info(<span class="hljs-string">&quot;trade_status&quot;</span> + trade_status);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">//验证失败</span><br>           logger.info(<span class="hljs-string">&quot;验证失败!&quot;</span>);<br>           <span class="hljs-comment">//调试用，写文本函数记录程序运行情况是否正常</span><br>           <span class="hljs-comment">// String sWord = AlipaySignature.getSignCheckContentV1(params);</span><br>           <span class="hljs-comment">// AlipayConfig.logResult(sWord);</span><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><p>此时浏览器显示返回的信息，需要将数据保存到数据库。</p><h3 id="保存信息"><a href="#保存信息" class="headerlink" title="保存信息"></a>保存信息</h3><p><img src="/img/atcrowdfunding.assets/image-20220203125343258.png" alt="image-20220203125343258"></p><h4 id="api工程-7"><a href="#api工程-7" class="headerlink" title="api工程"></a>api工程</h4><ul><li><p>暴露接口，实体类注意使用@RequestBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/ordervo/remote&quot;)</span><br><span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">saveOrderVO</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderVO orderVO)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="mysql工程"><a href="#mysql工程" class="headerlink" title="mysql工程"></a>mysql工程</h4><ul><li><p>handler方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/ordervo/remote&quot;)</span><br><span class="hljs-function">ResultEntity&lt;String&gt; <span class="hljs-title">saveOrderVO</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderVO orderVO)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        orderService.insertOrderVO(orderVO);<br>        <span class="hljs-keyword">return</span> ResultEntity.successWithoutData();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        exception.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResultEntity.failed(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>OrderService接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertOrderVO</span><span class="hljs-params">(OrderVO orderVO)</span></span>;<br></code></pre></td></tr></table></figure><p>注意需要<strong>先保存orderPO再取出id</strong>保存到orderProjectPO对象的orderId字段中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = false , propagation = Propagation.REQUIRES_NEW , rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertOrderVO</span><span class="hljs-params">(OrderVO orderVO)</span> </span>&#123;<br>    OrderPO orderPO = <span class="hljs-keyword">new</span> OrderPO();<br>    BeanUtils.copyProperties(orderVO , orderPO);<br>    OrderProjectPO orderProjectPO = <span class="hljs-keyword">new</span> OrderProjectPO();<br>    BeanUtils.copyProperties(orderVO.getOrderProjectVO() , orderProjectPO);<br>    orderPOMapper.insert(orderPO);<br>    Integer orderId = orderPO.getId();<br>    orderProjectPO.setOrderId(orderId);<br>    orderProjectPOMapper.insert(orderProjectPO);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>保存orderPO再取出id需要在xml的insert方法中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atguigu.crowd.entity.po.OrderPO&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/01/30/nginx/"/>
    <url>/2022/01/30/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p><em>Nginx</em> (engine x) 是一个高性能的<strong>HTTP</strong>和<strong>反向代理</strong>web<strong>服务器</strong>，同时也提供了IMAP/POP3/SMTP服务。其特点是<strong>占有内存少</strong>，<strong>并发能力强</strong>，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪等。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx <strong>专为性能优化而开发</strong>，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h3 id="代理方式"><a href="#代理方式" class="headerlink" title="代理方式"></a>代理方式</h3><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><blockquote><p>正向代理，意思是一个位于<strong>客户端和原始服务器</strong>(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。</p></blockquote><p><img src="/img/nginx.assets/image-20220206163420377.png" alt="image-20220206163420377"></p><p>正向代理会让服务端无法知道客户端，<strong>进而隐藏了用户端</strong>。</p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><blockquote><p>反向代理服务器位于<strong>用户与目标服务器</strong>之间，但是对于用户而言，<strong>反向代理服务器就相当于目标服务器</strong>，即用户直接访问反向代理服务器就可以获得目标服务器的资源。同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。反向代理服务器通常可用来作为Web加速，即使用反向代理作为Web服务器的前置机来降低网络和服务器的负载，提高访问效率。</p></blockquote><p><img src="/img/nginx.assets/image-20220206163721909.png" alt="image-20220206163721909"></p><p>反向代理和负载均衡会让请求自动发送给真正的服务器，让客户端无法知道访问的真正服务器的IP和端口号，<strong>进而隐藏了服务器</strong>，也保证了安全和效率。<strong>反向代理便是Nginx特性。</strong></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<strong>负载均衡（Load Balance）其意思就是分摊到多个操作单元上进行执行</strong>。</p></blockquote><p>在高并发的时候，可以增强服务器配置，但也无法应对一些高并发需求，因此可以增加服务器数量来应对高并发，负载均衡可以收集我们的请求，将请求分发到增加的不同的服务器上。</p><p><img src="/img/nginx.assets/image-20220206165310904.png" alt="image-20220206165310904"></p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><blockquote><p>动静分离是指在web服务器架构中，将<strong>静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问</strong>的架构设计方法，进而提升整个服务访问性能和可维护性。</p></blockquote><p>在web网站中，可以将静态资源部署到一台服务器，动态资源部署到一台服务器，分开2种访问请求，可以加快网站访问速度。</p><p><img src="/img/nginx.assets/image-20220206165616247.png" alt="image-20220206165616247"></p><h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><h2 id="nginx需要安装的第三方包："><a href="#nginx需要安装的第三方包：" class="headerlink" title="nginx需要安装的第三方包："></a>nginx需要安装的第三方包：</h2><ul><li><p><strong>gcc 编译器</strong>：编译需要使用。</p><p><code>yum install gcc -y</code></p></li><li><p><strong>PCRE</strong>：nginx 的 http 模块使用 pcre 来解析正则表达式。</p><p><code>yum install pcre pcre-devel -y</code></p></li><li><p><strong>zlib</strong>：nginx 使用 zlib 对 http 包的内容进行 gzip。</p><p><code>yum install -y zlib zlib-devel</code></p></li><li><p><strong>OpenSSL</strong>：nginx支持https协议，可以使用这个包来进行安全通信。</p><p><code>yum install pcre pcre-devel -y</code></p></li></ul><p>可以使用 <strong>yum list [包名] | grep [包名]</strong> 检查是否安装</p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><ul><li><p><a href="http://nginx.org/en/download.html">官网下载压缩包</a>并上传到linux</p><p>使用Xftp上传到 /usr/local 目录</p><p><img src="/img/nginx.assets/image-20220206193907550.png" alt="image-20220206193907550"></p></li><li><p>解压</p><p> <code>tar -xvf nginx-1.20.2.tar</code></p></li><li><p>解压后进入该目录</p><p><code>cd nginx-1.20.2/</code></p><p>检查配置 </p><p><code>./configure</code></p></li><li><p>编译并安装</p><p><code>make &amp;&amp; make install</code></p></li><li><p>安装成功后在local目录下会生成nginx目录</p><p><img src="/img/nginx.assets/image-20220206194334104.png" alt="image-20220206194334104"></p></li></ul><h1 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h1><p>执行nginx命令需要进入到nginx的sbin目录执行 </p><p><code>cd /usr/local/nginx/sbin</code></p><h2 id="查看Nginx版本号"><a href="#查看Nginx版本号" class="headerlink" title="查看Nginx版本号"></a>查看Nginx版本号</h2><ul><li><p>./nginx -v</p><p><img src="/img/nginx.assets/image-20220206200923747.png" alt="image-20220206200923747"></p></li></ul><h2 id="Nginx开启"><a href="#Nginx开启" class="headerlink" title="Nginx开启"></a>Nginx开启</h2><ul><li><p>进入nginx的sbin目录执行</p><p><code>./nginx</code>    开启nginx</p></li><li><p>查看进程</p><p><code>ps -ef | grep ngnix</code></p><p><img src="/img/nginx.assets/image-20220207100417241.png" alt="image-20220207100417241"></p></li><li><p>此时配置文件 .conf 中nginx默认监听80端口</p><p>打开浏览器访问linux的IP地址出现</p><p><img src="/img/nginx.assets/image-20220206195509184.png" alt="image-20220206195509184"></p><p>即表示开启成功。</p></li><li><p>失败原因：防火墙未开放80端口</p><ul><li><p>查看开放的端口号</p><p><code>firewall-cmd --list-all</code> ,此时未开放80端口</p><p><img src="/img/nginx.assets/image-20220206195633381.png" alt="image-20220206195633381"></p></li><li><p>开放80端口</p><p><code>sudo firewall-cmd --add-port=80/tcp --permanent</code></p><p>关闭80端口</p><p><code>firewall-cmd --permanent --remove-port=80/tcp</code></p></li><li><p>重启防火墙</p><p><code>firewall-cmd --reload</code></p></li><li><p>再次查看防火墙状态</p><p><img src="/img/nginx.assets/image-20220206195856355.png" alt="image-20220206195856355"></p><p>80端口已开启</p></li><li><p>或者可以直接关闭防火墙</p><p><code>systemctl stop firewalld</code></p></li></ul></li></ul><h2 id="Nginx关闭"><a href="#Nginx关闭" class="headerlink" title="Nginx关闭"></a>Nginx关闭</h2><ul><li><code>./nginx -s stop</code> 查看进程可以看见进程结束</li><li>也可以直接杀死进程</li></ul><h2 id="Nginx重新加载"><a href="#Nginx重新加载" class="headerlink" title="Nginx重新加载"></a>Nginx重新加载</h2><ul><li><p>当修改配置文件之后，不需要关闭重启，重新即可更新配置文件</p><p><code>./nginx -s reload</code></p></li></ul><h1 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h1><h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><ul><li><p>配置文件默认在nginx的conf目录下的nginx.conf</p><p><code>cd /usr/local/nginx/conf</code></p><p><img src="/img/nginx.assets/image-20220207100718339.png" alt="image-20220207100718339"></p></li></ul><h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h3><p>从配置文件到events块之间，主要<strong>会设置一些影响 nginx 服务器整体运行的配置指令</strong>，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p><figure class="highlight vala"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#user  nobody;</span><br>worker_processes  <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">#error_log  logs/error.log;</span><br><span class="hljs-meta">#error_log  logs/error.log  notice;</span><br><span class="hljs-meta">#error_log  logs/error.log  info;</span><br><br><span class="hljs-meta">#pid        logs/nginx.pid;</span><br></code></pre></td></tr></table></figure><ul><li><p>例如第一行配置的</p><p><code>#user  nobody;</code></p><p><code>worker_processes  1;</code></p><p>表示nginx处理并发的配置，worker_processes 越大，并发处理量也就越大。但可能收到硬软件制约。</p></li></ul><h2 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h2><p>events 块涉及的指令主要<strong>影响 Nginx 服务器与用户的网络连接</strong>，常用的设置包括是否开启对多 work process </p><p>下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word </p><p>process 可以同时支持的最大连接数等。<strong>这部分对nginx性能影响较大。</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li> <code>worker_connections  1024;</code></li></ul><p>  表示worker process支持的最大连接数是1024。</p><h2 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h2><p>可以<strong>嵌套多个server</strong>，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。http 块也可以包括 <strong>http 全局块</strong>、<strong>server 块</strong>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="http全局块"><a href="#http全局块" class="headerlink" title="http全局块"></a>http全局块</h3><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><h3 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h3><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个<strong>虚拟主机</strong>。而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p><p>全局server块</p><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p><p>location块</p><p><strong>一个 server 块可以配置多个 location 块</strong>。 这块的主要作用是<strong>基于 Nginx 服务器接收到的请求字符串</strong>（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。简略说：<strong>就是配置请求的路由地址，以及处理</strong>。</p><p><strong>location指令说明：</strong></p><p><img src="/img/nginx.assets/image-20220207140354166.png" alt="image-20220207140354166"></p><ul><li>= ：用于<strong>不含正则表达式的 uri 前</strong>，<strong>要求请求字符串与 uri 严格匹配</strong>，如果匹配成功，就停止继续向下搜索并立即处理该请求。</li><li>~：用于表示 uri 包含<strong>正则表达式</strong>，并且<strong>区分大小写</strong>。</li><li>~*：用于表示 uri 包含<strong>正则表达式</strong>，并且<strong>不区分大小写</strong>。</li><li>^~：用于<strong>不含正则表达式的 uri 前</strong>，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</li></ul><h1 id="Nginx配置实例"><a href="#Nginx配置实例" class="headerlink" title="Nginx配置实例"></a>Nginx配置实例</h1><h2 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><p>打开浏览器，在浏览器地址栏输入地址 <a href="http://www.123.com,跳转到liunx/">www.123.com，跳转到liunx</a> 系统 tomcat 主页面中</p><ul><li><p>在linux中安装tomcat</p><ul><li><p>通过Xftp上传tomcat压缩包</p><p><img src="/img/nginx.assets/image-20220207112315943.png" alt="image-20220207112315943"></p></li><li><p>解压压缩包</p><p><code>zip -zxf apache-tomcat-9.0.58.tar.gz</code></p></li><li><p>检查jdk是否安装</p><p><code>java -version</code></p></li><li><p>进入tomcat的bin目录执行</p><p><code>./startup.sh</code>即可开启tomcat</p></li></ul></li><li><p>放行tomcat默认的8080端口</p><p><code>sudo firewall-cmd --add-port=8080/tcp --permanent</code></p><p>重启防火墙</p><p><code>firewall-cmd --reload</code></p></li><li><p>配置Windows的域名映射路径去访问nginx</p><p><img src="/img/nginx.assets/image-20220207115900636.png" alt="image-20220207115900636"></p><p>在host文件下配置</p><p><code>192.168.241.130 www.123.com</code></p></li><li><p>配置nginx反向代理</p><p><code>cd /usr/local/nginx/conf</code></p><p><code>vim nginx.conf</code></p><p>修改以下内容：</p><p><img src="/img/nginx.assets/image-20220207120315357.png" alt="image-20220207120315357"></p></li><li><p>重启nginx</p><p>在sbin目录 <code>./nginx -s reload</code></p></li><li><p>即可通过浏览器访问ww.123.com ，由nginx代理到tomcat</p><p><img src="/img/nginx.assets/image-20220207120604111.png" alt="image-20220207120604111"></p></li></ul><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中，nginx 监听端口为 9001，访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8081，访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8082</p><ul><li><p>创建2个不同端口的tomcat服务器</p><ul><li><p>在usr/src目录下 <code>mkdir</code> 创建2个tomcat-8080和tomcat-8081文件夹，将压缩包传入，解压并开启tomcat服务，其中一个tomcat需要将端口改为8081</p></li><li><p><code>vim tomcat-8081/conf/server.xml</code> 中将冲突的<strong>8080端口改为8081</strong>，shutdown端口将8005改为8015</p></li><li><p>上传页面到<strong>两个tomcat的webapps目录</strong>下，页面自行修改来标志tomcat的不同</p><p><img src="/img/nginx.assets/image-20220207135317446.png" alt="image-20220207135317446"></p></li></ul></li><li><p>配置nginx反向代理</p><p><code>vim  /usr/local/nginx/conf/nginx.conf</code> </p><p><img src="/img/nginx.assets/image-20220207135827786.png" alt="image-20220207135827786"></p><p>此时<strong>重启nginx</strong>，使配置文件生效。</p></li><li><p>放行端口</p><p><code>sudo firewall-cmd --add-port=9001/tcp --permanent</code></p><p><code>sudo firewall-cmd --add-port=8081/tcp --permanent</code></p><p>重启防火墙</p><p><code>firewall-cmd --reload</code></p></li><li><p>测试：</p><p><img src="/img/nginx.assets/image-20220207140034966.png" alt="image-20220207140034966"></p><p><img src="/img/nginx.assets/image-20220207140050851.png" alt="image-20220207140050851"></p></li></ul><h2 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="负载均衡分配实例"><a href="#负载均衡分配实例" class="headerlink" title="负载均衡分配实例"></a>负载均衡分配实例</h3><p>访问 <a href="http://192.168.241.130/edu/test.html">http://192.168.241.130/edu/test.html</a> 通过负载均衡分配到不同的服务器。</p><ul><li><p>创建2个tomcat服务器，反向代理实例时已经配置过，此处只需修改8081端口的vod文件名为edu</p><p><img src="/img/nginx.assets/image-20220207142916040.png" alt="image-20220207142916040"></p></li><li><p>nginx配置负载均衡</p><p><img src="/img/nginx.assets/image-20220207144125212.png" alt="image-20220207144125212"></p><p>此时<strong>重启nginx</strong>，使配置文件生效。</p></li><li><p>测试：</p><p><img src="/img/nginx.assets/image-20220207144212536.png" alt="image-20220207144212536"></p><p>测试刷新会跳转到8081服务器</p><p><img src="/img/nginx.assets/image-20220207144240617.png" alt="image-20220207144240617"></p></li></ul><h3 id="负载均衡分配策略"><a href="#负载均衡分配策略" class="headerlink" title="负载均衡分配策略"></a>负载均衡分配策略</h3><ul><li><p><strong>轮询分配（默认）</strong></p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果有服务器宕机，也可以自动将宕机的服务器剔除。</p></li><li><p><strong>weight分配</strong></p><p>根据权重分配请求数量，weight代表权重为一。</p><p><img src="/img/nginx.assets/image-20220207144739420.png" alt="image-20220207144739420"></p></li><li><p><strong>ip_hash分配</strong></p><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，<strong>可以解决 session 的问题</strong>。</p><p><img src="/img/nginx.assets/image-20220207144910978.png" alt="image-20220207144910978"></p></li><li><p><strong>fair（第三方）分配</strong></p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p><img src="/img/nginx.assets/image-20220207145120576.png" alt="image-20220207145120576"></p></li></ul><h2 id="动静分离-1"><a href="#动静分离-1" class="headerlink" title="动静分离"></a>动静分离</h2><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。</p><p>两种动静分离方式：</p><ul><li><p>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。</p></li><li><p>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</p><p>通过 location 指定不同的后缀名实现不同的请求转发，同时可以<strong>设置empires</strong>使浏览器缓存过期时间，减少服务器的请求。empires设置资源过期时间后，访问时会在浏览器确认是否过期，未过期直接使用，不发送请求给服务端，适合不变动的资源。</p></li></ul><h3 id="动静分离实例"><a href="#动静分离实例" class="headerlink" title="动静分离实例"></a>动静分离实例</h3><ul><li><p>创建data文件夹，创建image和www存放静态页面和图像</p><p><img src="/img/nginx.assets/image-20220207154930177.png" alt="image-20220207154930177"></p></li><li><p>配置nginx</p><p><img src="/img/nginx.assets/image-20220207155416622.png" alt="image-20220207155416622"></p><p>此时<strong>重启nginx</strong>，使配置文件生效。</p></li><li><p>测试：</p><p>访问图片地址</p><p><img src="/img/nginx.assets/image-20220207155518931.png" alt="image-20220207155518931"></p><p>访问静态页面</p><p><img src="/img/nginx.assets/image-20220207155549496.png" alt="image-20220207155549496"></p></li></ul><h1 id="Nginx集群"><a href="#Nginx集群" class="headerlink" title="Nginx集群"></a>Nginx集群</h1><p>当服务器宕机后，nginx会通过负载均衡处理，而如果当nginx宕机后，如果配置了集群会自动使用从服务器，配置集群需要安装Keepalived，但此时Keepalived会提供一个虚拟ip，通过虚拟ip访问，当nginx宕机后，Keepalived会自动将ip绑定到另一个nginx服务器。</p><h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p><img src="/img/nginx.assets/image-20220207171653025.png" alt="image-20220207171653025"></p><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ul><li><p>此时需要2个nginx服务器，所以需要使用另一个服务器开启nginx，创建另外一个虚拟机开启，此时可以使用<a href="https://blog.csdn.net/qq_42774325/article/details/81189033">虚拟机克隆</a>，不用再次安装nginx</p><p><img src="/img/nginx.assets/image-20220207173151245.png" alt="image-20220207173151245"></p><p>克隆后修改本机的ip地址和主机名。</p></li><li><p>分别在2个服务器上开启nginx，使用浏览器测试是否可以访问</p></li><li><p>2个服务器都需要安装Keepalived</p><p>进入usr目录使用yum安装 <code>yum install keepalived -y</code></p></li><li><p>修改 Keepalived 配置文件</p><p>在 /etc/keepalived 下修改 keepalived.conf，不同的服务器注意<strong>修改内容</strong>，修改smtp_server，state，priority</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">global_defs &#123; <br> notification_email &#123; <br> <span class="hljs-symbol">acassen@</span>firewall.loc <br> <span class="hljs-symbol">failover@</span>firewall.loc <br> <span class="hljs-symbol">sysadmin@</span>firewall.loc <br> &#125; <br> <br> notification_email_from Alexandre.<span class="hljs-symbol">Cassen@</span>firewall.loc <br> smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.130</span> # 本机的IP<br> smtp_connect_timeout <span class="hljs-number">30</span> <br> router_id LVS_DEVEL <br> &#125; <br> <br>vrrp_script chk_http_port &#123; <br> script <span class="hljs-string">&quot;/usr/local/src/nginx_check.sh&quot;</span> # 脚本位置<br> <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span> #（检测脚本执行的间隔） <br> weight <span class="hljs-number">2</span><br> &#125; <br> <br>vrrp_instance VI_1 &#123; <br> state MASTER # 备份服务器上将 MASTER 改为 BACKUP <br> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens32</span> //网卡 <br> <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span> # 主、备机的 <span class="hljs-symbol">virtual_router_id</span> 必须相同 <br> <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span> # 主、备机取不同的优先级，主机值较大，备份机值较小 <br> <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span> <br> <span class="hljs-symbol">authentication</span> &#123; <br> auth_type PASS <br> auth_pass <span class="hljs-number">1111</span> <br> &#125; <br> virtual_ipaddress &#123; <br> <span class="hljs-number">192.168</span><span class="hljs-number">.241</span><span class="hljs-number">.50</span> <span class="hljs-comment">// VRRP H 虚拟地址 </span><br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>配置keepalived脚本，将其放在配置文件配置的 /usr/local/src/nginx_check.sh 下，2台服务器一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash </span><br>A=`ps -C nginx –no-header |wc -l` <br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<span class="hljs-keyword">then</span> <br> /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx <br> sleep 2 <br> <span class="hljs-keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<span class="hljs-keyword">then</span> <br> killall keepalived <br> <span class="hljs-keyword">fi</span> <br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><p>同时启动nginx和keepalived</p><p><code>./nginx</code> </p><p><code>systemctl start keepalived.service</code></p><p>可查看进程是否启动成功  <code>ps -ef | grep keepalived</code></p></li><li><p>测试：</p><p>浏览器访问</p><p><img src="/img/nginx.assets/image-20220207191930414.png" alt="image-20220207191930414"></p><p>此时停掉主服务器的nginx和keeplived</p><p>``systemctl stop keepalived.service<code>  ./nginx -s stop</code></p><p>刷新页面，还是可以访问nginx。</p></li></ul><h1 id="Nginx原理与优化参数配置"><a href="#Nginx原理与优化参数配置" class="headerlink" title="Nginx原理与优化参数配置"></a>Nginx原理与优化参数配置</h1><h2 id="master-worker工作方式"><a href="#master-worker工作方式" class="headerlink" title="master-worker工作方式"></a>master-worker工作方式</h2><ul><li><p>介绍</p><p><img src="/img/nginx.assets/image-20220207200950288.png" alt="image-20220207200950288"></p></li><li><p>工作机制</p><p><img src="/img/nginx.assets/image-20220207201001140.png" alt="image-20220207201001140"></p></li><li><p>好处：</p><ul><li>对于每个 worker 进程来说，<strong>独立的进程，不需要加锁</strong>，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快启动新的worker 进程。worker进程异常只会影响当前worker的请求，而不会影响所有请求。</li><li>可以使用 nginx -s reload 进行<strong>热部署</strong>，利用nginx进行热部署操作。</li></ul></li><li><p>需要设置多少个worker？</p><ul><li><p><strong>worker_processes</strong> 为worker的数量。</p></li><li><p>Nginx 同 redis 类似都采用了 <strong>io 多路复用机制</strong>，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 worker 数和服务器的 <strong>cpu数相等是最为适宜的</strong>。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p></li></ul></li><li><p>连接数</p><ul><li>worker_connection表示每个 worker 进程所能<strong>建立连接的最大值</strong>，<strong>发送普通静态请求占用2个连接数，而发送动态请求则会占用4个连接数</strong>（如：反向代理会建立后端连接会多占用2个连接数）</li></ul></li><li><p>最大并发数</p><ul><li><p>普通静态资源请求的并发数为 worker_connections * worker_processes /2</p></li><li><p>动态资源请求的并发数为 worker_connections * worker_processes /4</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/12/06/git/"/>
    <url>/2021/12/06/git/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>Git 是一个免费的、开源的<strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目。</p><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p></blockquote><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>版本控制是一种<strong>记录文件内容变化</strong>，以便将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以<strong>记录文件修改历史记录</strong>，从而让用户能够查<strong>看历史版本，方便版本切换</strong>。</li></ul><h3 id="集中式版本控制工具"><a href="#集中式版本控制工具" class="headerlink" title="集中式版本控制工具"></a>集中式版本控制工具</h3><ul><li><p>CVS、<strong>SVN(Subversion)<strong>、VSS等是集中式版本控制，都有一个</strong>单一的集中管理的服务器</strong>，保存</p><p>所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或</p><p>者提交更新。</p><p><img src="/img/git.assets/image-20220204155611647.png" alt="image-20220204155611647"></p></li><li><p>弊端：在服务器宕机后，所有人都无法更新和提交，也无法协同工作。</p></li></ul><h3 id="分布式版本控制工具"><a href="#分布式版本控制工具" class="headerlink" title="分布式版本控制工具"></a>分布式版本控制工具</h3><ul><li><p><strong>Git</strong>、Mercurial、Bazaar、Darcs等是分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（<strong>本地库</strong>）。一旦有宕机故障，事后都可以通过其他客户端的<strong>本地仓库</strong>进行恢复。</p><p><img src="/img/git.assets/image-20220204155556239.png" alt="image-20220204155556239"></p></li><li><p>优点：</p><ul><li><p>服务器断网的情况下也可以进行开发（因为版本控制是在<strong>本地进行的</strong>），与集中式最大区别就是可以<strong>本地进行版本控制</strong>。</p></li><li><p> 每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</p></li></ul></li></ul><h2 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h2><p><img src="/img/git.assets/image-20220204155847179.png" alt="image-20220204155847179"></p><p>代码上传到本地库之后，就是以<strong>版本号来控制</strong>，在工作区和暂存区可以删除的数据，而在本地库中就不能删除上一个版本数据。</p><h2 id="Git和托管中心"><a href="#Git和托管中心" class="headerlink" title="Git和托管中心"></a>Git和托管中心</h2><blockquote><p>代码托管中心是基于<strong>网络服务器</strong>的远程代码仓库，一般我们简单称为<strong>远程库</strong>。 </p></blockquote><ul><li>局域网：GitLab</li><li>互联网：GitHub ， Gitee（码云）</li></ul><h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><p><a href="https://blog.csdn.net/sishen47k/article/details/80211002">安装教程</a></p><p>桌面单击右键 -&gt; 点击Git Bush Here 命令行工具 -&gt; 输入<strong>git –version</strong>可以查看版本号，同时在Windows命令行也可以查看</p><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><strong>git config –global user.name 用户名</strong></li><li><strong>git config –global user.email 邮箱</strong></li></ul><p><img src="/img/git.assets/image-20220204164042566.png" alt="image-20220204164042566"></p><p>查看目录下的.gitconfig文件可以查看设置的全局签名。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p>签名的作用是<strong>区分不同操作者身份</strong>。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装<strong>必须设置一下用户签名，否则无法提交代码</strong>。</p></li><li><p>这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号<strong>没有任何关系</strong>。</p></li></ul><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>git init</strong></p><p><img src="/img/git.assets/image-20220204164750022.png" alt="image-20220204164750022"></p><p>在目录下使用初始化命令后，会生成 .git <strong>的隐藏文件</strong>，表示该文件是git管理的文件。</p></li></ul><h2 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h2><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>git status</strong></p><ul><li><p>首次查看，没有文件</p><p><img src="/img/git.assets/image-20220204165055374.png" alt="image-20220204165055374"></p></li><li><p>加入文件后，再次查看，<strong>会检测到未追踪的文件</strong></p><p><img src="/img/git.assets/image-20220204165231877.png" alt="image-20220204165231877"></p></li></ul></li></ul><h2 id="添加至暂存区"><a href="#添加至暂存区" class="headerlink" title="添加至暂存区"></a>添加至暂存区</h2><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>git add 文件名</strong></p><p><img src="/img/git.assets/image-20220204170448413.png" alt="image-20220204170448413"></p><p>通过查看本地库状态，可以检测到暂存区有文件。</p></li></ul><h2 id="提交至本地库"><a href="#提交至本地库" class="headerlink" title="提交至本地库"></a>提交至本地库</h2><h3 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>git commit -m “日志信息” 文件名</strong></p><ul><li>提交文件后，查看本地库状态，显示没有文件需要提交。</li></ul><p><img src="/img/git.assets/image-20220204170953605.png" alt="image-20220204170953605"></p><ul><li><p>此时修改文件，检测到有文件被修改</p><p><img src="/img/git.assets/image-20220204171236507.png" alt="image-20220204171236507"></p></li><li><p>需要重新提交后，才会检测到没有文件需要提交。</p></li></ul></li></ul><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><h3 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>git reflog</strong> </p><p><img src="/img/git.assets/image-20220204173401488.png" alt="image-20220204173401488"></p><p>可以查看我们提交文件的<strong>版本号</strong>（黄字部分）。</p></li><li><p> <strong>git log（查看详细日志）</strong> 可以查看提交用户</p></li></ul><p>  <img src="/img/git.assets/image-20220204173516969.png" alt="image-20220204173516969"></p><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><h3 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>git reset –hard 版本号</strong></p><p><img src="/img/git.assets/image-20220204173940154.png" alt="image-20220204173940154"></p><p>此时指针指向的则是你切换的版本，文件中的内容也会自动切换为以前的内容。</p></li></ul><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以<strong>创建每个任务的单独</strong></p><p><strong>分支。</strong>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时</p><p>候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是</p><p>一个单独的副本。（分支底层其实也是指针的引用）</p></blockquote><p>不同的功能可以创建分支修改，在进行合并。</p><p><img src="/img/git.assets/image-20220204175557258.png" alt="image-20220204175557258"></p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul><h2 id="分支基本操作"><a href="#分支基本操作" class="headerlink" title="分支基本操作"></a>分支基本操作</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><h4 id="基本语法-7"><a href="#基本语法-7" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p><strong>git branch -v</strong></p><p>此时只有一个master分支，且指针指向master分支</p><p><img src="/img/git.assets/image-20220204175938456.png" alt="image-20220204175938456"></p></li></ul><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><h4 id="基本语法-8"><a href="#基本语法-8" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p><strong>git branch 分支名</strong> </p><p><img src="/img/git.assets/image-20220204201108735.png" alt="image-20220204201108735"></p><p>此时还是在master分支上，修改master分支上的内容，hot-fix上的分支将不会被修改。</p></li></ul><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><h4 id="基本语法-9"><a href="#基本语法-9" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p><strong>git checkout 分支名</strong></p><ul><li>此时指针切换指向的分支</li></ul><p><img src="/img/git.assets/image-20220204201412835.png" alt="image-20220204201412835"></p><p>此时已经切换到hot-fix分支上。 </p><ul><li><p>此时修改hot-fix上的文件，并提交到本地库，master上并没有出现修改过的数据</p><p><img src="/img/git.assets/image-20220204202650858.png" alt="image-20220204202650858"></p></li><li><p>如果在其他分支修改了但未提交到本地库，master会同步工作区做的修改。</p></li></ul></li></ul><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><h4 id="基本语法-10"><a href="#基本语法-10" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>切换到master    <strong>git merge 分支名</strong></li></ul><h4 id="产生冲突"><a href="#产生冲突" class="headerlink" title="产生冲突"></a>产生冲突</h4><ul><li>冲突产生的表现：后面状态为 <strong>MERGING</strong></li><li>冲突产生的原因：合并分支时，两个分支在<strong>同一个文件的同一个位置</strong>有两套完全不同的修改。Git 无法替我们决定使用哪一个。必须<strong>人为决定</strong>新代码内容。</li></ul><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><ul><li><p>产生冲突后，编辑有冲突的文件，<strong>删除特殊符号，决定要使用的内容</strong>（特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 ======= 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix）</p></li><li><p>此时再合并，注意此时使用 git commit 命令时<strong>不能带文件名</strong></p><p><img src="/img/git.assets/image-20220204212319136.png" alt="image-20220204212319136"></p><p>注意后边的MERGING消失。</p></li></ul><h1 id="Git团队协作机制"><a href="#Git团队协作机制" class="headerlink" title="Git团队协作机制"></a>Git团队协作机制</h1><h2 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h2><p><img src="/img/git.assets/image-20220205095801346.png" alt="image-20220205095801346"></p><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><p><img src="/img/git.assets/image-20220205100103598.png" alt="image-20220205100103598"></p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><blockquote><p>GitHub是一个面向<strong>开源</strong>及私有<strong>软件</strong>项目的托管平台，因为只支持Git作为<strong>唯一的版本库格式</strong>进行托管，故名GitHub。</p></blockquote><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>创建账户后，创建仓库即可，仓库名一般和本地库名字一致。</p><p><img src="/img/git.assets/image-20220205100617036.png" alt="image-20220205100617036"></p><h2 id="远程仓库常用命令"><a href="#远程仓库常用命令" class="headerlink" title="远程仓库常用命令"></a>远程仓库常用命令</h2><h3 id="创建远程仓库别名"><a href="#创建远程仓库别名" class="headerlink" title="创建远程仓库别名"></a>创建远程仓库别名</h3><p>基本语法</p><ul><li><p><strong>git remote -v</strong> <strong>查看当前所有远程地址别名</strong></p></li><li><p><strong>git remote add</strong> <strong>别名 远程地址</strong> （远程地址为创建好仓库后的生成的https协议地址）</p><p><img src="/img/git.assets/image-20220205101732354.png" alt="image-20220205101732354"></p></li></ul><h3 id="推送本地分支到远程仓库"><a href="#推送本地分支到远程仓库" class="headerlink" title="推送本地分支到远程仓库"></a>推送本地分支到远程仓库</h3><p>基本语法</p><ul><li><p><strong>git push</strong> <strong>别名 分支</strong> （中途需要登录）</p><p><img src="/img/git.assets/image-20220205102206059.png" alt="image-20220205102206059"></p><p>中途需要登录Github服务器在国外，可能会有超时问题，失败后需要重复推送。</p></li></ul><h3 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h3><p>基本语法</p><ul><li><p><strong>git clone</strong> <strong>远程地址</strong></p><p><img src="/img/git.assets/image-20220205103803177.png" alt="image-20220205103803177"></p><p>此时进入克隆出的目录查看，会自动创建别名。</p><p><img src="/img/git.assets/image-20220205103941264.png" alt="image-20220205103941264"></p></li></ul><p>克隆结果：</p><ul><li>拉取代码</li><li>初始化本地库</li><li>创建别名</li></ul><h3 id="拉取远程库内容"><a href="#拉取远程库内容" class="headerlink" title="拉取远程库内容"></a>拉取远程库内容</h3><p>基本语法</p><ul><li><strong>git pull</strong> <strong>远程库地址别名 远程分支名</strong></li></ul><h2 id="团队内协作-1"><a href="#团队内协作-1" class="headerlink" title="团队内协作"></a>团队内协作</h2><ul><li><p>需要邀请成员，成员才可以push</p><p><img src="/img/git.assets/image-20220205110409536.png" alt="image-20220205110409536"></p></li><li><p>填入想要邀请的成员</p></li><li><p>复制地址并发送给邀请的用户</p></li><li><p>被邀请的用户可以在这个账号中的地址栏复制收到邀请的链接，点击接受邀请。</p></li></ul><p>现在团队内成员即可push代码到远程库中。</p><h2 id="跨团队协作-1"><a href="#跨团队协作-1" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><ul><li><p>将远程仓库的地址复制发给邀请跨团队协作的人。</p><p><img src="/img/git.assets/image-20220205115039380.png" alt="image-20220205115039380"></p></li><li><p>在<strong>被邀请人的GitHub</strong> 账号里的地址栏复制收到的链接，然后点击 <strong>Fork</strong> 将项目叉到自己的本地仓库。</p><p><img src="/img/git.assets/image-20220205115057050.png" alt="image-20220205115057050"></p></li><li><p>编辑后，可以填写提交的描述信息，并提交</p></li><li><p>此时点击pull，创建新的请求。</p><p><img src="/img/git.assets/image-20220205115157598.png" alt="image-20220205115157598"></p></li><li><p>创建请求后，在<strong>邀请人的Github</strong>账号会接收到一个Pull request请求。</p><p><img src="/img/git.assets/image-20220205115436828.png" alt="image-20220205115436828"></p><p>此时可以进入聊天室讨论。</p></li><li><p>邀请人可以点击代码查看修改的地方是否正确，如果无误，可以点击Merge pull request合并代码。</p></li></ul><h1 id="IDEA集成Git"><a href="#IDEA集成Git" class="headerlink" title="IDEA集成Git"></a>IDEA集成Git</h1><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><ul><li>在IDEA生成项目时会生成一些特定文件，与项目的实际功能无关，不参与服务器上部署运行。<strong>把它们忽略掉能够屏蔽 IDE 工具之</strong></li></ul><p><strong>间的差异</strong>。</p><h3 id="忽略方法"><a href="#忽略方法" class="headerlink" title="忽略方法"></a>忽略方法</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>直接配置</p><ul><li><p>创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore），这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户家目录下</p></li><li><p>git.ignore 文件模版内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><br><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br><span class="hljs-comment"># virtual machine crash logs, see </span><br>http:<span class="hljs-string">//www.java.com/en/download/help/error_hotspot.xml</span><br>hs_err_pid*<br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br></code></pre></td></tr></table></figure></li><li><p>在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br><span class="hljs-attr">excludesfile</span> = C:/Users/peanut/git.ignore<br></code></pre></td></tr></table></figure><p>注意：这里要使用“<strong>正斜线（/）</strong>”，不要使用“<strong>反斜线（\）</strong>”</p></li></ul><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>使用IDEA中的 <strong>.ignore 插件</strong>，方便操作。</p><ul><li><p>在插件市场安装插件</p><p><img src="/img/git.assets/image-20220206141514433.png" alt="image-20220206141514433"></p><p>安装完成后记得重启IDEA。</p></li><li><p>创建模板</p><p><img src="/img/git.assets/image-20220206141621443.png" alt="image-20220206141621443"></p><p>填写号name后，<strong>将模板复制到template</strong>区域</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><br><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br><span class="hljs-comment"># virtual machine crash logs, see </span><br>http:<span class="hljs-string">//www.java.com/en/download/help/error_hotspot.xml</span><br>hs_err_pid*<br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br></code></pre></td></tr></table></figure><p><img src="/img/git.assets/image-20220206141712522.png" alt="image-20220206141712522"></p></li><li><p>右键单击项目 -&gt; new -&gt; 创建新的.ignore文件</p><p><img src="/img/git.assets/image-20220206142340613.png" alt="image-20220206142340613"></p></li><li><p>此时可以生成选择我们创建的模板</p><p><img src="/img/git.assets/image-20220206142422731.png" alt="image-20220206142422731"></p></li><li><p>生成后忽略的文件夹变为<strong>灰色</strong></p></li><li><p>也可以手动将文件忽略，右键单击</p><p><img src="/img/git.assets/image-20220206142921272.png" alt="image-20220206142921272"></p></li></ul><h2 id="IDEA基本操作"><a href="#IDEA基本操作" class="headerlink" title="IDEA基本操作"></a>IDEA基本操作</h2><p>以下操作的IDEA版本为2021.1.2</p><h3 id="定位Git"><a href="#定位Git" class="headerlink" title="定位Git"></a>定位Git</h3><p>注意先Test是否识别到Git</p><p><img src="/img/git.assets/image-20220205125238450.png" alt="image-20220205125238450"></p><h3 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img src="/img/git.assets/image-20220205135510089.png" alt="image-20220205135510089"></p><h3 id="添加到暂存库"><a href="#添加到暂存库" class="headerlink" title="添加到暂存库"></a>添加到暂存库</h3><p>此时创建的类未追踪，为红色标志，添加至暂存区后类变为绿色，表示添加成功（也可以直接将项目添加至暂存区）。</p><p><img src="/img/git.assets/image-20220205140131889.png" alt="image-20220205140131889"></p><h3 id="提交到本地库"><a href="#提交到本地库" class="headerlink" title="提交到本地库"></a>提交到本地库</h3><p>右键单击项目。</p><p><img src="/img/git.assets/image-20220205135634442.png" alt="image-20220205135634442"></p><p>此时可以选择你要提交的代码，和可以填写提交的描述，commit提交，此时项目的代码从绿色恢复。</p><p><img src="/img/git.assets/image-20220205135755441.png" alt="image-20220205135755441"></p><h3 id="IDEA查看版本号"><a href="#IDEA查看版本号" class="headerlink" title="IDEA查看版本号"></a>IDEA查看版本号</h3><ul><li><p>在左下角单击git</p><p><img src="/img/git.assets/image-20220205141700159.png" alt="image-20220205141700159"></p></li><li><p>切换版本，右键单击，可以直接切换版本，此时代码也会自动修改。</p><p><img src="/img/git.assets/image-20220205141956920.png" alt="image-20220205141956920"></p></li></ul><h2 id="IDEA分支操作"><a href="#IDEA分支操作" class="headerlink" title="IDEA分支操作"></a>IDEA分支操作</h2><h3 id="创建分支-1"><a href="#创建分支-1" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li><p>IDEA右下角，我的显示版本号</p><p><img src="/img/git.assets/image-20220205142645970.png" alt="image-20220205142645970"></p><p><img src="/img/git.assets/image-20220205142759294.png" alt="image-20220205142759294"></p></li></ul><h3 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h3><p>点击分支名，checkout即可直接切换分支。</p><p><img src="/img/git.assets/image-20220205142930237.png" alt="image-20220205142930237"></p><h3 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h3><ul><li>此时在master分支，合并hot-fix分支，即可正常合并。</li></ul><p><img src="/img/git.assets/image-20220205143456587.png" alt="image-20220205143456587"></p><ul><li><p>产生冲突，IDEA会提示冲突文件</p><p><img src="/img/git.assets/image-20220205144338095.png" alt="image-20220205144338095"></p></li></ul><h1 id="IDEA集成Github"><a href="#IDEA集成Github" class="headerlink" title="IDEA集成Github"></a>IDEA集成Github</h1><h2 id="登录Github账号"><a href="#登录Github账号" class="headerlink" title="登录Github账号"></a>登录Github账号</h2><ul><li><p>点击setting -&gt; Version Control -&gt; GitHub</p><p><img src="/img/git.assets/image-20220205145629897.png" alt="image-20220205145629897"></p></li><li><p>可以使用账号密码登录，新版IDEA会跳转到页面登录</p></li><li><p>也可以使用token登录，需要在GitHub中生成token</p><ul><li><p>在GitHub中点击头像 -&gt; setting -&gt; Developer settings</p></li><li><p>创建新token</p><p><img src="/img/git.assets/image-20220205150118340.png" alt="image-20220205150118340"></p></li><li><p>此时输入名字，并勾选下边的所有权限，即可生成</p><p><img src="/img/git.assets/image-20220205150225621.png" alt="image-20220205150225621"></p></li><li><p>注意生成后将token保存好，用于登录</p><p><img src="/img/git.assets/image-20220205150356454.png" alt="image-20220205150356454"></p></li></ul></li></ul><h2 id="分享工程"><a href="#分享工程" class="headerlink" title="分享工程"></a>分享工程</h2><ul><li><p>分享目前的工程分支在github上，此时会在你的账户下创建一个<strong>新的仓库</strong></p><p><img src="/img/git.assets/image-20220206103503550.png" alt="image-20220206103503550"></p></li></ul><h2 id="Push到远程库"><a href="#Push到远程库" class="headerlink" title="Push到远程库"></a>Push到远程库</h2><ul><li>进入到push窗口</li></ul><p><img src="/img/git.assets/image-20220206114350085.png" alt="image-20220206114350085"></p><ul><li><p>在push界面中，可以选择你要push的仓库</p><p><img src="/img/git.assets/image-20220206114908889.png" alt="image-20220206114908889"></p></li><li><p>可以自己创建上传的仓库 Define remote </p><p><img src="/img/git.assets/image-20220206121608540.png" alt="image-20220206121608540"></p><p>name可以自己起名，URL为仓库的地址，可以使用https和ssh（<strong>推荐</strong>）</p></li><li><p>可以管理remote连接</p><p><img src="/img/git.assets/image-20220206143720661.png" alt="image-20220206143720661"></p><p><img src="/img/git.assets/image-20220206144053044.png" alt="image-20220206144053044"></p></li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>push 是将本地库代码推送到远程库，<strong>如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的</strong>。也就是说，<strong>要想 push 成功，一定要保证本地库的版本要比远程库的版本高</strong>！因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送！</p><h2 id="Pull拉取远程库到本地库"><a href="#Pull拉取远程库到本地库" class="headerlink" title="Pull拉取远程库到本地库"></a>Pull拉取远程库到本地库</h2><ul><li>进入Pull窗口</li></ul><p><img src="/img/git.assets/image-20220206124004285.png" alt="image-20220206124004285"></p><ul><li><p>此时可以选择拉取</p><p><img src="/img/git.assets/image-20220206125205446.png" alt="image-20220206125205446"></p></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会<strong>涉及到手动解决冲突的问题。</strong></p><h2 id="clone代码到本地"><a href="#clone代码到本地" class="headerlink" title="clone代码到本地"></a>clone代码到本地</h2><ul><li><p>进入clone窗口</p><p><img src="/img/git.assets/image-20220206125639369.png" alt="image-20220206125639369"></p></li><li><p>填写url</p><p><img src="/img/git.assets/image-20220206125849820.png" alt="image-20220206125849820"></p></li></ul><h1 id="IDEA集成Gitee"><a href="#IDEA集成Gitee" class="headerlink" title="IDEA集成Gitee"></a>IDEA集成Gitee</h1><blockquote><p>GitHub 服务器在国外，使用 GitHub 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，大家也可以使用<strong>国内的项目托管网站-码云</strong>。码云是开源中国推出的基于 Git 的代码托管服务中心。</p></blockquote><h2 id="绑定账户"><a href="#绑定账户" class="headerlink" title="绑定账户"></a>绑定账户</h2><ul><li><p>需要登录Gitee，绑定邮箱</p><p><img src="/img/git.assets/image-20220206134133472.png" alt="image-20220206134133472"></p></li><li><p>在IDEA插件市场安装Gitee插件，安装完成后重启IDEA</p><p><img src="/img/git.assets/image-20220206134243601.png" alt="image-20220206134243601"></p></li><li><p>绑定账户</p><p><img src="/img/git.assets/image-20220206134442798.png" alt="image-20220206134442798"></p></li><li><p>此时可以使用Gitee操作仓库，步骤与Github基本一致</p></li></ul><h2 id="Gitee中导入Github仓库"><a href="#Gitee中导入Github仓库" class="headerlink" title="Gitee中导入Github仓库"></a>Gitee中导入Github仓库</h2><ul><li><p>在创建仓库时点击<strong>导入</strong></p><p><img src="/img/git.assets/image-20220206135213311.png" alt="image-20220206135213311"></p></li><li><p>填写<strong>URL</strong></p><p><img src="/img/git.assets/image-20220206135330077.png" alt="image-20220206135330077"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2021/11/05/linux/"/>
    <url>/2021/11/05/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h1><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><p><img src="/img/linux.assets/image-20211212182339851.png" alt="image-20211212182339851"></p><p><img src="/img/linux.assets/image-20211212182451270.png" alt="image-20211212182451270"></p><h2 id="Linux学习方向"><a href="#Linux学习方向" class="headerlink" title="Linux学习方向"></a>Linux学习方向</h2><p><img src="/img/linux.assets/image-20211212183106754.png" alt="image-20211212183106754"></p><h2 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h2><p><strong>个人桌面应用领域</strong></p><p>此领域是传统Linux应用最薄弱的环节，传统 Linux由于界面简单、操作复杂、应用软件少的缺点， 一直被 Windows所压制，但近些年来随着Ubuntu、Fedora等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，Linux在个人桌面领域的占有率在逐渐的提高。</p><p><strong>服务器应用领域</strong></p><p>Linux在服务器领域的应用是最强的。</p><p>Linux免费、稳定、高效等特点在这里得到了很好的体现，近些年来Linux服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛。</p><p><strong>嵌入式应用领域</strong></p><p>近些年来Linux在嵌入式领域的应用得到了飞速的提高。</p><p>Linux运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点，使其近些年来在嵌入式领域的应用得到非常大的提高。</p><p>主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、智能硬件等都是其应用领域。以后再物联网中应用会更加广泛。</p><h2 id="学习阶段和方法分享"><a href="#学习阶段和方法分享" class="headerlink" title="学习阶段和方法分享"></a>学习阶段和方法分享</h2><h3 id="学习Linux的阶段"><a href="#学习Linux的阶段" class="headerlink" title="学习Linux的阶段"></a>学习Linux的阶段</h3><p>linux 是一个开源、免费的操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多中型，大型甚至是集群项目都在使用 Linux，很多软件公司考虑到开发成本都首选Linux，在中国软件公司得到广泛的使用。</p><p>可供参考学习Linux流程如下：</p><p>第 1 阶段：Linux环境下的基本操作命令，包括 文件操作命令(rm mkdir chmod, chown) 编辑工具使用（vi vim）Linux用户管理(useradd userdel usermod)等<br>第 2 阶段：Linux的各种配置（环境变量配置，网络配置，服务配置）<br>第 3 阶段：Linux下如何搭建对应语言的开发环境（大数据，JavaEE, Python 等） 第 4 阶段：能编写 shell 脚本，对 Linux 服务器进行维护。<br>第 5 阶段：能进行安全设置，防止攻击，保障服务器正常运行，能对系统调优。<br>第 6 阶段：深入理解Linux系统（对内核有研究），熟练掌握大型网站应用架构组成、并熟悉各个环节的部署和维护方法。</p><h3 id="Linux的学习方法和建议"><a href="#Linux的学习方法和建议" class="headerlink" title="Linux的学习方法和建议"></a>Linux的学习方法和建议</h3><p>高效而愉快的学习。</p><p>先建立一个整体框架，然后细节。</p><p>不需要掌握所有的Linux指令，要学会查询手册和百度。</p><p>先 know how，再 know why。</p><p>计算机是一门“做中学”的学科，不是会了再做，而是做了才会。</p><p>适当的囫囵吞枣。</p><p>Linux不是编程，重点是实际操作，各种常用指令要玩的溜。</p><h1 id="Linux基础篇"><a href="#Linux基础篇" class="headerlink" title="Linux基础篇"></a>Linux基础篇</h1><h2 id="Linux介绍-1"><a href="#Linux介绍-1" class="headerlink" title="Linux介绍:"></a>Linux介绍:</h2><p>Linux怎么读？里纽克斯，利尼克斯，里纳克斯。<br>Linux 是一款操作系统，免费，开源， 安全，高效，稳定， 处理高并发非常强悍，现在很多的企业级的项目都部署到 Linux/Unix 服务器运行。<br>Linux创始人Linus Torvalds。<br>Linux 的吉祥物：一只名叫Tux的企鹅。<br>Linux发行版：<br>RedHat<br>CentOS<br>Ubuntu<br>Suse<br>红旗Linux</p><h2 id="Linux和Unix的关系"><a href="#Linux和Unix的关系" class="headerlink" title="Linux和Unix的关系"></a>Linux和Unix的关系</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/e02637ee8e7d310a01f79a9ff17fae5a.png" alt="img"></p><h2 id="Linux和Windows的比较"><a href="#Linux和Windows的比较" class="headerlink" title="Linux和Windows的比较"></a>Linux和Windows的比较</h2><p><img src="/img/linux.assets/image-20211212212714134.png" alt="image-20211212212714134"></p><h2 id="VMWare的安装和说明"><a href="#VMWare的安装和说明" class="headerlink" title="VMWare的安装和说明"></a>VMWare的安装和说明</h2><ul><li><a href="https://blog.csdn.net/qq_40950957/article/details/80467513?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163958035216780261984264%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163958035216780261984264&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-80467513.pc_search_insert_es_download&utm_term=VMWare%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">VMWare下载安装</a>:</li></ul><h2 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h2><ul><li><p>下载阿里巴巴镜像</p></li><li><p><a href="https://blog.csdn.net/qq1808814025/article/details/120154274?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163957815516780366585803%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163957815516780366585803&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-5-120154274.pc_search_insert_es_download&utm_term=centos7%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">CentOS7的安装</a>:</p><ul><li><strong>配置网络方式</strong></li></ul><ol><li>桥连接，Linux可以和其它的系统通信。但是可能造成ip冲突</li><li><strong>NAT</strong>：用于共享主机的IP地址，Linux可以访问外网，不会造成ip冲突。</li><li>主机模式：你的linux是一个独立的主机，不能访问外网</li></ol></li><li><p><a href="https://blog.csdn.net/kswkly/article/details/83690565?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">CentOS7图形界面</a>:</p></li></ul><h2 id="终端使用和联网"><a href="#终端使用和联网" class="headerlink" title="终端使用和联网"></a>终端使用和联网</h2><ul><li><p>终端的使用：点击鼠标右键，即可选择打开终端。</p></li><li><p>配置网络：点击桌面右上角的画有两个显示器的图标，选择启用 eth0，即可成功连接到网络，就可以上网。</p></li></ul><h2 id="设置共享文件"><a href="#设置共享文件" class="headerlink" title="设置共享文件"></a>设置共享文件</h2><ul><li><p><strong>vmtools的安装和使用</strong><br>vmtools安装后，可以让我们在windows下更好的管理vm虚拟机：</p><p>可以直接粘贴命令在windows和centos系统之间<br>可以设置windows和centos的共享文件夹<br>安装vmtools的步骤：</p><p>1.进入centos</p><p>2.点击vm菜单栏的“虚拟机”-&gt;install vmware tools</p><p>3.centos会出现一个vm的安装包，将其复制到桌面</p><p>4.点击右键解压，得到一个安装文件（或命令行 tar -xzvf vm安装包名 来进行解压）</p><p>5.进入该vm解压的目录</p><p>6.安装./vmware-install.pl</p><p>7..全部使用默认设置即可</p><p>8.需要命令行reboot，重新启动即可生效</p><p><strong>由于CentOS7已经自动安装vmtools，但不自动挂载共享文件，需要手动挂载。</strong></p></li><li><p>设置Windows和CentOS的共享文件夹</p><p>1.点击VM菜单栏“虚拟机”-&gt;“设置”-&gt;“选项”-&gt;“共享文件夹”-“总是启用”。文件夹在Windows下创建时，要开启共享。<br>2.添加假设共享目录路径D:\myShare。<br>3.在CentOS的/mnt/hgfs路径下，便可看到共享文件myShare<br>4.在实际公司开发中，文件上传下载是需要使用远程方式完成的。稍后有介绍。</p></li><li><p>mnt/hgfs中不显示共享文件,手动挂载，<a href="https://blog.csdn.net/limanjihe/article/details/115265551?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.highlightwordscore&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.highlightwordscore">解决方法</a></p></li><li><p>在输入法问题<a href="https://blog.csdn.net/qq_43605588/article/details/100571857?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163964472116780261920102%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163964472116780261920102&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-100571857.pc_search_insert_es_download&utm_term=centos7%E6%80%8E%E4%B9%88%E5%88%87%E6%8D%A2%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E5%8F%91&spm=1018.2226.3001.4187">解决方法</a></p></li></ul><h2 id="文件系统目录结构"><a href="#文件系统目录结构" class="headerlink" title="文件系统目录结构:"></a>文件系统目录结构:</h2><p>Linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。</p><p>深刻理解Linux树状文件目录是非常重要的。</p><p>记住一句经典的话：<strong>在Linux世界里，一切皆文件</strong>。</p><p><img src="/img/linux.assets/filestruct.jpg" alt="filestruct"></p><p><img src="/img/linux.assets/image-20211216230415474.png" alt="image-20211216230415474"></p><p>具体的<a href="https://blog.csdn.net/qq_22860341/article/details/81363655">目录结构</a>：</p><ul><li><p>/<strong>bin</strong>[重点] (/usr/bin、/usr/local/bin)</p><p>是Binary的缩写,这个目录存放着最经常使用的命令。</p></li><li><p>/sbin (/usr/sbin、/usr/local/sbin)</p><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p>/<strong>home</strong>[重点]</p><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p></li><li><p>/<strong>root</strong>[重点]</p><p>该目录为系统管理员,也称作超级权限者的用户主目录。</p></li><li><p>/<strong>boot</strong>[重点]</p><p>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p>/proc</p><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</p></li><li><p>/srv</p><p>service缩写，该目录存放一些服务启动之后需要提取的数据。</p></li><li><p>/sys</p><p>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系</p></li><li><p>/tmp</p><p>这个目录是用来存放一些临时文件的。</p></li></ul><h2 id="远程登录-Xshell"><a href="#远程登录-Xshell" class="headerlink" title="远程登录(Xshell)"></a>远程登录(Xshell)</h2><ol><li><p>Linux服务器是开发小组共享的。</p></li><li><p>正式上线的项目是运行在公网的。</p></li><li><p>因此程序员需要远程登录到CentOS进行项目管理或者开发。</p></li><li><p>画出简单的网络拓扑示意图（帮助理解）。</p></li><li><p>远程登录客户端有XShell5、Xftp5，我们学习使用XShell5和Xftp，其它的远程工具大同小异。</p><p><img src="/img/linux.assets/image-20211219112216901.png" alt="image-20211219112216901"></p></li></ol><p><strong>Xshell</strong>是目前最好的远程登录到Linux操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。Xshell是一个强大的安全终端模拟软件，它支持SSH1、SSH2，以及Microsoft Windows平台的TELNET协议。Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</p><p>特别说明：如果希望安装好XShell 5就可以远程访问Linux系统的话，需要有一个前提，就是Linux启用了SSHD服务，该服务会监听22号端口。</p><p>具体操作：</p><ol><li>在Windows暗转XShell，根据安装向导步骤安装即可。</li><li>在Linux查看或开启SSHD：命令行setup-&gt;系统服务-&gt;SSHD，*号表示开启（空格键确定，TAB键改变焦点）。</li><li>在Linux用netstat -antp |grep sshd 看是否启动了22端口。</li><li>在Linux用ifconfig获取Linux IPv4地址。</li></ol><ul><li><p>安装<a href="https://blog.csdn.net/qq_41901122/article/details/112428907?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163988282916780274177399%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163988282916780274177399&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112428907.pc_search_insert_es_download&utm_term=xshell%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Xhell</a></p></li><li><p>查看是否开启sshd端口:</p></li></ul><p><img src="/img/linux.assets/image-20211216231746160.png" alt="image-20211216231746160"></p><ul><li>查看Linux的端口号：</li></ul><p><img src="/img/linux.assets/image-20211216232611140.png" alt="image-20211216232611140"></p><ul><li>创建会话进行连接:<br><img src="/img/linux.assets/image-20211219111859635.png" alt="image-20211219111859635"></li><li>连接后输入linux的用户名和密码即可</li></ul><h2 id="远程上传下载工具-Xftp"><a href="#远程上传下载工具-Xftp" class="headerlink" title="远程上传下载工具(Xftp)"></a>远程上传下载工具(Xftp)</h2><ul><li><a href="https://blog.csdn.net/Smile_Luckly/article/details/72639387">Xftp连接Linux</a></li></ul><p><img src="/img/linux.assets/image-20211221153336161.png" alt="image-20211221153336161"></p><ul><li><p>乱码问题</p><p><img src="/img/linux.assets/image-20211221153424269.png" alt="image-20211221153424269"></p></li></ul><h1 id="Linux实操（用户管理）"><a href="#Linux实操（用户管理）" class="headerlink" title="Linux实操（用户管理）"></a>Linux实操（用户管理）</h1><h2 id="vi和vim的使用"><a href="#vi和vim的使用" class="headerlink" title="vi和vim的使用"></a>vi和vim的使用</h2><p>所有的 Linux 系统都会内建 vi 文本编辑器。</p><p>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><ul><li><p>vi/vim 的使用</p><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p><ul><li><p>命令模式（一般模式）</p><p>​        用户刚刚启动 vi/vim，便进入了命令模式。</p><p>​        此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>​                以下是常用的几个命令：</p><p>​                i 切换到输入模式，以输入字符。<br>​                x 删除当前光标所在处的字符。<br>​                : 切换到底线命令模式，以在最底一行输入命令。</p><p>​                若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>​                命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p></li><li><p>​    输入模式（编辑模式）</p><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><p>字符按键以及Shift组合，输入字符<br><strong>ENTER</strong>，回车键，换行<br><strong>BACK SPACE</strong>，退格键，删除光标前一个字符<br><strong>DEL</strong>，删除键，删除光标后一个字符<br><strong>方向键</strong>，在文本中移动光标<br><strong>HOME/END</strong>，移动光标到行首/行尾<br><strong>Page Up/Page Down</strong>，上/下翻页<br><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线<br><strong>ESC</strong>，退出输入模式，切换到命令模式</p></li><li><p>底线命令模式（指令行模式）<br>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><p>q 退出程序<br>w 保存文件<br>按ESC键可随时退出底线命令模式。</p></li></ul></li><li><p>3个模式的关系图:</p></li></ul><p><img src="/img/linux.assets/image-20211219153658381.png" alt="image-20211219153658381"></p><ul><li><p>常用快捷键:</p><p>需要在<strong>正常模式</strong>下使用</p><p><img src="/img/linux.assets/image-20211219160240667.png" alt="image-20211219160240667"></p></li></ul><p><img src="/img/linux.assets/image-20211219160335200.png" alt="image-20211219160335200"></p><p><img src="/img/linux.assets/image-20211219160359942.png" alt="image-20211219160359942"></p><h2 id="关机重启登陆注销"><a href="#关机重启登陆注销" class="headerlink" title="关机重启登陆注销"></a>关机重启登陆注销</h2><h3 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h3><ul><li>shutdown -h now 立该进行关机</li><li>shudown -h 1 “hello，1分钟后会关机了”</li><li>shutdown -r now 现在重新启动计算机</li><li>halt 关机，作用和上面―样</li><li>reboot 现在重新启动计算机</li><li>sync 把内存的数据同步到磁盘</li></ul><h3 id="登陆注销"><a href="#登陆注销" class="headerlink" title="登陆注销"></a>登陆注销</h3><p>基本介绍：</p><ol><li>登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用“su 用户名”命令来切换成系统管理员身份。</li><li>在提示符下输<strong>logout</strong>即可注销用户。</li></ol><p>使用细节:</p><ol><li><code>logout</code> 注销指令在图形运行级别无效，在运行级别3下有效。</li><li>运行级别这个概念，后面给大家介绍。</li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/c60178eb685a7c13e28656483d514feb.png" alt="img"></p><ol><li>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</li><li>Linux 的用户需要至少要属于一个组。</li></ol><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ul><li><strong>useradd [选项] 用户名</strong>    如：useradd xm</li></ul><p>​        当创建用户成功后，会自动的创建和用户同名的家目录</p><p>​        也可以通过 <strong>useradd -d 指定目录 新的用户名</strong>，给新创建的用户指定家目录</p><p><img src="linux.assets/image-20211219164607767.png" alt="image-20211219164607767"></p><ul><li><p>给用户指定或者修改密码</p><p><strong>passwd 用户名</strong>        如：passwd xm</p><p><img src="linux.assets/image-20211219164637071.png" alt="image-20211219164637071"></p></li></ul><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><ul><li><strong>userdel  用户</strong></li></ul><p>​        删除用户 xm，但是要保留home目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fefe68809836dfc95512cc32320f823b.png" alt="img"></p><p>​        删除用户 xh 以及用户主目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/da69141bd0a9b943f38b9ce109c13447.png" alt="img"></p><p>​        在删除用户时，<strong>我们一般不会将home目录删除的</strong>。</p><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><ul><li><strong>id 用户名</strong></li></ul><p>​        案例：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b94dbba4d83e6ea12799e2979218eddb.png" alt="img"></p><p>​        当用户不存在时，返回”无此用户”。</p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><ul><li><strong>su - 用户</strong></li></ul><p>创建一个用户zf，指定密码，然后切换到zf。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7578d0fa3e1159b82ba60ad4e4e9915.png" alt="img"></p><p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>当需要返回到原来用户时，使用exit指令。</p><h2 id="组的管理"><a href="#组的管理" class="headerlink" title="组的管理"></a>组的管理</h2><p>类似于角色，系统可以对有共性的多个用户进行统一的管理。</p><h3 id="增加组"><a href="#增加组" class="headerlink" title="增加组"></a>增加组</h3><ul><li><strong>groupadd 组名</strong></li></ul><p><img src="/img/linux.assets/image-20211219195444740.png" alt="image-20211219195444740"></p><h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><ul><li><strong>groupdel 组名</strong></li></ul><p><img src="/img/linux.assets/image-20211219195822869.png" alt="image-20211219195822869"></p><h3 id="增加用户时直接加上组"><a href="#增加用户时直接加上组" class="headerlink" title="增加用户时直接加上组"></a>增加用户时直接加上组</h3><ul><li><strong>useradd -g 用户组 用户名</strong></li></ul><p><img src="/img/linux.assets/image-20211219200012676.png" alt="image-20211219200012676"></p><h3 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h3><ul><li><strong>usermod -g 用户组 用户名</strong></li></ul><p><img src="/img/linux.assets/image-20211219195957667.png" alt="image-20211219195957667"></p><h3 id="用户和组的配置文件"><a href="#用户和组的配置文件" class="headerlink" title="用户和组的配置文件"></a>用户和组的配置文件</h3><ul><li><p><strong>/etc/passwd文件</strong></p><ul><li>用户（user）的配置文件，记录用户的各种信息。</li><li>每行的含义：<code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录shell</code></li></ul><p><img src="/img/linux.assets/image-20211219201659432.png" alt="image-20211219201659432"></p></li><li><p><strong>/etc/shadow文件</strong></p><ul><li>口令的配置文件。</li><li>每行的含义：<code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></li></ul><p><img src="/img/linux.assets/image-20211219201721827.png" alt="image-20211219201721827"></p></li><li><p><strong>/etc/group文件</strong></p><ul><li>组(group)的配置文件，记录Linux包含的组的信息。</li><li>每行含义：<code>组名:口令:组标识号:组内用户列表</code>。</li></ul><p><img src="/img/linux.assets/image-20211219201744258.png" alt="image-20211219201744258"></p></li></ul><h1 id="Linux实操（实用指令）"><a href="#Linux实操（实用指令）" class="headerlink" title="Linux实操（实用指令）"></a>Linux实操（实用指令）</h1><h2 id="运行级别和找回root密码"><a href="#运行级别和找回root密码" class="headerlink" title="运行级别和找回root密码"></a>运行级别和找回root密码</h2><h3 id="基本介绍-需要root用户权限"><a href="#基本介绍-需要root用户权限" class="headerlink" title="基本介绍(需要root用户权限)"></a>基本介绍(需要root用户权限)</h3><p>运行级别说明：</p><ol><li>关机</li><li><strong>单用户【找回丢失密码】</strong></li><li><strong>多用户状态没有网络服务</strong></li><li>多用户状态有网络服务</li><li>系统未使用保留给用户</li><li><strong>图形界面</strong></li><li>系统重启</li></ol><ul><li><p>CentOS7中有所不同:</p><p><img src="/img/linux.assets/image-20211219210051146.png" alt="image-20211219210051146"></p></li></ul><h3 id="修改运行级别配置文件"><a href="#修改运行级别配置文件" class="headerlink" title="修改运行级别配置文件"></a>修改运行级别配置文件</h3><ul><li>常用运行级别是3和5，要修改默认的运行级别可改文件</li></ul><p>​        /etc/inittab(CentOS6中)</p><p><img src="/img/linux.assets/image-20211219210424412.png" alt="image-20211219210424412"></p><p>修改文件即可，将默认的启动级别改为需要改动的级别。</p><p>也可以使用切换到指定运行级别的指令：<code>init [012356]</code></p><ul><li><p>打开CentOS7的/etc/inittab，发现该文件与其他Linux不同,全是注释，什么也没有：</p><p><img src="/img/linux.assets/image-20211219210727179.png" alt="image-20211219210727179"></p><p>提到了如果想要修改默认的操作级别需要执行systemctl set-default TARGET.target<br>经过查资料所得情况是这个样子的：<br>需要命令 systemctl </p><figure class="highlight dsconfig"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">systemctl</span> <span class="hljs-built_in">get-default</span>       <span class="hljs-comment">#获得当前的运行级别: </span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">set-default</span> <span class="hljs-string">xxx</span>   <span class="hljs-comment">#设置默认的运行级别为xxx</span><br></code></pre></td></tr></table></figure><p>其中 xxx 对系统的级别对应是：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">systemctl isolate multi-user.<span class="hljs-keyword">target</span>    <span class="hljs-comment">#更改为命令模式启动</span><br>systemctl isolate graphical.<span class="hljs-keyword">target</span>     <span class="hljs-comment">#更改为图形界面启动</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="查看当前用户运行级别"><a href="#查看当前用户运行级别" class="headerlink" title="查看当前用户运行级别"></a>查看当前用户运行级别</h3><p><img src="/img/linux.assets/image-20211219205813238.png" alt="image-20211219205813238"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题:"></a>常见问题:</h3><ul><li><a href="https://blog.csdn.net/Arvinzr/article/details/86366642?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163991977216780269825616%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163991977216780269825616&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86366642.pc_search_insert_es_download&utm_term=centos7%E6%80%8E%E4%B9%88%E8%BF%9B%E5%8E%BB%E5%8D%95%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F&spm=1018.2226.3001.4187">如何找回 root 密码</a>?</li></ul><p>​        思路：进入到 单用户模式，然后修改 root 密码。<strong>因为进入单用户模式，root 不需要密码就可以登录</strong>。</p><p>​        操作步骤：开机-&gt;在引导时输入 回车键-&gt; 看到一个界面输入 e -&gt; 看到一个新的界面，选中第二行（编辑内核）在输入 e-&gt; 在这行最        后输入 1 ,再输入 回车键-&gt;再次输入 b ，这时就会进入到单用户模式。</p><p>​        这时，我们就进入到<strong>单用户</strong>模式，使用 passwd 指令来修改 root 密码。</p><ul><li><p>如何在不重启得情况下，将centos7从图形界面调成字符界面？</p><p>答案就是：alt+ctrl+f3</p><p><strong>alt+ctrl+f3 可以直接在不重启的情况下，将centos图形界面调成字符界面。</strong></p><p><strong>alt+ctrl+f1 可以直接在不重启的情况下，将centos字符界面调成图形界面。</strong></p></li></ul><h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令:"></a>帮助指令:</h2><p>当我们对某个指令不熟悉时，我们可以使用 Linux 提供的帮助指令来了解这个指令的使用方法。</p><ul><li><strong>man</strong> 命令名，如man cd。</li><li><strong>help</strong> 命令名，如help cd。</li></ul><h2 id="pwd-ls-cd指令"><a href="#pwd-ls-cd指令" class="headerlink" title="pwd ls cd指令"></a>pwd ls cd指令</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul><li>print working directory</li></ul><p>​        显示当前工作目录的绝对路径。</p><p>​        <img src="/img/linux.assets/image-20211220094633128.png" alt="image-20211220094633128"></p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>查看目录</p><ul><li><p><strong>ls [选项] [目录或是文件]</strong></p><p><img src="/img/linux.assets/image-20211220094934713.png" alt="image-20211220094934713"></p></li></ul><p>常用选项：</p><ul><li><p><strong>-a：显示当前目录所有的文件和目录，包括隐藏的。</strong></p><p><img src="/img/linux.assets/image-20211220094855132.png" alt="image-20211220094855132"></p></li><li><p><strong>-l：以列表的方式显示信息</strong></p><p><img src="/img/linux.assets/image-20211220094907801.png" alt="image-20211220094907801"></p></li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>change directory</p><ul><li>基本语法<ul><li><strong>cd[参数] （功能描述。切换到指定目录）</strong></li></ul></li><li>常用参数<ul><li><strong>绝对</strong>路径和<strong>相对</strong>路径</li><li><strong>cd ~或者cd</strong> ：回到自己的家目录</li><li>**cd ..**：回到当前目录的上一级目录</li></ul></li></ul><h2 id="目录的创建和删除-mkdir-rmdir"><a href="#目录的创建和删除-mkdir-rmdir" class="headerlink" title="目录的创建和删除(mkdir rmdir)"></a>目录的创建和删除(mkdir rmdir)</h2><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>mkdir指令用于创建目录</p><ul><li><p>基本语法</p><ul><li>mkdir [选项] 要创建的目录</li></ul></li><li><p>常用选项</p><ul><li>-p：创建多级目录</li></ul><p><img src="/img/linux.assets/image-20211220100952200.png" alt="image-20211220100952200"></p></li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>rmdir指令删除<strong>空目录</strong></p><ul><li><p>基本语法</p><ul><li><p><strong>rmdir [选项] 要册除的空目录</strong></p><p><img src="/img/linux.assets/image-20211220101237370.png" alt="image-20211220101237370"></p></li></ul></li><li><p>rmdir删除的是空目录，如果目录下有内容时无法删除的。</p><ul><li><p>提示，如果需要删除非空目录，需要使用<strong>rm -rf 要删除的目录</strong></p><ul><li> -r recursive</li><li> -f force</li><li> 系统自杀 rm -rf /</li></ul><p><img src="/img/linux.assets/image-20211220102207935.png" alt="image-20211220102207935"></p></li></ul></li></ul><h2 id="创建文件和拷贝-touch-cp"><a href="#创建文件和拷贝-touch-cp" class="headerlink" title="创建文件和拷贝(touch cp)"></a>创建文件和拷贝(touch cp)</h2><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>touch指令<strong>创建空文件</strong></p><ul><li><p>基本语法</p><ul><li>touch 文件名称s（可创建多个空文件）</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：创建一个空文件hello.txt</p><ul><li>touch hello.txt</li></ul><p><img src="/img/linux.assets/image-20211220110132872.png" alt="image-20211220110132872"></p><ul><li><p>创建多个文件</p><p><img src="/img/linux.assets/image-20211220110712177.png" alt="image-20211220110712177"></p></li></ul></li></ul></li></ul><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>cp指令拷贝文件到指定目录</p><ul><li><p>基本语法</p><ul><li><strong>cp [选项] (source) (dest)</strong></li></ul></li><li><p>常用选项</p><ul><li>-r：递归复制整个文件夹</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：将/home/hello.txt拷贝到/home/test目录下（当前工作目录为/home）</p><p><img src="/img/linux.assets/image-20211220110538327.png" alt="image-20211220110538327"></p><p>案例2：递归复制整个文件夹，举例</p><p>cp -r src/  target/</p><p><img src="/img/linux.assets/image-20211220112030884.png" alt="image-20211220112030884"></p><p>注意一定要注意你当前的工作目录位置，然后准确地定位源目录和目标目录。</p></li></ul></li><li><p>使用细节</p><ul><li><p>强制覆盖不提示的方法： <strong>\cp</strong>（当文件太多时，需要覆盖可以直接使用）</p><ul><li><p>\cp -r src/  target/</p><p><img src="/img/linux.assets/image-20211220112148855.png" alt="image-20211220112148855"></p></li></ul></li></ul></li></ul><h2 id="删除和移动文件-rm-mv"><a href="#删除和移动文件-rm-mv" class="headerlink" title="删除和移动文件(rm mv)"></a>删除和移动文件(rm mv)</h2><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>rm指令移除文件或目录</p><ul><li>基本语法<ul><li>rm [选项] (要删除的文件或目录)</li></ul></li><li>常用选项<ul><li>-r：递归删除整个文件夹</li><li>-f：强制刚除不提示</li></ul></li><li>应用实例<ul><li>案例1：将/home/hello.txt删除（当前工作目录为/home）<ul><li><img src="/img/linux.assets/image-20211220192905591.png" alt="image-20211220192905591"></li></ul></li><li>案例2：递归删除整个文件夹/home/test1（当前工作目录为/home）<ul><li><img src="/img/linux.assets/image-20211220193053132.png" alt="image-20211220193053132"></li></ul></li></ul></li><li>使用细节<ul><li>强制删除不提示的方法。带上-f参数即可</li></ul></li></ul><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>mv 移动文件 与 目录或重命名</p><ul><li>基本语法<ul><li>mv (oldNameFile) (newNameFile)：(功能描述:<strong>重命名</strong>)</li><li>mv (/temp/movefile) (/targetFolder)：(功能描述:<strong>移动文件</strong>)</li></ul></li><li>应用实例<ul><li>案例1：将/home/aaa.txt文件重新命名为pig.txt（当前工作目录为/home）<ul><li>mv aaa.txt pig.txt</li></ul></li></ul></li><li>应用实例<ul><li>案例1：将/home/aaa.txt文件重新命名为pig.txt（当前工作目录为/home）<ul><li>mv aaa.txt pig.txt</li></ul></li><li>案例2：将/home/pig.txt文件移动到root目录下（当前工作目录为/home）<ul><li>mv pig.txt /root</li></ul></li></ul></li></ul><h2 id="查看文件-cat-more-less"><a href="#查看文件-cat-more-less" class="headerlink" title="查看文件(cat more less)"></a>查看文件(cat more less)</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>cat查看文件内容，是以<strong>只读</strong>的方式</p><ul><li>基本语法<ul><li><strong>cat [选项] 要查看的文件</strong></li></ul></li><li>常用选项<ul><li>-n：显示行号</li></ul></li><li>应用实例<ul><li>案例1: /ect/profile文件内容，并显示行号<ul><li>cat -n /ect/profile</li></ul></li></ul></li><li>使用细节<ul><li>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令| more<ul><li>cat -n /ect/profile | more</li></ul></li></ul></li></ul><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>more指令是一个基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。</p><p>more指令中内置了若干快捷键，详见操作说明：</p><p><img src="/img/linux.assets/image-20211220195959338.png" alt="image-20211220195959338"></p><ul><li>基本语法<ul><li>more 要查看的文件操作说明</li></ul></li><li>应用实例<ul><li>案例：采用more查看文件/etc/profile<ul><li>more /etc/profile</li></ul></li></ul></li></ul><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，<strong>对于显示大型文件具有较高的效率</strong>。</p><ul><li>基本语法<ul><li>less 要查看的文件</li></ul></li></ul><p><img src="/img/linux.assets/image-20211220200111064.png" alt="image-20211220200111064"></p><ul><li>应用实例<ul><li>案例：采用less查看一个大文件文件<ul><li>less /opt/金庸-射雕英雄传txt精校版.tx</li></ul></li></ul></li></ul><h2 id="重定向-gt-和-追加-gt-gt"><a href="#重定向-gt-和-追加-gt-gt" class="headerlink" title="重定向 &gt; 和 追加 &gt;&gt;"></a>重定向 &gt; 和 追加 &gt;&gt;</h2><p> &gt;输出重定向 和 &gt;&gt;追加</p><ul><li><p>基本语法</p><ul><li>ls -l &gt; 文件 （功能描述：列表的内容写入文件a.txt中（覆盖写））</li><li>Is -al &gt;&gt; 文件 （功能描述：列表的内容追加到文件aa.txt的末尾）</li><li>cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2）</li><li>echo “内容”&gt;&gt;文件</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：将/home目录下的文件列表写入到/home/info.txt中</p><ul><li>ls -l /home/ &gt; /home/info.txt</li></ul></li><li><p>案例2：将当前日历信息.追加到/home/mycal文件中[提示cal]</p><ul><li><p>cal &gt;&gt; /home/mycal</p><p><img src="/img/linux.assets/image-20211220203119350.png" alt="image-20211220203119350"></p></li></ul></li></ul></li></ul><h2 id="echo-head-tail指令"><a href="#echo-head-tail指令" class="headerlink" title="echo head tail指令"></a>echo head tail指令</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo 输出内容到控制台。</p><ul><li>基本语法<ul><li>echo [选项] [输出内容]</li></ul></li><li>应用实例<ul><li>案例：使用echo指令输出环境变量,输出当前的环境路径。<ul><li><strong>echo $PATH</strong></li></ul></li></ul></li><li>案例：使用echo指令输出hello,world!<ul><li>echo ”hello,world!“</li></ul></li></ul><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><ul><li>基本语法<ul><li>head 文件路径（功能描述：查看文件头10行内容）</li><li>head -n 5 文件路径（功能描述：查看文件头5行内容，5可以是任意行数）</li></ul></li><li>应用实例<ul><li>案例：查看/etc/profile的前面5行代码<ul><li>head -n 5 /etc/profile</li></ul></li></ul></li></ul><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。 </p><ul><li>基本语法<ul><li>tail 文件路径（功能描述:查看文件后10行内容）</li><li>tail -n 5 文件路径（功能描述:查看文件后5行内容，5可以是任意行数）</li><li><strong>tail -f 文件路径（功能描述：实时追踪该文档的所有更新，当在Linux终端操作时会在Xshell7上实时监控变化，ctrl+c 退出监控）</strong></li></ul></li><li>应用实例<ul><li>案例1：查看/etc/profile最后5行的代码<ul><li>tail -n 5 /etc/profile</li></ul></li></ul></li><li>案例2：实时监控mydate.txt，看看到文件有变化时，是否看到，实时的追加日期<ul><li>tail -f mydate.txt    </li></ul></li></ul><h2 id="ln-history指令"><a href="#ln-history指令" class="headerlink" title="ln history指令:"></a>ln history指令:</h2><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><p>软链接也叫符号链接，类似于windows里的<strong>快捷方式</strong>，主要存放了链接其他文件的路径</p><ul><li><p>基本语法</p><ul><li>ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）（如果软链接名时目录路径，cd 软链接名 就能跳到目录）</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：在/home目录下创建一个软连接linkToRoot，连接到/root目录</p><ul><li>ln -s /root linkToRoot</li></ul></li><li><p>案例2：删除软连接linkToRoot</p><ul><li>rm -rf linkToRoot（如果删除linkToRoot/，请三思）</li></ul></li></ul></li><li><p>细节说明</p><ul><li>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录。</li></ul></li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>查看已轻执行过历史命令,也可以执行历史指令</p><ul><li>基本语法<ul><li>history（功能描述，查看已经执行过历史命令）</li></ul></li><li>应用实例<ul><li>案例1：显示所有的历史命令<ul><li>history</li></ul></li><li>案例2：显示最近使用过的10个指令。<ul><li>history 10</li></ul></li><li>案例3：执行历史编号为5的指令<ul><li>!5</li></ul></li></ul></li></ul><h2 id="时间日期指令-date-cal"><a href="#时间日期指令-date-cal" class="headerlink" title="时间日期指令(date cal)"></a>时间日期指令(date cal)</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><h4 id="date指令-显示当前日期"><a href="#date指令-显示当前日期" class="headerlink" title="date指令-显示当前日期"></a>date指令-显示当前日期</h4><ul><li><p>基本语法</p><ul><li>date（功能描述：显示当前时间）</li><li>date +%Y（功能描述：显示当前年份）</li><li>date +%m（功能描述：显示当前月份）</li><li>date +%d（功能描述：显示当前是哪一天）</li><li>date “+%Y-%m-%d %H:%M:%S”（功能描述:显示年月日时分秒）</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：显示当前时间信息</p><ul><li>date</li></ul></li><li><p>案例2：显示当前时间年月日</p><ul><li>date “+%Y-%m-%d”</li><li>date “+%Y %m %d”</li></ul></li><li><p>案例3：显示当前时间年月日时分秒</p><ul><li>date “+%Y-%m-%d %H:%M:%S”</li></ul></li></ul></li></ul><h4 id="date指令-设置日期"><a href="#date指令-设置日期" class="headerlink" title="date指令-设置日期"></a>date指令-设置日期</h4><ul><li>基本语法<ul><li>date -s 字符串时间</li></ul></li><li>应用实例 <ul><li>案例1：设置系统当前时间，比如设置成2020-11-11 11:22:22<ul><li>date -s “2020-11-11 11:22:22”</li></ul></li></ul></li></ul><h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h3><p>查看日历指令</p><ul><li>基本语法<ul><li>cal [选项] （功能描述：不加选项，显示本月日历）</li></ul></li><li>应用实例<ul><li>案例1：显示当前日历<ul><li>cal</li></ul></li><li>案例2：显示2020年日历<ul><li>cal 2020</li></ul></li></ul></li></ul><h2 id="find-locate-grep-管道符"><a href="#find-locate-grep-管道符" class="headerlink" title="find locate grep 管道符"></a>find locate grep 管道符</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find指令将从<strong>指定目录向下递归地遍历其各个子目录</strong>，将满足条件的文件或者目录显示在终端。</p><ul><li><p>基本语法</p><ul><li>find [搜索范围] [选项]</li></ul></li><li><p>选项说明</p><p><img src="/img/linux.assets/image-20211220215851219.png" alt="image-20211220215851219"></p></li><li><p>应用实例</p><ul><li>案例1：按文件名：根据名称查找/home目录下的hello.txt文件<ul><li>find /home -name hello.txt</li></ul></li><li>案例2：按拥有者：查找/opt目录下，用户名称为nobody的文件<ul><li>find /opt -user nobody</li></ul></li><li>案例3：查找整个linux系统下大于、等于、小于20m的文件<ul><li>find / -size +20M</li><li>find / -size 20M</li><li>find / -size -20M</li></ul></li><li>案例4：按文件名：根据名称查找/目录下的以txt结尾的文件<ul><li>find / -name *.txt</li></ul></li></ul></li></ul><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>locate<strong>指令可以快速定位文件路径</strong>。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><ul><li><p>基本语法</p><ul><li>locate 搜索文件</li></ul></li><li><p>特别说明</p><ul><li>由于locate指令基于数据库进行查询，所以第一次运行前，<strong>必须使用updatedb指令创建locate数据库。</strong></li></ul></li><li><p>应用实例</p><ul><li><p>案例1：请使用locate指令快速定位hello.txt文件所在目录</p><ul><li><p>updatedb     —–&gt;     locate hello.txt</p><p><img src="/img/linux.assets/image-20211220220727206.png" alt="image-20211220220727206"></p></li></ul></li></ul></li></ul><h3 id="grep与管道符"><a href="#grep与管道符" class="headerlink" title="grep与管道符"></a>grep与管道符</h3><p>grep过滤查找，管道符“|“，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><ul><li><p>基本语法</p><ul><li>grep [选项] 查找内容源文件</li></ul></li><li><p>常用选项</p><p><img src="/img/linux.assets/image-20211220220035378.png" alt="image-20211220220035378"></p></li><li><p>应用实例</p><ul><li><p>案例1：请在hello.txt文件中，查找”yes”所在行，并且显示行号</p><ul><li>cat hello.txt | grep -n yes</li></ul><p><img src="/img/linux.assets/image-20211220220714996.png" alt="image-20211220220714996"></p></li></ul></li></ul><h2 id="压缩和解压类指令"><a href="#压缩和解压类指令" class="headerlink" title="压缩和解压类指令"></a>压缩和解压类指令</h2><h3 id="gzip-gunzip指令"><a href="#gzip-gunzip指令" class="headerlink" title="gzip/gunzip指令"></a>gzip/gunzip指令</h3><p>gzip用于压缩文件，gunzip用于解压的</p><ul><li>基本语法<ul><li>gzip （文件）（功能描述：压缩文件，只能将文件压缩为*.gz文件）</li><li>gunzip （文件.gz）（功能描述：解压缩文件命令）</li></ul></li><li>应用实例<ul><li>案例1：gzip压缩，将/home下的hello.txt文件进行压缩<ul><li>gzip hello.txt</li></ul></li><li>案例2：gunzip压缩，将/home下的hello.txt.gz文件进行解压缩<ul><li>gunzip hello.txt.gz</li></ul></li></ul></li><li>细节说明<ul><li>当我们使用gzip对文件进行压缩后，<strong>不会保留原来的文件</strong>。</li></ul></li></ul><h3 id="zip-unzip指令"><a href="#zip-unzip指令" class="headerlink" title="zip/unzip指令"></a>zip/unzip指令</h3><p><strong>zip用于压缩文件， unzip用于解压的</strong>，这个在项目打包发布中很有用的。</p><ul><li>基本语法<ul><li>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令)</li><li>unzip [选项] XXX.zip (功能描述：解压缩文件)</li></ul></li><li>zip和unzip常用选项<ul><li>-r：递归压缩，即压缩目录unzip的常用选项</li><li>-d &lt;目录&gt;：指定解压后文件的存放目录</li></ul></li><li>应用实例<ul><li>案例1：将/home下的所有文件进行压缩成mypackage.zip<ul><li>zip -r mypackage.zip /home/</li></ul></li><li>案例2：将mypackge.zip解压到/opt/tmp目录下<ul><li>upzip -d /opt/tmp/ mypackage.zip</li></ul></li></ul></li></ul><h3 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h3><p>tar指令是打包指令，最后打包后的文件是.tar.gz的文件。</p><ul><li>基本语法</li></ul><p>tar [选项] XXX.tar.gz 打包的内容（功能描述，打包目录，压缩后的文件格式.tar.gz）。</p><ul><li><p>选项说明</p><p><img src="/img/linux.assets/image-20211220222756904.png" alt="image-20211220222756904"></p></li><li><p>应用实例</p><ul><li>案例1：压缩多个文件,将/home/a1.txt和/home/a2.txt压缩成a.tar.gz<ul><li>tar -zcvf a.tar.gz a1.txt a2.txt</li></ul></li><li>案例2：将/home的文件夹压缩成myhome.tar.gz<ul><li>tar -zcvf myhome.tar.gz /home/</li></ul></li><li>案例3：将a.tar.gz解压到当前目录<ul><li>tar -zxvf a.tar.gz</li></ul></li><li>案例4：将myhome.tar.gz解压到/opt/自录下<ul><li>tar -zxvf myhome.tar.gz -<strong>C</strong> /opt/</li></ul></li></ul></li><li><p>细节说明</p><ul><li>指定解压到的那个目录，事先要存在才能成功，否则会抛错。</li></ul></li></ul><h1 id="Linux实操（组管理和权限管理）"><a href="#Linux实操（组管理和权限管理）" class="headerlink" title="Linux实操（组管理和权限管理）"></a>Linux实操（组管理和权限管理）</h1><h2 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h2><p>在Linux中的每个用户必须属于一个组，不能独立于组外。在Linux中每个文件有所有者、所在组、其它组的概态。</p><ol><li>所有者</li><li>所在组</li><li>其它组</li><li>改变用户所在的组</li></ol><h3 id="用户家目录的概念"><a href="#用户家目录的概念" class="headerlink" title="用户家目录的概念"></a>用户家目录的概念</h3><p>/home/</p><p>目录下有各个创建的用户对于的家目录，当用户登录时，会自动的进入到自己的家目录。</p><ul><li>/home/xm</li><li>/home/xh</li><li>/home/zwj</li></ul><h3 id="文件-目录所有者"><a href="#文件-目录所有者" class="headerlink" title="文件/目录所有者"></a>文件/目录所有者</h3><p>二般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者。</p><ul><li>查看文件的所有者<ul><li>指令：ls -ahl</li><li>应用实例：创建一个组police，再创建一个用户tom，将tom放入police组，然后使用tom来创建一个文件ok.txt，看看情况如何。<ul><li>groupadd police</li><li>useradd -g police tom</li><li>passwd tom 修改密码</li><li>touch ok.txt</li><li>ls -ahl</li></ul></li></ul></li><li>修改文件所有者<ul><li>指令：chown 用户名 文件名</li><li>应用案例：使用root创建一个文件apple.txt ，然后将其所有者修改成tom。<ul><li>chown tom apple.txt</li></ul></li></ul></li></ul><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><ul><li>基本指令<ul><li>groupadd 组名</li></ul></li><li>应用实例:<ul><li>创建一个组monster<ul><li>groupadd monster</li></ul></li></ul></li><li>创建一个用户fox ，并放入到monster组中<ul><li>useradd -g monster fox</li><li>id fox</li></ul></li></ul><h3 id="文件-目录所在组"><a href="#文件-目录所在组" class="headerlink" title="文件/目录所在组"></a>文件/目录所在组</h3><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。</p><ul><li>查看文件/目录所在组<ul><li>基本指令<ul><li>ls -ahl</li></ul></li></ul></li><li>修改文件所在的组<ul><li>基本指令<ul><li>chgrp 组名 文件名</li></ul></li></ul></li><li>应用实例：使用root用户创建文件 orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。<ul><li>touch orange.txt</li><li>chgrp police orange.txt</li></ul></li></ul><h3 id="其它组"><a href="#其它组" class="headerlink" title="其它组"></a>其它组</h3><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组。</p><h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组。</p><ul><li>改变用户所在组<ul><li>usermod -g 组名 用户名</li><li>usermod -d 目录名 用户名：改变该用户登陆的初始目录。</li></ul></li><li>应用实例<ul><li>创建一个土匪组（bandit）将tom这个用户从原来所在的police组，修改到 bandit（土匪）组。<ul><li>id tom：查看tom组信息</li><li>groupadd bandit</li><li>usermod -g bandit tom</li></ul></li></ul></li></ul><h2 id="权限详细介绍"><a href="#权限详细介绍" class="headerlink" title="权限详细介绍"></a>权限详细介绍</h2><h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3><p>ls -l中显示的内容如下：</p><p><img src="/img/linux.assets/image-20211221111634866.png" alt="image-20211221111634866"></p><p>前0~9位字符说明</p><ol><li><p>第0位确定文件类型（d, -, l, c, b）</p><ol><li>d：目录</li><li>-：普通文件</li><li>l：软链接</li><li>c：字符设备（键盘，鼠标）</li><li>b：块文件，硬盘</li></ol></li><li><p>第1-3位确定所有者（该文件的所有者）拥有该文件的权限。—User</p></li><li><p>第4-6位确定所属组（同用户组的）拥有该文件的权限，–Group</p></li><li><p>第7-9位确定其他用户拥有该文件的权限—Other</p></li></ol><h3 id="rwx权限详解（目录和文件的不同）"><a href="#rwx权限详解（目录和文件的不同）" class="headerlink" title="rwx权限详解（目录和文件的不同）"></a>rwx权限详解（目录和文件的不同）</h3><ul><li>rwx作用到文件<ul><li>[r]代表<strong>可读</strong>（read）：可以读取，查看</li><li>[w]代表<strong>可写</strong>（write）：可以修改，但是<strong>不代表可以删除该文件</strong>，删除<strong>一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</strong></li><li>[x]代表可<strong>执行</strong>（execute）：可以被执行</li></ul></li><li>rwx作用到目录<ul><li>[r]代表可读（read）：可以读取，ls查看目录内容</li><li>[w]代表可写（write）：可以修改，目录内<strong>创建+删除+重命名目录</strong></li><li>[x]代表可执行（execute）：可以进入该目录</li></ul></li></ul><h3 id="文件及目录权限实际案例"><a href="#文件及目录权限实际案例" class="headerlink" title="文件及目录权限实际案例"></a>文件及目录权限实际案例</h3><p>ls -中显示的内容如下：</p><p><code>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc</code></p><p>前10个字符确定不同用户能对文件干什么</p><ul><li><p>第一个字符代表文件类型：文件（-），目录（d），链接（I）</p></li><li><p>其余字符每3个一组（rwx）读（r）写（w）执行（x）</p><ul><li>第一组rwx：文件拥有者的权限是读、写和执行</li><li>第二组rw-：与文件拥有者同一组的用户的权限是读、写但不能执行</li><li>第三组r–：不与文件拥有者同组的其他用户的权限是读不能写和执行</li></ul></li><li><p>可用<strong>数字</strong>表示为：r=4,w=2,x=1因此rwx=4+2+1=7</p></li><li><p>1：</p><ul><li>如果是<strong>文件</strong>，表示<strong>硬连接数</strong></li><li>如果是<strong>目录</strong>，表示<strong>子目录数</strong></li></ul></li><li><p>root：用户</p></li><li><p>root：组</p></li><li><p>1213：文件大小（字节，如果是<strong>文件夹，显示4096字节</strong>）</p></li><li><p>Feb 2 09:39：最后修改日期</p></li><li><p>abc：文件名</p></li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限-chmod"></a>修改权限-chmod</h3><ul><li>基本说明：<ul><li>通过chmod指令，可以<strong>修改文件或者目录的</strong>权限。</li></ul></li><li>第一种方式：+、-、=变更权限<ul><li>字符意义：<ul><li>u：所有者</li><li>g：所有组</li><li>o：其他人</li><li>a：所有人(u、g、o的总和)</li></ul></li><li>一些示例<ul><li>chmod u=rwx,g=rx,o=x（文件目录名）</li><li>chmod o+w（文件目录名）</li><li>chmod a-x（文件目录名）</li></ul></li><li>案例演示<ul><li>给abc文件的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。<ul><li>chmod u=rwx,g=rx,o=rw abc</li></ul></li><li>给abc文件的所有者除去执行的权限，增加组写的权限<ul><li>chmod u-x,g+x abc</li></ul></li><li>给abc文件的所有用户添加读的权限<ul><li>chmod a+r abc</li></ul></li></ul></li></ul></li><li>第二种方式：通过数字变更权限<ul><li>r=4 w=2 x=1 rwx=4+2+1=7</li><li>（chmod u=rwx,g=rx,o=x 文件目录名）相当于 （chmod 751文件目录名）</li><li>案例演示<ul><li>将/home/abc.txt文件的权限修改成rwxr-xr-x,使用给数字的方式实现<ul><li>chmod 755 /home/abc.txt</li></ul></li></ul></li></ul></li></ul><h3 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h3><ul><li>基本介绍<ul><li>chown newowner file 改变文件的所有者</li><li>chown newowner:newgroup file 改变用户的所有者和所有组</li><li><strong>-R 如果是目录则使其下所有子文件或目录递归生效</strong></li></ul></li><li>案例演示:<ul><li>请将/home/abc .txt 文件的所有者修改成tom<ul><li>chown tom abc.txt</li></ul></li><li>请将/home/kkk 目录下所有的文件和目录的所有者都修改成tom<ul><li>chown -R tom kkk/</li></ul></li><li>细节说明：<ul><li>首选使用root操作</li></ul></li></ul></li></ul><h3 id="修改文件所在组-chgrp"><a href="#修改文件所在组-chgrp" class="headerlink" title="修改文件所在组-chgrp"></a>修改文件所在组-chgrp</h3><ul><li><p>基本介绍</p><ul><li>chgrp newgroup file 改变文件的所有组</li><li><strong>-R 如果是目录则使其下所有子文件或目录递归生效</strong></li></ul></li><li><p>案例演示：</p><ul><li><p>请将/home/abc .txt文件的所在组修改成shaolin</p><ul><li>chgrp shaolin /home/abc.txt</li></ul></li><li><p>请将/home/kkk目录下所有的文件和目录的所在组都修改成shaolin</p><ul><li>chgrp -R shaolin /home/kkk</li></ul></li></ul></li></ul><h2 id="权限最佳实践"><a href="#权限最佳实践" class="headerlink" title="权限最佳实践"></a>权限最佳实践</h2><h3 id="案例：警匪游戏"><a href="#案例：警匪游戏" class="headerlink" title="案例：警匪游戏"></a>案例：警匪游戏</h3><p>组：police , bandit</p><p>警察：jack, jerry</p><p>土匪：xh, xq</p><ol><li>创建组<ol><li>grounpadd police</li><li>grounpadd bandit</li></ol></li><li>创建用户<ol><li>useradd -g police jack</li><li>useradd -g police jerry</li><li>useradd -g bandit xh</li><li>useradd -g bandit xq</li></ol></li><li>修改用户密码<ol><li>passwd jack</li><li>passwd jerry</li><li>passwd xh</li><li>passwd xq</li></ol></li><li>jack创建一个文件，自己可以读写，本组人可以读，其它组没人任何权限<ol><li>chmod 640 jack01.txt</li></ol></li><li>jack修改该文件，让其它组人可以读，本组人可以读写<ol><li>chmod o=r,g=rw jack01.txt</li></ol></li><li>xh投靠警察，看看是否可以读写。<ol><li>先用root修改xh的组<ol><li>usermod -g police xh</li></ol></li><li>使用jack给他的家目录/home/jack的所在组一个rx的权限<ol><li>chmod g=rx jack/</li></ol></li><li>xh需要重新注销在到jack目录就可以操作jack的文件</li></ol></li></ol><h1 id="Linux实操（定时任务调度）"><a href="#Linux实操（定时任务调度）" class="headerlink" title="Linux实操（定时任务调度）"></a>Linux实操（定时任务调度）</h1><h3 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h3><p>crontab进行<strong>定时任务</strong>的设置。</p><ul><li>概述<ul><li>任务调度：是指系统在某个时间执行的特定的命令或程序。</li><li>任务调度分类：系统工作。<ul><li>有些重要的工作必须周而复始地执行。如病毒扫描等个别用户工作:</li><li>个别用户可能希望执行某些程序，比如对mysqI数据库的备份。</li></ul></li></ul></li><li>基本语法<ul><li><strong>crontab [选项]常用选项</strong></li></ul></li><li>常用选项<ul><li>-e：编辑crontab定时任务</li><li>-l：查询crontab任务</li><li>-r：删除当前用户所有的crontab任务</li><li>service crond restart [重启任务调度]</li></ul></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li><p>步骤：</p><ul><li>设置任务调度文件：/etc/crontab</li><li>设置个人任务调度。执行crontab -e命令。</li><li>接着输入任务到调度文件</li><li>如：*/1 * * * * Is -l /etc/ &gt; /tmp/to.txt</li><li>意思说每小时的每分钟执行ls -l /etc/ &gt; /tmp/to.txt命令</li></ul></li><li><p>5个占位符的说明：</p><p><img src="/img/linux.assets/image-20211221201749889.png" alt="image-20211221201749889"></p></li><li><p>特殊符号的说明：</p><p><img src="/img/linux.assets/image-20211221201819703.png" alt="image-20211221201819703"></p></li><li><p>特定时间执行任务案例：</p><p><img src="/img/linux.assets/image-20211221201845901.png" alt="image-20211221201845901"></p></li></ul><h2 id="任务调度应用实例"><a href="#任务调度应用实例" class="headerlink" title="任务调度应用实例"></a>任务调度应用实例</h2><h3 id="crond任务调度-1"><a href="#crond任务调度-1" class="headerlink" title="crond任务调度"></a>crond任务调度</h3><ul><li><p>应用实例</p><ul><li><p>案例1：每隔1分钟，就将当前的日期信息，追加到/tmp/mydate文件中。</p><ul><li>先编写一个文件 /home/mytask1.sh<ul><li>date &gt;&gt; /tmp/mydate</li></ul></li><li>给mytask1.sh一个可以执行权限<ul><li>chmod 744 /home/mytask1.sh</li></ul></li><li>crontab -e</li><li>*/1 * * * * /home/mytask1.sh</li><li>成功</li></ul></li><li><p>案例2：每隔1分钟，将当前日期和日历都追加到/home/mycal文件中。</p><ul><li>先编写一个文件 /home/mytask2.sh<ul><li>date &gt;&gt; /home/mycal</li><li>cal &gt;&gt; /home/mycal</li></ul></li><li>给mytask2.sh一个可以执行权限<ul><li>chmod 744 /home/mytask2.sh</li></ul></li><li>crontab -e</li><li>*/1 * * * * /home/mytask2.sh</li><li>成功</li></ul></li><li><p>案例3：每天凌晨2:00将mysql数据库testdb，备份到文件中。</p><ul><li><p>先编写一个文件 /home/mytask3.sh</p><ul><li>/usr/local/mysql/bin/mysqldump -u root -proot testdb &gt; /tmp/mydb.bak</li></ul></li><li><p>给mytask3.sh一个可以执行权限</p><ul><li>chmod 744 /home/mytask3.sh</li></ul></li><li><p>crontab -e</p></li><li><p>0 2 * * * /home/mytask3.sh</p></li><li><p>成功</p></li></ul></li><li><p>/bin/bash: mytask1.sh: 未找到命令 <a href="https://blog.csdn.net/jiangshuanshuan/article/details/102975231?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164009081516780261925930%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164009081516780261925930&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102975231.pc_search_insert_es_download&utm_term=crontab%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C.sh%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4&spm=1018.2226.3001.4187">解决方法</a></p></li></ul></li></ul><h1 id="Linux磁盘分区介绍"><a href="#Linux磁盘分区介绍" class="headerlink" title="Linux磁盘分区介绍"></a>Linux磁盘分区介绍</h1><h2 id="分区基础知识"><a href="#分区基础知识" class="headerlink" title="分区基础知识"></a>分区基础知识</h2><p>分区的方式：</p><ul><li>MBR分区：<ol><li>最多支持四个主分区</li><li>系统只能安装在主分区</li><li>扩展分区要占一个主分区</li><li>MBR最大只支持2TB，但拥有最好的兼容性</li></ol></li><li>gtp分区：<ol><li>支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）</li><li>最大支持18EB的大容量（1EB=1024 PB，1PB=1024TB）</li><li>windows7 64位以后支持gtp</li></ol></li></ul><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>Linux来说无论有几个分区，分给哪一目录使用，<strong>它归根结底就只有一个根目录</strong>，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>Linux采用了一种叫“<strong>载入</strong>”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p><img src="linux.assets/image-20211222142454137.png" alt="image-20211222142454137"></p><h3 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h3><ol><li>Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘。</li><li>对于IDE硬盘，驱动器标识符为“hdx”，其中“hd”表明分区所在设备的类型，这里是指IDE硬盘了。”x“为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从s属盘），“”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为第一个IDE硬盘上的第兰个主分区或扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</li><li>对于SCSI硬盘则标识为“sdx”，SCSI硬盘是用“sd“来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</li></ol><h3 id="使用lsblk指令查看当前系统的分区情况"><a href="#使用lsblk指令查看当前系统的分区情况" class="headerlink" title="使用lsblk指令查看当前系统的分区情况"></a>使用lsblk指令查看当前系统的分区情况</h3><p>lsblk -f：查看系统的分区和挂载的情况</p><p><img src="/img/linux.assets/image-20211222143050743.png" alt="image-20211222143050743"></p><p><img src="/img/linux.assets/image-20211222143237492.png" alt="image-20211222143237492"></p><h3 id="具体的操作步骤整理"><a href="#具体的操作步骤整理" class="headerlink" title="具体的操作步骤整理"></a>具体的操作步骤整理</h3><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><p>在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，至到完成。然后重启系统（才能识别）!</p><p><img src="/img/linux.assets/image-20211222151126987.png" alt="image-20211222151126987"></p><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><p>分区命令fdisk  /dev/sdb</p><p>开始对/sdb分区</p><ul><li>m 显示命令列表</li><li>p 显示磁盘分区同fdisk -l</li><li>n 新增分区</li><li>d 删除分区</li><li>w 写入并退出</li></ul><p><strong>说明</strong>：开始分区后输入n，新增分区，然后选择p，分区类型为主分区（p主分区，e扩展分区）。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</p><h4 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h4><p>格式化磁盘</p><p>分区命令mkfs -t ext4 /dev/sdb1</p><p>其中 <strong>ext4是分区类型</strong></p><h4 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h4><p>挂载：将一个分区与一个目录联系起来</p><ul><li>mount 设备名称 挂载目录<ul><li>例如：mount /dev/sdb1 /newdisk</li></ul></li><li>umount 设备名称 卸除目录<ul><li>例如：umount /dev/sdb1或者umount /newdisk</li></ul></li><li>用命令行挂载重启后会失效</li></ul><h4 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h4><p>永久挂载：通过vim修改/etc/fstab实现挂载添加完成后,:wq保存，执行mount -a即刻生效。</p><p><img src="/img/linux.assets/image-20211222153524456.png" alt="image-20211222153524456"></p><p>挂载成功</p><p><img src="/img/linux.assets/image-20211222153304361.png" alt="image-20211222153304361"></p><h2 id="磁盘查询实用指令"><a href="#磁盘查询实用指令" class="headerlink" title="磁盘查询实用指令"></a>磁盘查询实用指令</h2><h3 id="查询系统整体磁盘使用情况"><a href="#查询系统整体磁盘使用情况" class="headerlink" title="查询系统整体磁盘使用情况"></a>查询系统整体磁盘使用情况</h3><ul><li>基本语法<ul><li>df -h</li></ul></li><li>应用实例<ul><li>查询系统整体磁盘使用情况</li></ul></li></ul><h3 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h3><ul><li><p>基本语法</p><ul><li>du -h /目录</li></ul></li><li><p>查询指定目录的磁盘占用情况，默认为当前目录-s指定目录占用大小汇总</p><ul><li>-h 带计量单位</li><li>-a 含文件</li><li>–max-depth=1 子目录深度</li><li>-c 列出明细的同时，增加汇总值</li></ul></li><li><p>应用实例</p><ul><li>查询/opt目录的磁盘占用情况，深度为1<ul><li>du -ach –max-depth=1 /opt</li></ul></li></ul></li></ul><h3 id="磁盘情况-工作实用指令"><a href="#磁盘情况-工作实用指令" class="headerlink" title="磁盘情况-工作实用指令"></a>磁盘情况-工作实用指令</h3><ul><li>统计/home文件夹下文件的个数<ul><li>ls -l /home | grep “^-” | wc -l</li></ul></li><li>统计/home文件夹下目录的个数<ul><li>ls -l /home | grep “^d” | wc -l</li></ul></li><li>统计/home文件夹下文件的个数，包括子文件夹里的<ul><li>ls -lR /home | grep “^-” | wc -l</li></ul></li><li>统计文件夹下目录的个数，包括子文件夹里的<ul><li>ls -lR /home | grep “^d” | wc -l</li></ul></li><li>以树状显示目录结构<ul><li>tree</li><li>（没有就安装）yum install tree</li></ul></li></ul><h1 id="Linux网络配置原理和说明"><a href="#Linux网络配置原理和说明" class="headerlink" title="Linux网络配置原理和说明"></a>Linux网络配置原理和说明</h1><p><img src="/img/linux.assets/image-20211222170213291.png" alt="image-20211222170213291"></p><p>Windows下ipconfig可以查看网络信息（Windows下ipconfig不是内部命令<a href="https://blog.csdn.net/weixin_44774679/article/details/106446621?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164016252216780261979299%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164016252216780261979299&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-106446621.pc_search_insert_es_download&utm_term=ipconfig%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E5%91%BD%E4%BB%A4&spm=1018.2226.3001.4187">解决方案</a>）</p><h2 id="ping测试主机之间网络连通性"><a href="#ping测试主机之间网络连通性" class="headerlink" title="ping测试主机之间网络连通性"></a>ping测试主机之间网络连通性</h2><ul><li>基本语法<ul><li>ping 目的主机（功能描述:测试当前服务器是否可以连接目的主机）</li></ul></li><li>应用实例<ul><li>测试当前服务器是否可以连接百度<ul><li>ping <a href="http://www.baidu.com/">www.baidu.com</a></li></ul></li></ul></li></ul><h2 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h2><h3 id="查看网络虚拟编辑器修改"><a href="#查看网络虚拟编辑器修改" class="headerlink" title="查看网络虚拟编辑器修改"></a>查看网络虚拟编辑器<a href="https://blog.csdn.net/weixin_40055163/article/details/109292883?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164022735616780366567383%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164022735616780366567383&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-109292883.pc_search_insert_es_download&utm_term=centos7%E4%B8%AD%E4%BF%AE%E6%94%B9ip%E5%9C%B0%E5%9D%80&spm=1018.2226.3001.4187">修改</a></h3><p><img src="/img/linux.assets/image-20211223103752795.png" alt="image-20211223103752795"></p><h3 id="修改配置文件指定IP-CentOS7"><a href="#修改配置文件指定IP-CentOS7" class="headerlink" title="修改配置文件指定IP(CentOS7)"></a>修改配置文件指定IP(CentOS7)</h3><ul><li><p>在Linux下通过ifconfig查看,Windows下ipconfig查看虚拟网卡的ip和网关</p><p><img src="/img/linux.assets/image-20211223104453809.png" alt="image-20211223104453809"></p><p>找到配置文件名字</p></li><li><p>说明</p><ul><li>直接修改配置文件来指定IP，并可以连接到外网（推荐），编辑<ul><li>vi /etc/sysconfig/network-scripts/ifcfg-ens32</li><li><img src="/img/linux.assets/image-20211223105218685.png" alt="image-20211223105218685"></li></ul></li><li>wq保存后，service network restart重启服务</li></ul></li></ul><h1 id="Linux进程管理"><a href="#Linux进程管理" class="headerlink" title="Linux进程管理"></a>Linux进程管理</h1><h2 id="进程介绍和查询"><a href="#进程介绍和查询" class="headerlink" title="进程介绍和查询"></a>进程介绍和查询</h2><h3 id="进程基本介绍"><a href="#进程基本介绍" class="headerlink" title="进程基本介绍"></a>进程基本介绍</h3><ol><li>在Linux中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID号。</li><li>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</li><li>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法着到的进程，通常使用后台方式执行。</li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</li></ol><h3 id="查询系统执行的进程"><a href="#查询系统执行的进程" class="headerlink" title="查询系统执行的进程"></a>查询系统执行的进程</h3><p><strong>PS命令</strong>是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。</p><p><img src="/img/linux.assets/image-20211223112110734.png" alt="image-20211223112110734"></p><ul><li>ps -a：显示当前终端的所有进程信息</li><li>ps -u：以用户的格式显示进程信息</li><li>ps -x：显示后台进程运行的参数</li></ul><h4 id="PS详解"><a href="#PS详解" class="headerlink" title="PS详解"></a>PS详解</h4><ul><li>指令: ps -aux | grep xxx</li><li>指令说明：<ul><li>System V展示风格</li><li>USER:用户名称</li><li>PID:进程号</li><li>%CPU：进程占用CPU的百分比</li><li>%MEM：进程占用物理内存的百分比</li><li>VSZ：进程占用的虚拟内存大小（单位:KB）</li><li>RSS：进程占用的物理内存大小（单位:KB）</li><li>T：终端名称，缩写</li><li>STAT：进程状态，其中：<ul><li>S：睡眠，</li><li>s：表示该进程是会话的先导进程，</li><li>N：表示进程拥有比普通优先级更低的优先级，</li><li>R：正在运行，</li><li>D：短期等待，</li><li>Z：僵死进程，</li><li>T：被跟踪或者被停止</li><li>等等</li></ul></li><li>STARTED：进程的启动时间</li><li>TIME：CPU时间，即进程使用CPU的总时间</li><li>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</li></ul></li><li>案例<ul><li>比如我看看有没有sshd服务<ul><li>ps -aux | grep sshd</li></ul></li></ul></li></ul><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>要求：以全格式显示当前所有的进程，查看进程的父进程。</p><ul><li>ps -ef是以全格式显示当前所有的进程</li><li>-e：显示所有进程</li><li>-f：全格式</li><li>ps -ef|grep xxx<ul><li>是BSD风格</li><li>UID：用户ID</li><li>PID：进程ID</li><li>PPID：父进程ID</li><li>C：CPU用于计算执行优先级的因子。<ul><li>数值越大，表明进程是CPU密集型运算，执行优先级会降低</li><li>数值越小，表明进程是I/O密集型运算，执行优先级会提高</li></ul></li><li>STIME：进程启动的时间</li><li>TTY：完整的终端名称</li><li>TIME：CPU时间</li><li>CMD：启动进程所用的命令和参数</li></ul></li></ul><p>应用案例：查看sshd进程的父进程号是多少，应该怎样？</p><p>ps -ef | grep sshd</p><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><h3 id="终止进程kill和killall"><a href="#终止进程kill和killall" class="headerlink" title="终止进程kill和killall"></a>终止进程kill和killall</h3><ul><li><p>介绍</p><ul><li>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务。</li></ul></li><li><p>基本语法</p><ul><li>kill [选项] 进程号（功能描述：通过进程号杀死进程）</li><li>killall 进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</li></ul></li><li><p>常用选项</p><ul><li>-9：<strong>表示强迫进程立即停止</strong></li></ul></li><li><p>最佳实践</p><ul><li><p>案例1：踢掉某个非法登录用户</p><p><img src="/img/linux.assets/image-20211223143823623.png" alt="image-20211223143823623"></p></li><li><p>案例2：终止远程登录服务sshd，在适当时候再次重启sshd服务</p><p><img src="/img/linux.assets/image-20211223143951529.png" alt="image-20211223143951529"></p></li><li><p>案例3：终止多个gedit编辑器</p><ul><li>killall gedit</li></ul></li><li><p>案例4：强制杀掉一个终端</p><p><img src="/img/linux.assets/image-20211223144746275.png" alt="image-20211223144746275"></p></li></ul></li></ul><h2 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h2><ul><li>基本语法<ul><li>pstree [选项] 可以更加直观的来看进程信息</li></ul></li><li>常用选项<ul><li>-p：显示进程的PID</li><li>-u：显示进程的所属用户</li></ul></li><li>应用实例<ul><li>案例1：请你树状的形式显示进程的pid<ul><li>pstree -p</li></ul></li></ul></li><li>案例2：请你树状的形式进程的用户id<ul><li>pstree -u</li></ul></li></ul><h2 id="Linux服务管理"><a href="#Linux服务管理" class="headerlink" title="Linux服务管理"></a>Linux服务管理</h2><ul><li><p>介绍</p><ul><li><p>服务（service）本质就是<strong>进程</strong>，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如（mysql , sshd 防火墙等），因此我们又称为<strong>守护进程</strong>，是Linux中非常重要的知识点。</p><p><img src="/img/linux.assets/image-20211223153217895.png" alt="image-20211223153217895"></p></li></ul></li><li><p>指令</p><ul><li>service 服务名 start [stop | restart | reload | status]<ul><li>在CentOS 7.0后不再使用service，而是systemctl</li><li><strong>systemctl</strong></li></ul></li></ul></li><li><p>使用案例</p><ul><li><p><a href="https://blog.csdn.net/qq_36640713/article/details/106553833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164024653516780265472458%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164024653516780265472458&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-106553833.pc_search_insert_es_download&utm_term=Linux%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%A4%B1%E8%B4%A5&spm=1018.2226.3001.4187">查看当前防火墙的状况</a>，关闭防火墙和重启防火墙。</p><ul><li><p>开启防火墙:</p><p>CentOS7: systemctl start firewalld.service </p><p>CentOS6: service iptables start</p><ul><li><p>查看防火墙:</p><p>CentOS7: systemctl status firewalld </p><p>CentOS6: service iptables status</p></li></ul></li><li><p>关闭防火墙:</p><p>CentOS7: systemctl stop firewalld.service </p><p>CentOS6: service iptables stop</p></li></ul></li></ul></li><li><p>细节讨论</p><ul><li>关闭或者启用防火墙后，立即生效。[telne t测试某个端口即可]<ul><li>telnet [ip地址] [端口号]</li></ul></li><li><strong>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置</strong>。</li><li>如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig指令。</li></ul></li><li><p>查看服务名</p><ul><li>使用setup-&gt;系统服务就可以看到。</li><li>/etc/init.d/ 服务名称<ul><li>ls -l /etc/init.d</li></ul></li></ul></li><li><p>服务的运行级别（runlevel）：</p><ul><li><p>查看或者修改默认级别: vi /etc/inittab</p></li><li><p>Linux系统有7种运行级别（runlevel）：（常用的是级别3和5）</p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态（没有NFS），不支持网络</li><li>运行级别3：完全的多用户状态（有NFS），登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul></li><li><p>开机流程说明:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/682e8e626c978294ea39abcc80a2eb80.png" alt="img"></p></li></ul></li><li><p>chkconfig指令</p><ul><li><p>介绍</p><ul><li>通过chkconfig命令可以给各个运行级别设置自启动/关闭</li></ul></li><li><p>基本语法</p><ul><li><p>查看服务</p><ul><li>chkconfig –list | grep 服务名</li><li>chkconfig 服务名 –list</li></ul></li><li><p>chkconfig –level 5 服务名 on/off</p><ul><li>例如：请将sshd服务在运行级别为5的情况下，不要自启动<ul><li>chkconfig –level 5 sshd off</li></ul></li></ul></li></ul></li></ul></li><li><p>注意：<a href="https://blog.csdn.net/cds86333774/article/details/51165361?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.highlightwordscore&spm=1001.2101.3001.4242.1">CentOS7使用<strong>systemctl</strong>代替</a>:</p><p><img src="https://img-blog.csdn.net/20180208182001742" alt="img"></p></li></ul><p>​            查看服务是否开机启动：systemctl is-enabled firewalld.servicesystemctl is-enabled firewalld.service</p><p>​            查看开机启动的服务列表：systemctl list-unit-files|grep enabled</p><p>​            查看启动失败的服务列表：systemctl –failed</p><h2 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h2><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><ul><li><p>介绍</p><ul><li>top与ps命令很相似。它们都用来显示正在执行的进程。top与ps最大的不同之处，在于<strong>top在执行一段时间可以更新正在运行的的进程</strong>。</li></ul></li><li><p>基本语法</p><ul><li>top [选项]</li></ul></li><li><p>选项说明</p><p><img src="/img/linux.assets/image-20211223170902439.png" alt="image-20211223170902439"></p></li><li><p>交互操作说明</p><p><img src="/img/linux.assets/image-20211223171002959.png" alt="image-20211223171002959"></p></li><li><p><img src="/img/linux.assets/image-20211223172716674.png" alt="image-20211223172716674"></p></li><li><p>应用实例</p><ul><li><p>案例1：监视特定用户</p><ul><li><p>top：输入此命令，按回车键，查看执行的进程。</p></li><li><p>u：然后输入u，再输入用户名，回车，即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b98a90543dd886a25a3733637879e5e8.png" alt="img"></p></li><li><p>案例2：终止指定的进程</p><ul><li><p>top：输入此命令，按回车键，查看执行的进程。</p></li><li><p>k：然后输入k，再输入要结策的进程ID号，回车即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7eecfb2832246542e090c1276adbb63d.png" alt="img"></p></li></ul></li><li><p>案例3：指定系统状态更新的时间（每隔10秒自动更新，默认是3秒）</p><ul><li>top -d 10</li></ul></li></ul></li></ul></li></ul><h3 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h3><p><strong>查看系统网络情况netstat</strong></p><ul><li><p>基本语法</p><ul><li>netstat[选项]</li></ul></li><li><p>选项说明</p><ul><li>-an 按一定顺序排列输出</li><li>-p 显示哪个进程在调用</li></ul><p><img src="/img/linux.assets/image-20211223183042370.png" alt="image-20211223183042370"></p></li><li><p>应用案例</p><ul><li>查看系统所有的网络服务<ul><li>netstat -anp | more</li></ul></li></ul></li><li><p>请查看服务名为sshd 的服务的信息。</p><ul><li>netstat -anp | grep sshd</li></ul></li></ul><p><strong>检测主机连接命令ping</strong></p><ul><li>ping是一种网络检测检测工具，它主要是用检测远程主机是否正常，或是两部主机间的介质是否为断、网线是否脱落或网卡故障。</li><li>如：ping对方ip地址</li></ul><h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><h2 id="RPM包管理"><a href="#RPM包管理" class="headerlink" title="RPM包管理"></a>RPM包管理</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一种用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有RPM扩展名的文件。RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><p>Linux的分发版本都有采用（suse，redhat，centos等等），可以算是公认的行业标准了。</p><h3 id="rpm包的简单查询指令"><a href="#rpm包的简单查询指令" class="headerlink" title="rpm包的简单查询指令"></a>rpm包的简单查询指令</h3><p>查询已安装的rpm列表rpm -qa l grep xx</p><p>一个rpm包名：firefox-91.4.0-1.el7.centos.x86_64</p><ul><li>名称：firefox</li><li>版本号：91.4.0-1.el7</li><li>适用操作系统：el7.centos.x86_64<ul><li>表示centos6.x的64位系统</li><li>如果是i686、i386表示32位系统，noarch表示通用。</li></ul></li></ul><h3 id="rpm包的其它查询指令"><a href="#rpm包的其它查询指令" class="headerlink" title="rpm包的其它查询指令"></a>rpm包的其它查询指令</h3><ul><li>rpm-qa：查询所安装的所有rpm软件包<ul><li>rpm-qa | more</li><li>rpm-qa | grep xxx [rpm -qa | grep firefox ]</li></ul></li><li>rpm -q 软件包名：查询软件包是否安装<ul><li>rpm -q firefox</li></ul></li><li>rpm -qi 软件包名：查询软件包信息<ul><li>rpm -qi firefox</li></ul></li><li>rpm -ql 软件包名：查询软件包中的文件<ul><li>rpm -ql firefox</li></ul></li><li>rpm -qf 文件全路径名：查询文件所属的软件包<ul><li>rpm -qf /etc/passwd</li><li>rpm -qf /root/install.log</li></ul></li></ul><h3 id="卸载rpm包"><a href="#卸载rpm包" class="headerlink" title="卸载rpm包"></a>卸载rpm包</h3><ul><li><p>基本语法</p><ul><li>rpm -e RPM包的名称</li></ul></li><li><p>应用案例</p><ul><li>删除firefox软件包<ul><li>rpm -e firefox</li></ul></li></ul></li><li><p>细节讨论</p><ul><li>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。<ul><li>如：rpm -e foo removing these packages would break dependencies:foo is needed by bar-1.0-1</li></ul></li></ul></li><li><p>如果我们就是要删除foo这个rpm包，可以增加参数<strong>–nodeps</strong>，就可以强制删除，但是</p><p>一般不推荐这样做，因为依赖于该软件包的程序可能无法运行</p><ul><li>如：rpm -e –nodeps foo</li></ul></li></ul><h3 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h3><ul><li><p>基本语法</p><ul><li>rpm -ivh RPM包全路径名称</li></ul></li><li><p>参数说明</p><ul><li>i=install安装</li><li>v=verbose提示</li><li>h=hash 进度条</li></ul></li><li><p>应用实例</p><ul><li><p>安装firefox浏览器</p><ul><li><p>先找到firefox的安装rpm包，你需要挂载上我们安装centos的iso文件，然后到/run/media/root(CentOS7的目录)下去找rpm找。</p><p>这个路径则存在所有rpm安装包:</p><p><img src="/img/linux.assets/image-20220101112839968.png" alt="image-20220101112839968"></p></li><li><p>虚拟机可以按照以下方式挂载iso：</p><p><img src="/img/linux.assets/image-20220101112650789.png" alt="image-20220101112650789"></p></li><li><p>cp拷贝到/opt/目录进行安装</p></li></ul></li></ul></li></ul><h2 id="YUM包管理"><a href="#YUM包管理" class="headerlink" title="YUM包管理"></a>YUM包管理</h2><ul><li>简介<ul><li>yum是一个shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</li></ul></li><li>基本指令<ul><li>查询yum服务器是否有需要安装的软件<ul><li>yum list | grep xxx软件列表</li></ul></li><li>安装指定的yum包<ul><li>yum install xxx 下载安装yum</li></ul></li></ul></li><li>应用实例<ul><li>案例：请使用yum的方式来安装firefox<ul><li>先查看以下firefox rpm在yum服务器有没有<ul><li>yum list | grep firefox</li></ul></li><li>安装 yum install firefox</li></ul></li></ul></li></ul><p>​                    </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
